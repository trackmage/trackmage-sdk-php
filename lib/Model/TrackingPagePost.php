<?php
/**
 * TrackingPagePost
 *
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trackmage Public API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: dev
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Model;

use \ArrayAccess;
use \TrackMage\Client\Swagger\ObjectSerializer;

/**
 * TrackingPagePost Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrackingPagePost implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TrackingPage-Post';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'reviewsEnabled' => 'bool',
        'title' => 'string',
        'subdomain' => 'string',
        'domain' => 'string',
        'sidebarField' => 'string',
        'trackingNumberField' => 'string',
        'builder' => 'object',
        'dropshipperSettings' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'reviewsEnabled' => null,
        'title' => null,
        'subdomain' => null,
        'domain' => null,
        'sidebarField' => null,
        'trackingNumberField' => null,
        'builder' => null,
        'dropshipperSettings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'reviewsEnabled' => 'reviewsEnabled',
        'title' => 'title',
        'subdomain' => 'subdomain',
        'domain' => 'domain',
        'sidebarField' => 'sidebarField',
        'trackingNumberField' => 'trackingNumberField',
        'builder' => 'builder',
        'dropshipperSettings' => 'dropshipperSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'reviewsEnabled' => 'setReviewsEnabled',
        'title' => 'setTitle',
        'subdomain' => 'setSubdomain',
        'domain' => 'setDomain',
        'sidebarField' => 'setSidebarField',
        'trackingNumberField' => 'setTrackingNumberField',
        'builder' => 'setBuilder',
        'dropshipperSettings' => 'setDropshipperSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'reviewsEnabled' => 'getReviewsEnabled',
        'title' => 'getTitle',
        'subdomain' => 'getSubdomain',
        'domain' => 'getDomain',
        'sidebarField' => 'getSidebarField',
        'trackingNumberField' => 'getTrackingNumberField',
        'builder' => 'getBuilder',
        'dropshipperSettings' => 'getDropshipperSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['reviewsEnabled'] = isset($data['reviewsEnabled']) ? $data['reviewsEnabled'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['subdomain'] = isset($data['subdomain']) ? $data['subdomain'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['sidebarField'] = isset($data['sidebarField']) ? $data['sidebarField'] : null;
        $this->container['trackingNumberField'] = isset($data['trackingNumberField']) ? $data['trackingNumberField'] : null;
        $this->container['builder'] = isset($data['builder']) ? $data['builder'] : null;
        $this->container['dropshipperSettings'] = isset($data['dropshipperSettings']) ? $data['dropshipperSettings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['subdomain'] === null) {
            $invalidProperties[] = "'subdomain' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets reviewsEnabled
     *
     * @return bool|null
     */
    public function getReviewsEnabled()
    {
        return $this->container['reviewsEnabled'];
    }

    /**
     * Sets reviewsEnabled
     *
     * @param bool|null $reviewsEnabled reviewsEnabled
     *
     * @return $this
     */
    public function setReviewsEnabled($reviewsEnabled)
    {
        $this->container['reviewsEnabled'] = $reviewsEnabled;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets subdomain
     *
     * @return string
     */
    public function getSubdomain()
    {
        return $this->container['subdomain'];
    }

    /**
     * Sets subdomain
     *
     * @param string $subdomain subdomain
     *
     * @return $this
     */
    public function setSubdomain($subdomain)
    {
        $this->container['subdomain'] = $subdomain;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets sidebarField
     *
     * @return string|null
     */
    public function getSidebarField()
    {
        return $this->container['sidebarField'];
    }

    /**
     * Sets sidebarField
     *
     * @param string|null $sidebarField sidebarField
     *
     * @return $this
     */
    public function setSidebarField($sidebarField)
    {
        $this->container['sidebarField'] = $sidebarField;

        return $this;
    }

    /**
     * Gets trackingNumberField
     *
     * @return string|null
     */
    public function getTrackingNumberField()
    {
        return $this->container['trackingNumberField'];
    }

    /**
     * Sets trackingNumberField
     *
     * @param string|null $trackingNumberField trackingNumberField
     *
     * @return $this
     */
    public function setTrackingNumberField($trackingNumberField)
    {
        $this->container['trackingNumberField'] = $trackingNumberField;

        return $this;
    }

    /**
     * Gets builder
     *
     * @return object|null
     */
    public function getBuilder()
    {
        return $this->container['builder'];
    }

    /**
     * Sets builder
     *
     * @param object|null $builder builder
     *
     * @return $this
     */
    public function setBuilder($builder)
    {
        $this->container['builder'] = $builder;

        return $this;
    }

    /**
     * Gets dropshipperSettings
     *
     * @return object|null
     */
    public function getDropshipperSettings()
    {
        return $this->container['dropshipperSettings'];
    }

    /**
     * Sets dropshipperSettings
     *
     * @param object|null $dropshipperSettings dropshipperSettings
     *
     * @return $this
     */
    public function setDropshipperSettings($dropshipperSettings)
    {
        $this->container['dropshipperSettings'] = $dropshipperSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


