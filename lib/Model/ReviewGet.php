<?php
/**
 * ReviewGet
 *
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trackmage Public API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: dev
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Model;

use \ArrayAccess;
use \TrackMage\Client\Swagger\ObjectSerializer;

/**
 * ReviewGet Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReviewGet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Review-Get';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'workspace' => 'string',
        'shipment' => 'string',
        'carrierScore' => 'int',
        'productScore' => 'int',
        'packagingScore' => 'int',
        'totalScore' => 'float',
        'comment' => 'string',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'workspace' => 'iri-reference',
        'shipment' => 'iri-reference',
        'carrierScore' => null,
        'productScore' => null,
        'packagingScore' => null,
        'totalScore' => null,
        'comment' => null,
        'id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'workspace' => 'workspace',
        'shipment' => 'shipment',
        'carrierScore' => 'carrierScore',
        'productScore' => 'productScore',
        'packagingScore' => 'packagingScore',
        'totalScore' => 'totalScore',
        'comment' => 'comment',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'workspace' => 'setWorkspace',
        'shipment' => 'setShipment',
        'carrierScore' => 'setCarrierScore',
        'productScore' => 'setProductScore',
        'packagingScore' => 'setPackagingScore',
        'totalScore' => 'setTotalScore',
        'comment' => 'setComment',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'workspace' => 'getWorkspace',
        'shipment' => 'getShipment',
        'carrierScore' => 'getCarrierScore',
        'productScore' => 'getProductScore',
        'packagingScore' => 'getPackagingScore',
        'totalScore' => 'getTotalScore',
        'comment' => 'getComment',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['workspace'] = isset($data['workspace']) ? $data['workspace'] : null;
        $this->container['shipment'] = isset($data['shipment']) ? $data['shipment'] : null;
        $this->container['carrierScore'] = isset($data['carrierScore']) ? $data['carrierScore'] : null;
        $this->container['productScore'] = isset($data['productScore']) ? $data['productScore'] : null;
        $this->container['packagingScore'] = isset($data['packagingScore']) ? $data['packagingScore'] : null;
        $this->container['totalScore'] = isset($data['totalScore']) ? $data['totalScore'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets workspace
     *
     * @return string|null
     */
    public function getWorkspace()
    {
        return $this->container['workspace'];
    }

    /**
     * Sets workspace
     *
     * @param string|null $workspace workspace
     *
     * @return $this
     */
    public function setWorkspace($workspace)
    {
        $this->container['workspace'] = $workspace;

        return $this;
    }

    /**
     * Gets shipment
     *
     * @return string|null
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     *
     * @param string|null $shipment shipment
     *
     * @return $this
     */
    public function setShipment($shipment)
    {
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets carrierScore
     *
     * @return int|null
     */
    public function getCarrierScore()
    {
        return $this->container['carrierScore'];
    }

    /**
     * Sets carrierScore
     *
     * @param int|null $carrierScore carrierScore
     *
     * @return $this
     */
    public function setCarrierScore($carrierScore)
    {
        $this->container['carrierScore'] = $carrierScore;

        return $this;
    }

    /**
     * Gets productScore
     *
     * @return int|null
     */
    public function getProductScore()
    {
        return $this->container['productScore'];
    }

    /**
     * Sets productScore
     *
     * @param int|null $productScore productScore
     *
     * @return $this
     */
    public function setProductScore($productScore)
    {
        $this->container['productScore'] = $productScore;

        return $this;
    }

    /**
     * Gets packagingScore
     *
     * @return int|null
     */
    public function getPackagingScore()
    {
        return $this->container['packagingScore'];
    }

    /**
     * Sets packagingScore
     *
     * @param int|null $packagingScore packagingScore
     *
     * @return $this
     */
    public function setPackagingScore($packagingScore)
    {
        $this->container['packagingScore'] = $packagingScore;

        return $this;
    }

    /**
     * Gets totalScore
     *
     * @return float|null
     */
    public function getTotalScore()
    {
        return $this->container['totalScore'];
    }

    /**
     * Sets totalScore
     *
     * @param float|null $totalScore totalScore
     *
     * @return $this
     */
    public function setTotalScore($totalScore)
    {
        $this->container['totalScore'] = $totalScore;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


