<?php
/**
 * StatusApi
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trackmage Public API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: dev
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TrackMage\Client\Swagger\ApiException;
use TrackMage\Client\Swagger\Configuration;
use TrackMage\Client\Swagger\HeaderSelector;
use TrackMage\Client\Swagger\ObjectSerializer;

/**
 * StatusApi Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StatusApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiTeamsWorkspacesStatusesGetSubresource
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $entity entity (optional)
     * @param  string $code code (optional)
     * @param  string $title title (optional)
     * @param  string $orderEntity orderEntity (optional)
     * @param  string $orderCode orderCode (optional)
     * @param  string $orderTitle orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\StatusGet[]
     */
    public function apiTeamsWorkspacesStatusesGetSubresource($id, $workspaces, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesStatusesGetSubresourceWithHttpInfo($id, $workspaces, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesStatusesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\StatusGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesStatusesGetSubresourceWithHttpInfo($id, $workspaces, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesStatusesGetSubresourceRequest($id, $workspaces, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\StatusGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\StatusGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\StatusGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\StatusGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesStatusesGetSubresourceAsync
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesStatusesGetSubresourceAsync($id, $workspaces, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesStatusesGetSubresourceAsyncWithHttpInfo($id, $workspaces, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesStatusesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesStatusesGetSubresourceAsyncWithHttpInfo($id, $workspaces, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\StatusGet[]';
        $request = $this->apiTeamsWorkspacesStatusesGetSubresourceRequest($id, $workspaces, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesStatusesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesStatusesGetSubresourceRequest($id, $workspaces, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesStatusesGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesStatusesGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($entity)) {
            $entity = ObjectSerializer::serializeCollection($entity, '', true);
        }
        if ($entity !== null) {
            $queryParams['entity'] = $entity;
        }
        // query params
        if (is_array($code)) {
            $code = ObjectSerializer::serializeCollection($code, '', true);
        }
        if ($code !== null) {
            $queryParams['code'] = $code;
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($orderEntity)) {
            $orderEntity = ObjectSerializer::serializeCollection($orderEntity, '', true);
        }
        if ($orderEntity !== null) {
            $queryParams['order[entity]'] = $orderEntity;
        }
        // query params
        if (is_array($orderCode)) {
            $orderCode = ObjectSerializer::serializeCollection($orderCode, '', true);
        }
        if ($orderCode !== null) {
            $queryParams['order[code]'] = $orderCode;
        }
        // query params
        if (is_array($orderTitle)) {
            $orderTitle = ObjectSerializer::serializeCollection($orderTitle, '', true);
        }
        if ($orderTitle !== null) {
            $queryParams['order[title]'] = $orderTitle;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesStatusesGetSubresource
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id id (required)
     * @param  string $entity entity (optional)
     * @param  string $code code (optional)
     * @param  string $title title (optional)
     * @param  string $orderEntity orderEntity (optional)
     * @param  string $orderCode orderCode (optional)
     * @param  string $orderTitle orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\StatusGet[]
     */
    public function apiWorkspacesStatusesGetSubresource($id, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiWorkspacesStatusesGetSubresourceWithHttpInfo($id, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiWorkspacesStatusesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\StatusGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesStatusesGetSubresourceWithHttpInfo($id, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiWorkspacesStatusesGetSubresourceRequest($id, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\StatusGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\StatusGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\StatusGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\StatusGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesStatusesGetSubresourceAsync
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesStatusesGetSubresourceAsync($id, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiWorkspacesStatusesGetSubresourceAsyncWithHttpInfo($id, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesStatusesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesStatusesGetSubresourceAsyncWithHttpInfo($id, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\StatusGet[]';
        $request = $this->apiWorkspacesStatusesGetSubresourceRequest($id, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesStatusesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesStatusesGetSubresourceRequest($id, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesStatusesGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($entity)) {
            $entity = ObjectSerializer::serializeCollection($entity, '', true);
        }
        if ($entity !== null) {
            $queryParams['entity'] = $entity;
        }
        // query params
        if (is_array($code)) {
            $code = ObjectSerializer::serializeCollection($code, '', true);
        }
        if ($code !== null) {
            $queryParams['code'] = $code;
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($orderEntity)) {
            $orderEntity = ObjectSerializer::serializeCollection($orderEntity, '', true);
        }
        if ($orderEntity !== null) {
            $queryParams['order[entity]'] = $orderEntity;
        }
        // query params
        if (is_array($orderCode)) {
            $orderCode = ObjectSerializer::serializeCollection($orderCode, '', true);
        }
        if ($orderCode !== null) {
            $queryParams['order[code]'] = $orderCode;
        }
        // query params
        if (is_array($orderTitle)) {
            $orderTitle = ObjectSerializer::serializeCollection($orderTitle, '', true);
        }
        if ($orderTitle !== null) {
            $queryParams['order[title]'] = $orderTitle;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkStatusCollection
     *
     * Check if the status has references
     *
     * @param  \TrackMage\Client\Swagger\Model\Status113e64b04cfc724b475734cd9eb5ea56SetCheckStatusRefsRequest $status The new Status resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\Status01d0f434438e480f7bbc7790c6311108GetCheckStatusRefsResponse
     */
    public function checkStatusCollection($status = null)
    {
        list($response) = $this->checkStatusCollectionWithHttpInfo($status);
        return $response;
    }

    /**
     * Operation checkStatusCollectionWithHttpInfo
     *
     * Check if the status has references
     *
     * @param  \TrackMage\Client\Swagger\Model\Status113e64b04cfc724b475734cd9eb5ea56SetCheckStatusRefsRequest $status The new Status resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\Status01d0f434438e480f7bbc7790c6311108GetCheckStatusRefsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkStatusCollectionWithHttpInfo($status = null)
    {
        $request = $this->checkStatusCollectionRequest($status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\Status01d0f434438e480f7bbc7790c6311108GetCheckStatusRefsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\Status01d0f434438e480f7bbc7790c6311108GetCheckStatusRefsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\Status01d0f434438e480f7bbc7790c6311108GetCheckStatusRefsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\Status01d0f434438e480f7bbc7790c6311108GetCheckStatusRefsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkStatusCollectionAsync
     *
     * Check if the status has references
     *
     * @param  \TrackMage\Client\Swagger\Model\Status113e64b04cfc724b475734cd9eb5ea56SetCheckStatusRefsRequest $status The new Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkStatusCollectionAsync($status = null)
    {
        return $this->checkStatusCollectionAsyncWithHttpInfo($status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkStatusCollectionAsyncWithHttpInfo
     *
     * Check if the status has references
     *
     * @param  \TrackMage\Client\Swagger\Model\Status113e64b04cfc724b475734cd9eb5ea56SetCheckStatusRefsRequest $status The new Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkStatusCollectionAsyncWithHttpInfo($status = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\Status01d0f434438e480f7bbc7790c6311108GetCheckStatusRefsResponse';
        $request = $this->checkStatusCollectionRequest($status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkStatusCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\Status113e64b04cfc724b475734cd9eb5ea56SetCheckStatusRefsRequest $status The new Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkStatusCollectionRequest($status = null)
    {

        $resourcePath = '/statuses/check-references';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($status)) {
            $_tempBody = $status;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteStatusItem
     *
     * Removes the Status resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteStatusItem($id)
    {
        $this->deleteStatusItemWithHttpInfo($id);
    }

    /**
     * Operation deleteStatusItemWithHttpInfo
     *
     * Removes the Status resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStatusItemWithHttpInfo($id)
    {
        $request = $this->deleteStatusItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStatusItemAsync
     *
     * Removes the Status resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStatusItemAsync($id)
    {
        return $this->deleteStatusItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteStatusItemAsyncWithHttpInfo
     *
     * Removes the Status resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStatusItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteStatusItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStatusItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteStatusItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteStatusItem'
            );
        }

        $resourcePath = '/statuses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatusCollection
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $entity entity (optional)
     * @param  string $code code (optional)
     * @param  string $title title (optional)
     * @param  string $orderEntity orderEntity (optional)
     * @param  string $orderCode orderCode (optional)
     * @param  string $orderTitle orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\StatusGet[]
     */
    public function getStatusCollection($entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->getStatusCollectionWithHttpInfo($entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getStatusCollectionWithHttpInfo
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\StatusGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusCollectionWithHttpInfo($entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->getStatusCollectionRequest($entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\StatusGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\StatusGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\StatusGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\StatusGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusCollectionAsync
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusCollectionAsync($entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        return $this->getStatusCollectionAsyncWithHttpInfo($entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusCollectionAsyncWithHttpInfo($entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\StatusGet[]';
        $request = $this->getStatusCollectionRequest($entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatusCollection'
     *
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusCollectionRequest($entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {

        $resourcePath = '/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($entity)) {
            $entity = ObjectSerializer::serializeCollection($entity, '', true);
        }
        if ($entity !== null) {
            $queryParams['entity'] = $entity;
        }
        // query params
        if (is_array($code)) {
            $code = ObjectSerializer::serializeCollection($code, '', true);
        }
        if ($code !== null) {
            $queryParams['code'] = $code;
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($orderEntity)) {
            $orderEntity = ObjectSerializer::serializeCollection($orderEntity, '', true);
        }
        if ($orderEntity !== null) {
            $queryParams['order[entity]'] = $orderEntity;
        }
        // query params
        if (is_array($orderCode)) {
            $orderCode = ObjectSerializer::serializeCollection($orderCode, '', true);
        }
        if ($orderCode !== null) {
            $queryParams['order[code]'] = $orderCode;
        }
        // query params
        if (is_array($orderTitle)) {
            $orderTitle = ObjectSerializer::serializeCollection($orderTitle, '', true);
        }
        if ($orderTitle !== null) {
            $queryParams['order[title]'] = $orderTitle;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatusItem
     *
     * Retrieves a Status resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\StatusGet
     */
    public function getStatusItem($id)
    {
        list($response) = $this->getStatusItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getStatusItemWithHttpInfo
     *
     * Retrieves a Status resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\StatusGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusItemWithHttpInfo($id)
    {
        $request = $this->getStatusItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\StatusGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\StatusGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\StatusGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\StatusGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStatusItemAsync
     *
     * Retrieves a Status resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusItemAsync($id)
    {
        return $this->getStatusItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusItemAsyncWithHttpInfo
     *
     * Retrieves a Status resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusItemAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\StatusGet';
        $request = $this->getStatusItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatusItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStatusItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStatusItem'
            );
        }

        $resourcePath = '/statuses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrateStatusCollection
     *
     * Migrate the old status references to the new one
     *
     * @param  \TrackMage\Client\Swagger\Model\StatusA5842c80e161de61194eb8382eef2bd2SetMigrateStatusRefsRequest $status The new Status resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\StatusFb253404adfa1c8f5e5289236bfea1fdGetMigrateStatusRefsResponse
     */
    public function migrateStatusCollection($status = null)
    {
        list($response) = $this->migrateStatusCollectionWithHttpInfo($status);
        return $response;
    }

    /**
     * Operation migrateStatusCollectionWithHttpInfo
     *
     * Migrate the old status references to the new one
     *
     * @param  \TrackMage\Client\Swagger\Model\StatusA5842c80e161de61194eb8382eef2bd2SetMigrateStatusRefsRequest $status The new Status resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\StatusFb253404adfa1c8f5e5289236bfea1fdGetMigrateStatusRefsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrateStatusCollectionWithHttpInfo($status = null)
    {
        $request = $this->migrateStatusCollectionRequest($status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\StatusFb253404adfa1c8f5e5289236bfea1fdGetMigrateStatusRefsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\StatusFb253404adfa1c8f5e5289236bfea1fdGetMigrateStatusRefsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\StatusFb253404adfa1c8f5e5289236bfea1fdGetMigrateStatusRefsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\StatusFb253404adfa1c8f5e5289236bfea1fdGetMigrateStatusRefsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation migrateStatusCollectionAsync
     *
     * Migrate the old status references to the new one
     *
     * @param  \TrackMage\Client\Swagger\Model\StatusA5842c80e161de61194eb8382eef2bd2SetMigrateStatusRefsRequest $status The new Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrateStatusCollectionAsync($status = null)
    {
        return $this->migrateStatusCollectionAsyncWithHttpInfo($status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation migrateStatusCollectionAsyncWithHttpInfo
     *
     * Migrate the old status references to the new one
     *
     * @param  \TrackMage\Client\Swagger\Model\StatusA5842c80e161de61194eb8382eef2bd2SetMigrateStatusRefsRequest $status The new Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrateStatusCollectionAsyncWithHttpInfo($status = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\StatusFb253404adfa1c8f5e5289236bfea1fdGetMigrateStatusRefsResponse';
        $request = $this->migrateStatusCollectionRequest($status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'migrateStatusCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\StatusA5842c80e161de61194eb8382eef2bd2SetMigrateStatusRefsRequest $status The new Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function migrateStatusCollectionRequest($status = null)
    {

        $resourcePath = '/statuses/migrate-references';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($status)) {
            $_tempBody = $status;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postStatusCollection
     *
     * Creates a Status resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\StatusPost $status The new Status resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\StatusGet
     */
    public function postStatusCollection($status = null)
    {
        list($response) = $this->postStatusCollectionWithHttpInfo($status);
        return $response;
    }

    /**
     * Operation postStatusCollectionWithHttpInfo
     *
     * Creates a Status resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\StatusPost $status The new Status resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\StatusGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function postStatusCollectionWithHttpInfo($status = null)
    {
        $request = $this->postStatusCollectionRequest($status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TrackMage\Client\Swagger\Model\StatusGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\StatusGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\StatusGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\StatusGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postStatusCollectionAsync
     *
     * Creates a Status resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\StatusPost $status The new Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStatusCollectionAsync($status = null)
    {
        return $this->postStatusCollectionAsyncWithHttpInfo($status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postStatusCollectionAsyncWithHttpInfo
     *
     * Creates a Status resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\StatusPost $status The new Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postStatusCollectionAsyncWithHttpInfo($status = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\StatusGet';
        $request = $this->postStatusCollectionRequest($status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postStatusCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\StatusPost $status The new Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postStatusCollectionRequest($status = null)
    {

        $resourcePath = '/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($status)) {
            $_tempBody = $status;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putStatusItem
     *
     * Replaces the Status resource.
     *
     * @param  string $id id (required)
     * @param  \TrackMage\Client\Swagger\Model\StatusPut $status The updated Status resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\StatusGet
     */
    public function putStatusItem($id, $status = null)
    {
        list($response) = $this->putStatusItemWithHttpInfo($id, $status);
        return $response;
    }

    /**
     * Operation putStatusItemWithHttpInfo
     *
     * Replaces the Status resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\StatusPut $status The updated Status resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\StatusGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function putStatusItemWithHttpInfo($id, $status = null)
    {
        $request = $this->putStatusItemRequest($id, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\StatusGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\StatusGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\StatusGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\StatusGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putStatusItemAsync
     *
     * Replaces the Status resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\StatusPut $status The updated Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStatusItemAsync($id, $status = null)
    {
        return $this->putStatusItemAsyncWithHttpInfo($id, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putStatusItemAsyncWithHttpInfo
     *
     * Replaces the Status resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\StatusPut $status The updated Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putStatusItemAsyncWithHttpInfo($id, $status = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\StatusGet';
        $request = $this->putStatusItemRequest($id, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putStatusItem'
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\StatusPut $status The updated Status resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putStatusItemRequest($id, $status = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putStatusItem'
            );
        }

        $resourcePath = '/statuses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($status)) {
            $_tempBody = $status;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
