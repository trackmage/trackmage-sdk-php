<?php
/**
 * WorkspaceApi
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trackmage Public API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: dev
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TrackMage\Client\Swagger\ApiException;
use TrackMage\Client\Swagger\Configuration;
use TrackMage\Client\Swagger\HeaderSelector;
use TrackMage\Client\Swagger\ObjectSerializer;

/**
 * WorkspaceApi Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkspaceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresource
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id id (required)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGet[]
     */
    public function apiTeamsWorkspacesGetSubresource($id, $orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesGetSubresourceWithHttpInfo($id, $orderCreatedAt, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesGetSubresourceWithHttpInfo($id, $orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesGetSubresourceRequest($id, $orderCreatedAt, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresourceAsync
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesGetSubresourceAsync($id, $orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesGetSubresourceAsyncWithHttpInfo($id, $orderCreatedAt, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesGetSubresourceAsyncWithHttpInfo($id, $orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGet[]';
        $request = $this->apiTeamsWorkspacesGetSubresourceRequest($id, $orderCreatedAt, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesGetSubresourceRequest($id, $orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresource
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderOrderNumber orderOrderNumber (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderPhoneNumber orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode orderOrderStatusCode (optional)
     * @param  string $orderSubtotal orderSubtotal (optional)
     * @param  string $orderTotal orderTotal (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState orderBillingAddressState (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $orderNumber orderNumber (optional)
     * @param  string $email email (optional)
     * @param  string $phoneNumber phoneNumber (optional)
     * @param  string $orderStatusCode orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 orderStatusCode2 (optional)
     * @param  string $orderType orderType (optional)
     * @param  string[] $orderType2 orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity shippingAddressCity (optional)
     * @param  string $shippingAddressCompany shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode shippingAddressPostcode (optional)
     * @param  string $shippingAddressState shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity billingAddressCity (optional)
     * @param  string $billingAddressCompany billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName billingAddressFirstName (optional)
     * @param  string $billingAddressLastName billingAddressLastName (optional)
     * @param  string $billingAddressPostcode billingAddressPostcode (optional)
     * @param  string $billingAddressState billingAddressState (optional)
     * @param  string $subtotal subtotal (optional)
     * @param  string[] $subtotal2 subtotal2 (optional)
     * @param  string $total total (optional)
     * @param  string[] $total2 total2 (optional)
     * @param  string $subtotalBetween subtotalBetween (optional)
     * @param  string $subtotalGt subtotalGt (optional)
     * @param  string $subtotalGte subtotalGte (optional)
     * @param  string $subtotalLt subtotalLt (optional)
     * @param  string $subtotalLte subtotalLte (optional)
     * @param  string $totalBetween totalBetween (optional)
     * @param  string $totalGt totalGt (optional)
     * @param  string $totalGte totalGte (optional)
     * @param  string $totalLt totalLt (optional)
     * @param  string $totalLte totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGet[]
     */
    public function apiTeamsWorkspacesOrdersGetSubresource($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo($id, $workspaces, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceAsync
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceAsync($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGet[]';
        $request = $this->apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesOrdersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesOrdersGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesOrdersGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($orderId)) {
            $orderId = ObjectSerializer::serializeCollection($orderId, '', true);
        }
        if ($orderId !== null) {
            $queryParams['order[id]'] = $orderId;
        }
        // query params
        if (is_array($orderOrderNumber)) {
            $orderOrderNumber = ObjectSerializer::serializeCollection($orderOrderNumber, '', true);
        }
        if ($orderOrderNumber !== null) {
            $queryParams['order[orderNumber]'] = $orderOrderNumber;
        }
        // query params
        if (is_array($orderEmail)) {
            $orderEmail = ObjectSerializer::serializeCollection($orderEmail, '', true);
        }
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = $orderEmail;
        }
        // query params
        if (is_array($orderPhoneNumber)) {
            $orderPhoneNumber = ObjectSerializer::serializeCollection($orderPhoneNumber, '', true);
        }
        if ($orderPhoneNumber !== null) {
            $queryParams['order[phoneNumber]'] = $orderPhoneNumber;
        }
        // query params
        if (is_array($orderOrderStatusCode)) {
            $orderOrderStatusCode = ObjectSerializer::serializeCollection($orderOrderStatusCode, '', true);
        }
        if ($orderOrderStatusCode !== null) {
            $queryParams['order[orderStatus.code]'] = $orderOrderStatusCode;
        }
        // query params
        if (is_array($orderSubtotal)) {
            $orderSubtotal = ObjectSerializer::serializeCollection($orderSubtotal, '', true);
        }
        if ($orderSubtotal !== null) {
            $queryParams['order[subtotal]'] = $orderSubtotal;
        }
        // query params
        if (is_array($orderTotal)) {
            $orderTotal = ObjectSerializer::serializeCollection($orderTotal, '', true);
        }
        if ($orderTotal !== null) {
            $queryParams['order[total]'] = $orderTotal;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($orderUpdatedAt)) {
            $orderUpdatedAt = ObjectSerializer::serializeCollection($orderUpdatedAt, '', true);
        }
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = $orderUpdatedAt;
        }
        // query params
        if (is_array($orderShippingAddressAddressLine1)) {
            $orderShippingAddressAddressLine1 = ObjectSerializer::serializeCollection($orderShippingAddressAddressLine1, '', true);
        }
        if ($orderShippingAddressAddressLine1 !== null) {
            $queryParams['order[shippingAddress.addressLine1]'] = $orderShippingAddressAddressLine1;
        }
        // query params
        if (is_array($orderShippingAddressAddressLine2)) {
            $orderShippingAddressAddressLine2 = ObjectSerializer::serializeCollection($orderShippingAddressAddressLine2, '', true);
        }
        if ($orderShippingAddressAddressLine2 !== null) {
            $queryParams['order[shippingAddress.addressLine2]'] = $orderShippingAddressAddressLine2;
        }
        // query params
        if (is_array($orderShippingAddressCity)) {
            $orderShippingAddressCity = ObjectSerializer::serializeCollection($orderShippingAddressCity, '', true);
        }
        if ($orderShippingAddressCity !== null) {
            $queryParams['order[shippingAddress.city]'] = $orderShippingAddressCity;
        }
        // query params
        if (is_array($orderShippingAddressCompany)) {
            $orderShippingAddressCompany = ObjectSerializer::serializeCollection($orderShippingAddressCompany, '', true);
        }
        if ($orderShippingAddressCompany !== null) {
            $queryParams['order[shippingAddress.company]'] = $orderShippingAddressCompany;
        }
        // query params
        if (is_array($orderShippingAddressCountryIso2)) {
            $orderShippingAddressCountryIso2 = ObjectSerializer::serializeCollection($orderShippingAddressCountryIso2, '', true);
        }
        if ($orderShippingAddressCountryIso2 !== null) {
            $queryParams['order[shippingAddress.countryIso2]'] = $orderShippingAddressCountryIso2;
        }
        // query params
        if (is_array($orderShippingAddressFirstName)) {
            $orderShippingAddressFirstName = ObjectSerializer::serializeCollection($orderShippingAddressFirstName, '', true);
        }
        if ($orderShippingAddressFirstName !== null) {
            $queryParams['order[shippingAddress.firstName]'] = $orderShippingAddressFirstName;
        }
        // query params
        if (is_array($orderShippingAddressLastName)) {
            $orderShippingAddressLastName = ObjectSerializer::serializeCollection($orderShippingAddressLastName, '', true);
        }
        if ($orderShippingAddressLastName !== null) {
            $queryParams['order[shippingAddress.lastName]'] = $orderShippingAddressLastName;
        }
        // query params
        if (is_array($orderShippingAddressPostcode)) {
            $orderShippingAddressPostcode = ObjectSerializer::serializeCollection($orderShippingAddressPostcode, '', true);
        }
        if ($orderShippingAddressPostcode !== null) {
            $queryParams['order[shippingAddress.postcode]'] = $orderShippingAddressPostcode;
        }
        // query params
        if (is_array($orderShippingAddressState)) {
            $orderShippingAddressState = ObjectSerializer::serializeCollection($orderShippingAddressState, '', true);
        }
        if ($orderShippingAddressState !== null) {
            $queryParams['order[shippingAddress.state]'] = $orderShippingAddressState;
        }
        // query params
        if (is_array($orderBillingAddressAddressLine1)) {
            $orderBillingAddressAddressLine1 = ObjectSerializer::serializeCollection($orderBillingAddressAddressLine1, '', true);
        }
        if ($orderBillingAddressAddressLine1 !== null) {
            $queryParams['order[billingAddress.addressLine1]'] = $orderBillingAddressAddressLine1;
        }
        // query params
        if (is_array($orderBillingAddressAddressLine2)) {
            $orderBillingAddressAddressLine2 = ObjectSerializer::serializeCollection($orderBillingAddressAddressLine2, '', true);
        }
        if ($orderBillingAddressAddressLine2 !== null) {
            $queryParams['order[billingAddress.addressLine2]'] = $orderBillingAddressAddressLine2;
        }
        // query params
        if (is_array($orderBillingAddressCity)) {
            $orderBillingAddressCity = ObjectSerializer::serializeCollection($orderBillingAddressCity, '', true);
        }
        if ($orderBillingAddressCity !== null) {
            $queryParams['order[billingAddress.city]'] = $orderBillingAddressCity;
        }
        // query params
        if (is_array($orderBillingAddressCompany)) {
            $orderBillingAddressCompany = ObjectSerializer::serializeCollection($orderBillingAddressCompany, '', true);
        }
        if ($orderBillingAddressCompany !== null) {
            $queryParams['order[billingAddress.company]'] = $orderBillingAddressCompany;
        }
        // query params
        if (is_array($orderBillingAddressCountryIso2)) {
            $orderBillingAddressCountryIso2 = ObjectSerializer::serializeCollection($orderBillingAddressCountryIso2, '', true);
        }
        if ($orderBillingAddressCountryIso2 !== null) {
            $queryParams['order[billingAddress.countryIso2]'] = $orderBillingAddressCountryIso2;
        }
        // query params
        if (is_array($orderBillingAddressFirstName)) {
            $orderBillingAddressFirstName = ObjectSerializer::serializeCollection($orderBillingAddressFirstName, '', true);
        }
        if ($orderBillingAddressFirstName !== null) {
            $queryParams['order[billingAddress.firstName]'] = $orderBillingAddressFirstName;
        }
        // query params
        if (is_array($orderBillingAddressLastName)) {
            $orderBillingAddressLastName = ObjectSerializer::serializeCollection($orderBillingAddressLastName, '', true);
        }
        if ($orderBillingAddressLastName !== null) {
            $queryParams['order[billingAddress.lastName]'] = $orderBillingAddressLastName;
        }
        // query params
        if (is_array($orderBillingAddressPostcode)) {
            $orderBillingAddressPostcode = ObjectSerializer::serializeCollection($orderBillingAddressPostcode, '', true);
        }
        if ($orderBillingAddressPostcode !== null) {
            $queryParams['order[billingAddress.postcode]'] = $orderBillingAddressPostcode;
        }
        // query params
        if (is_array($orderBillingAddressState)) {
            $orderBillingAddressState = ObjectSerializer::serializeCollection($orderBillingAddressState, '', true);
        }
        if ($orderBillingAddressState !== null) {
            $queryParams['order[billingAddress.state]'] = $orderBillingAddressState;
        }
        // query params
        if (is_array($createdAtBefore)) {
            $createdAtBefore = ObjectSerializer::serializeCollection($createdAtBefore, '', true);
        }
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = $createdAtBefore;
        }
        // query params
        if (is_array($createdAtStrictlyBefore)) {
            $createdAtStrictlyBefore = ObjectSerializer::serializeCollection($createdAtStrictlyBefore, '', true);
        }
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = $createdAtStrictlyBefore;
        }
        // query params
        if (is_array($createdAtAfter)) {
            $createdAtAfter = ObjectSerializer::serializeCollection($createdAtAfter, '', true);
        }
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = $createdAtAfter;
        }
        // query params
        if (is_array($createdAtStrictlyAfter)) {
            $createdAtStrictlyAfter = ObjectSerializer::serializeCollection($createdAtStrictlyAfter, '', true);
        }
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = $createdAtStrictlyAfter;
        }
        // query params
        if (is_array($updatedAtBefore)) {
            $updatedAtBefore = ObjectSerializer::serializeCollection($updatedAtBefore, '', true);
        }
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = $updatedAtBefore;
        }
        // query params
        if (is_array($updatedAtStrictlyBefore)) {
            $updatedAtStrictlyBefore = ObjectSerializer::serializeCollection($updatedAtStrictlyBefore, '', true);
        }
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = $updatedAtStrictlyBefore;
        }
        // query params
        if (is_array($updatedAtAfter)) {
            $updatedAtAfter = ObjectSerializer::serializeCollection($updatedAtAfter, '', true);
        }
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = $updatedAtAfter;
        }
        // query params
        if (is_array($updatedAtStrictlyAfter)) {
            $updatedAtStrictlyAfter = ObjectSerializer::serializeCollection($updatedAtStrictlyAfter, '', true);
        }
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = $updatedAtStrictlyAfter;
        }
        // query params
        if ($id2 !== null) {
            if('form' === 'form' && is_array($id2)) {
                foreach($id2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id2;
            }
        }
        // query params
        if (is_array($orderNumber)) {
            $orderNumber = ObjectSerializer::serializeCollection($orderNumber, '', true);
        }
        if ($orderNumber !== null) {
            $queryParams['orderNumber'] = $orderNumber;
        }
        // query params
        if (is_array($email)) {
            $email = ObjectSerializer::serializeCollection($email, '', true);
        }
        if ($email !== null) {
            $queryParams['email'] = $email;
        }
        // query params
        if (is_array($phoneNumber)) {
            $phoneNumber = ObjectSerializer::serializeCollection($phoneNumber, '', true);
        }
        if ($phoneNumber !== null) {
            $queryParams['phoneNumber'] = $phoneNumber;
        }
        // query params
        if (is_array($orderStatusCode)) {
            $orderStatusCode = ObjectSerializer::serializeCollection($orderStatusCode, '', true);
        }
        if ($orderStatusCode !== null) {
            $queryParams['orderStatus.code'] = $orderStatusCode;
        }
        // query params
        if ($orderStatusCode2 !== null) {
            if('form' === 'form' && is_array($orderStatusCode2)) {
                foreach($orderStatusCode2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderStatus.code[]'] = $orderStatusCode2;
            }
        }
        // query params
        if (is_array($orderType)) {
            $orderType = ObjectSerializer::serializeCollection($orderType, '', true);
        }
        if ($orderType !== null) {
            $queryParams['orderType'] = $orderType;
        }
        // query params
        if ($orderType2 !== null) {
            if('form' === 'form' && is_array($orderType2)) {
                foreach($orderType2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderType[]'] = $orderType2;
            }
        }
        // query params
        if (is_array($shippingAddressAddressLine1)) {
            $shippingAddressAddressLine1 = ObjectSerializer::serializeCollection($shippingAddressAddressLine1, '', true);
        }
        if ($shippingAddressAddressLine1 !== null) {
            $queryParams['shippingAddress.addressLine1'] = $shippingAddressAddressLine1;
        }
        // query params
        if (is_array($shippingAddressAddressLine2)) {
            $shippingAddressAddressLine2 = ObjectSerializer::serializeCollection($shippingAddressAddressLine2, '', true);
        }
        if ($shippingAddressAddressLine2 !== null) {
            $queryParams['shippingAddress.addressLine2'] = $shippingAddressAddressLine2;
        }
        // query params
        if (is_array($shippingAddressCity)) {
            $shippingAddressCity = ObjectSerializer::serializeCollection($shippingAddressCity, '', true);
        }
        if ($shippingAddressCity !== null) {
            $queryParams['shippingAddress.city'] = $shippingAddressCity;
        }
        // query params
        if (is_array($shippingAddressCompany)) {
            $shippingAddressCompany = ObjectSerializer::serializeCollection($shippingAddressCompany, '', true);
        }
        if ($shippingAddressCompany !== null) {
            $queryParams['shippingAddress.company'] = $shippingAddressCompany;
        }
        // query params
        if (is_array($shippingAddressCountryIso2)) {
            $shippingAddressCountryIso2 = ObjectSerializer::serializeCollection($shippingAddressCountryIso2, '', true);
        }
        if ($shippingAddressCountryIso2 !== null) {
            $queryParams['shippingAddress.countryIso2'] = $shippingAddressCountryIso2;
        }
        // query params
        if ($shippingAddressCountryIso3 !== null) {
            if('form' === 'form' && is_array($shippingAddressCountryIso3)) {
                foreach($shippingAddressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['shippingAddress.countryIso2[]'] = $shippingAddressCountryIso3;
            }
        }
        // query params
        if (is_array($shippingAddressFirstName)) {
            $shippingAddressFirstName = ObjectSerializer::serializeCollection($shippingAddressFirstName, '', true);
        }
        if ($shippingAddressFirstName !== null) {
            $queryParams['shippingAddress.firstName'] = $shippingAddressFirstName;
        }
        // query params
        if (is_array($shippingAddressLastName)) {
            $shippingAddressLastName = ObjectSerializer::serializeCollection($shippingAddressLastName, '', true);
        }
        if ($shippingAddressLastName !== null) {
            $queryParams['shippingAddress.lastName'] = $shippingAddressLastName;
        }
        // query params
        if (is_array($shippingAddressPostcode)) {
            $shippingAddressPostcode = ObjectSerializer::serializeCollection($shippingAddressPostcode, '', true);
        }
        if ($shippingAddressPostcode !== null) {
            $queryParams['shippingAddress.postcode'] = $shippingAddressPostcode;
        }
        // query params
        if (is_array($shippingAddressState)) {
            $shippingAddressState = ObjectSerializer::serializeCollection($shippingAddressState, '', true);
        }
        if ($shippingAddressState !== null) {
            $queryParams['shippingAddress.state'] = $shippingAddressState;
        }
        // query params
        if (is_array($billingAddressAddressLine1)) {
            $billingAddressAddressLine1 = ObjectSerializer::serializeCollection($billingAddressAddressLine1, '', true);
        }
        if ($billingAddressAddressLine1 !== null) {
            $queryParams['billingAddress.addressLine1'] = $billingAddressAddressLine1;
        }
        // query params
        if (is_array($billingAddressAddressLine2)) {
            $billingAddressAddressLine2 = ObjectSerializer::serializeCollection($billingAddressAddressLine2, '', true);
        }
        if ($billingAddressAddressLine2 !== null) {
            $queryParams['billingAddress.addressLine2'] = $billingAddressAddressLine2;
        }
        // query params
        if (is_array($billingAddressCity)) {
            $billingAddressCity = ObjectSerializer::serializeCollection($billingAddressCity, '', true);
        }
        if ($billingAddressCity !== null) {
            $queryParams['billingAddress.city'] = $billingAddressCity;
        }
        // query params
        if (is_array($billingAddressCompany)) {
            $billingAddressCompany = ObjectSerializer::serializeCollection($billingAddressCompany, '', true);
        }
        if ($billingAddressCompany !== null) {
            $queryParams['billingAddress.company'] = $billingAddressCompany;
        }
        // query params
        if (is_array($billingAddressCountryIso2)) {
            $billingAddressCountryIso2 = ObjectSerializer::serializeCollection($billingAddressCountryIso2, '', true);
        }
        if ($billingAddressCountryIso2 !== null) {
            $queryParams['billingAddress.countryIso2'] = $billingAddressCountryIso2;
        }
        // query params
        if ($billingAddressCountryIso3 !== null) {
            if('form' === 'form' && is_array($billingAddressCountryIso3)) {
                foreach($billingAddressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['billingAddress.countryIso2[]'] = $billingAddressCountryIso3;
            }
        }
        // query params
        if (is_array($billingAddressFirstName)) {
            $billingAddressFirstName = ObjectSerializer::serializeCollection($billingAddressFirstName, '', true);
        }
        if ($billingAddressFirstName !== null) {
            $queryParams['billingAddress.firstName'] = $billingAddressFirstName;
        }
        // query params
        if (is_array($billingAddressLastName)) {
            $billingAddressLastName = ObjectSerializer::serializeCollection($billingAddressLastName, '', true);
        }
        if ($billingAddressLastName !== null) {
            $queryParams['billingAddress.lastName'] = $billingAddressLastName;
        }
        // query params
        if (is_array($billingAddressPostcode)) {
            $billingAddressPostcode = ObjectSerializer::serializeCollection($billingAddressPostcode, '', true);
        }
        if ($billingAddressPostcode !== null) {
            $queryParams['billingAddress.postcode'] = $billingAddressPostcode;
        }
        // query params
        if (is_array($billingAddressState)) {
            $billingAddressState = ObjectSerializer::serializeCollection($billingAddressState, '', true);
        }
        if ($billingAddressState !== null) {
            $queryParams['billingAddress.state'] = $billingAddressState;
        }
        // query params
        if (is_array($subtotal)) {
            $subtotal = ObjectSerializer::serializeCollection($subtotal, '', true);
        }
        if ($subtotal !== null) {
            $queryParams['subtotal'] = $subtotal;
        }
        // query params
        if ($subtotal2 !== null) {
            if('form' === 'form' && is_array($subtotal2)) {
                foreach($subtotal2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subtotal[]'] = $subtotal2;
            }
        }
        // query params
        if (is_array($total)) {
            $total = ObjectSerializer::serializeCollection($total, '', true);
        }
        if ($total !== null) {
            $queryParams['total'] = $total;
        }
        // query params
        if ($total2 !== null) {
            if('form' === 'form' && is_array($total2)) {
                foreach($total2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['total[]'] = $total2;
            }
        }
        // query params
        if (is_array($subtotalBetween)) {
            $subtotalBetween = ObjectSerializer::serializeCollection($subtotalBetween, '', true);
        }
        if ($subtotalBetween !== null) {
            $queryParams['subtotal[between]'] = $subtotalBetween;
        }
        // query params
        if (is_array($subtotalGt)) {
            $subtotalGt = ObjectSerializer::serializeCollection($subtotalGt, '', true);
        }
        if ($subtotalGt !== null) {
            $queryParams['subtotal[gt]'] = $subtotalGt;
        }
        // query params
        if (is_array($subtotalGte)) {
            $subtotalGte = ObjectSerializer::serializeCollection($subtotalGte, '', true);
        }
        if ($subtotalGte !== null) {
            $queryParams['subtotal[gte]'] = $subtotalGte;
        }
        // query params
        if (is_array($subtotalLt)) {
            $subtotalLt = ObjectSerializer::serializeCollection($subtotalLt, '', true);
        }
        if ($subtotalLt !== null) {
            $queryParams['subtotal[lt]'] = $subtotalLt;
        }
        // query params
        if (is_array($subtotalLte)) {
            $subtotalLte = ObjectSerializer::serializeCollection($subtotalLte, '', true);
        }
        if ($subtotalLte !== null) {
            $queryParams['subtotal[lte]'] = $subtotalLte;
        }
        // query params
        if (is_array($totalBetween)) {
            $totalBetween = ObjectSerializer::serializeCollection($totalBetween, '', true);
        }
        if ($totalBetween !== null) {
            $queryParams['total[between]'] = $totalBetween;
        }
        // query params
        if (is_array($totalGt)) {
            $totalGt = ObjectSerializer::serializeCollection($totalGt, '', true);
        }
        if ($totalGt !== null) {
            $queryParams['total[gt]'] = $totalGt;
        }
        // query params
        if (is_array($totalGte)) {
            $totalGte = ObjectSerializer::serializeCollection($totalGte, '', true);
        }
        if ($totalGte !== null) {
            $queryParams['total[gte]'] = $totalGte;
        }
        // query params
        if (is_array($totalLt)) {
            $totalLt = ObjectSerializer::serializeCollection($totalLt, '', true);
        }
        if ($totalLt !== null) {
            $queryParams['total[lt]'] = $totalLt;
        }
        // query params
        if (is_array($totalLte)) {
            $totalLte = ObjectSerializer::serializeCollection($totalLte, '', true);
        }
        if ($totalLte !== null) {
            $queryParams['total[lte]'] = $totalLte;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresource
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderTrackingStatus orderTrackingStatus (optional)
     * @param  string $orderShipmentStatusCode orderShipmentStatusCode (optional)
     * @param  string $orderOriginCarrier orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippedAt orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry orderOriginCountry (optional)
     * @param  string $orderDestinationCountry orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderPhoneNumber orderPhoneNumber (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $orderAddressAddressLine1 orderAddressAddressLine1 (optional)
     * @param  string $orderAddressAddressLine2 orderAddressAddressLine2 (optional)
     * @param  string $orderAddressCity orderAddressCity (optional)
     * @param  string $orderAddressCompany orderAddressCompany (optional)
     * @param  string $orderAddressCountryIso2 orderAddressCountryIso2 (optional)
     * @param  string $orderAddressFirstName orderAddressFirstName (optional)
     * @param  string $orderAddressLastName orderAddressLastName (optional)
     * @param  string $orderAddressPostcode orderAddressPostcode (optional)
     * @param  string $orderAddressState orderAddressState (optional)
     * @param  string $orderNumbers orderNumbers (optional)
     * @param  string[] $orderNumbers2 orderNumbers2 (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter expectedDeliveryDateStrictlyAfter (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $trackingStatus trackingStatus (optional)
     * @param  string[] $trackingStatus2 trackingStatus2 (optional)
     * @param  string $shipmentStatusCode shipmentStatusCode (optional)
     * @param  string[] $shipmentStatusCode2 shipmentStatusCode2 (optional)
     * @param  string $originCarrier originCarrier (optional)
     * @param  string[] $originCarrier2 originCarrier2 (optional)
     * @param  string $destinationCarrier destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 destinationCarrier2 (optional)
     * @param  string $originCountry originCountry (optional)
     * @param  string $originCountryIso2 originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 originCountryIso3 (optional)
     * @param  string $destinationCountry destinationCountry (optional)
     * @param  string $destinationCountryIso2 destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 destinationCountryIso3 (optional)
     * @param  string $email email (optional)
     * @param  string $phoneNumber phoneNumber (optional)
     * @param  string $addressAddressLine1 addressAddressLine1 (optional)
     * @param  string $addressAddressLine2 addressAddressLine2 (optional)
     * @param  string $addressCity addressCity (optional)
     * @param  string $addressCompany addressCompany (optional)
     * @param  string $addressCountryIso2 addressCountryIso2 (optional)
     * @param  string[] $addressCountryIso3 addressCountryIso3 (optional)
     * @param  string $addressFirstName addressFirstName (optional)
     * @param  string $addressLastName addressLastName (optional)
     * @param  string $addressPostcode addressPostcode (optional)
     * @param  string $addressState addressState (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentGet[]
     */
    public function apiTeamsWorkspacesShipmentsGetSubresource($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderTrackingStatus = null, $orderShipmentStatusCode = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderPhoneNumber = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderAddressAddressLine1 = null, $orderAddressAddressLine2 = null, $orderAddressCity = null, $orderAddressCompany = null, $orderAddressCountryIso2 = null, $orderAddressFirstName = null, $orderAddressLastName = null, $orderAddressPostcode = null, $orderAddressState = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $trackingStatus = null, $trackingStatus2 = null, $shipmentStatusCode = null, $shipmentStatusCode2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $phoneNumber = null, $addressAddressLine1 = null, $addressAddressLine2 = null, $addressCity = null, $addressCompany = null, $addressCountryIso2 = null, $addressCountryIso3 = null, $addressFirstName = null, $addressLastName = null, $addressPostcode = null, $addressState = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $workspaces, $orderId, $orderTrackingNumber, $orderTrackingStatus, $orderShipmentStatusCode, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderPhoneNumber, $orderDaysInTransit, $orderReviewTotalScore, $orderAddressAddressLine1, $orderAddressAddressLine2, $orderAddressCity, $orderAddressCompany, $orderAddressCountryIso2, $orderAddressFirstName, $orderAddressLastName, $orderAddressPostcode, $orderAddressState, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $trackingStatus, $trackingStatus2, $shipmentStatusCode, $shipmentStatusCode2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $phoneNumber, $addressAddressLine1, $addressAddressLine2, $addressCity, $addressCompany, $addressCountryIso2, $addressCountryIso3, $addressFirstName, $addressLastName, $addressPostcode, $addressState, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderTrackingStatus (optional)
     * @param  string $orderShipmentStatusCode (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderAddressAddressLine1 (optional)
     * @param  string $orderAddressAddressLine2 (optional)
     * @param  string $orderAddressCity (optional)
     * @param  string $orderAddressCompany (optional)
     * @param  string $orderAddressCountryIso2 (optional)
     * @param  string $orderAddressFirstName (optional)
     * @param  string $orderAddressLastName (optional)
     * @param  string $orderAddressPostcode (optional)
     * @param  string $orderAddressState (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $trackingStatus (optional)
     * @param  string[] $trackingStatus2 (optional)
     * @param  string $shipmentStatusCode (optional)
     * @param  string[] $shipmentStatusCode2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $addressAddressLine1 (optional)
     * @param  string $addressAddressLine2 (optional)
     * @param  string $addressCity (optional)
     * @param  string $addressCompany (optional)
     * @param  string $addressCountryIso2 (optional)
     * @param  string[] $addressCountryIso3 (optional)
     * @param  string $addressFirstName (optional)
     * @param  string $addressLastName (optional)
     * @param  string $addressPostcode (optional)
     * @param  string $addressState (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderTrackingStatus = null, $orderShipmentStatusCode = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderPhoneNumber = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderAddressAddressLine1 = null, $orderAddressAddressLine2 = null, $orderAddressCity = null, $orderAddressCompany = null, $orderAddressCountryIso2 = null, $orderAddressFirstName = null, $orderAddressLastName = null, $orderAddressPostcode = null, $orderAddressState = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $trackingStatus = null, $trackingStatus2 = null, $shipmentStatusCode = null, $shipmentStatusCode2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $phoneNumber = null, $addressAddressLine1 = null, $addressAddressLine2 = null, $addressCity = null, $addressCompany = null, $addressCountryIso2 = null, $addressCountryIso3 = null, $addressFirstName = null, $addressLastName = null, $addressPostcode = null, $addressState = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesShipmentsGetSubresourceRequest($id, $workspaces, $orderId, $orderTrackingNumber, $orderTrackingStatus, $orderShipmentStatusCode, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderPhoneNumber, $orderDaysInTransit, $orderReviewTotalScore, $orderAddressAddressLine1, $orderAddressAddressLine2, $orderAddressCity, $orderAddressCompany, $orderAddressCountryIso2, $orderAddressFirstName, $orderAddressLastName, $orderAddressPostcode, $orderAddressState, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $trackingStatus, $trackingStatus2, $shipmentStatusCode, $shipmentStatusCode2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $phoneNumber, $addressAddressLine1, $addressAddressLine2, $addressCity, $addressCompany, $addressCountryIso2, $addressCountryIso3, $addressFirstName, $addressLastName, $addressPostcode, $addressState, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresourceAsync
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderTrackingStatus (optional)
     * @param  string $orderShipmentStatusCode (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderAddressAddressLine1 (optional)
     * @param  string $orderAddressAddressLine2 (optional)
     * @param  string $orderAddressCity (optional)
     * @param  string $orderAddressCompany (optional)
     * @param  string $orderAddressCountryIso2 (optional)
     * @param  string $orderAddressFirstName (optional)
     * @param  string $orderAddressLastName (optional)
     * @param  string $orderAddressPostcode (optional)
     * @param  string $orderAddressState (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $trackingStatus (optional)
     * @param  string[] $trackingStatus2 (optional)
     * @param  string $shipmentStatusCode (optional)
     * @param  string[] $shipmentStatusCode2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $addressAddressLine1 (optional)
     * @param  string $addressAddressLine2 (optional)
     * @param  string $addressCity (optional)
     * @param  string $addressCompany (optional)
     * @param  string $addressCountryIso2 (optional)
     * @param  string[] $addressCountryIso3 (optional)
     * @param  string $addressFirstName (optional)
     * @param  string $addressLastName (optional)
     * @param  string $addressPostcode (optional)
     * @param  string $addressState (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesShipmentsGetSubresourceAsync($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderTrackingStatus = null, $orderShipmentStatusCode = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderPhoneNumber = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderAddressAddressLine1 = null, $orderAddressAddressLine2 = null, $orderAddressCity = null, $orderAddressCompany = null, $orderAddressCountryIso2 = null, $orderAddressFirstName = null, $orderAddressLastName = null, $orderAddressPostcode = null, $orderAddressState = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $trackingStatus = null, $trackingStatus2 = null, $shipmentStatusCode = null, $shipmentStatusCode2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $phoneNumber = null, $addressAddressLine1 = null, $addressAddressLine2 = null, $addressCity = null, $addressCompany = null, $addressCountryIso2 = null, $addressCountryIso3 = null, $addressFirstName = null, $addressLastName = null, $addressPostcode = null, $addressState = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId, $orderTrackingNumber, $orderTrackingStatus, $orderShipmentStatusCode, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderPhoneNumber, $orderDaysInTransit, $orderReviewTotalScore, $orderAddressAddressLine1, $orderAddressAddressLine2, $orderAddressCity, $orderAddressCompany, $orderAddressCountryIso2, $orderAddressFirstName, $orderAddressLastName, $orderAddressPostcode, $orderAddressState, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $trackingStatus, $trackingStatus2, $shipmentStatusCode, $shipmentStatusCode2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $phoneNumber, $addressAddressLine1, $addressAddressLine2, $addressCity, $addressCompany, $addressCountryIso2, $addressCountryIso3, $addressFirstName, $addressLastName, $addressPostcode, $addressState, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderTrackingStatus (optional)
     * @param  string $orderShipmentStatusCode (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderAddressAddressLine1 (optional)
     * @param  string $orderAddressAddressLine2 (optional)
     * @param  string $orderAddressCity (optional)
     * @param  string $orderAddressCompany (optional)
     * @param  string $orderAddressCountryIso2 (optional)
     * @param  string $orderAddressFirstName (optional)
     * @param  string $orderAddressLastName (optional)
     * @param  string $orderAddressPostcode (optional)
     * @param  string $orderAddressState (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $trackingStatus (optional)
     * @param  string[] $trackingStatus2 (optional)
     * @param  string $shipmentStatusCode (optional)
     * @param  string[] $shipmentStatusCode2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $addressAddressLine1 (optional)
     * @param  string $addressAddressLine2 (optional)
     * @param  string $addressCity (optional)
     * @param  string $addressCompany (optional)
     * @param  string $addressCountryIso2 (optional)
     * @param  string[] $addressCountryIso3 (optional)
     * @param  string $addressFirstName (optional)
     * @param  string $addressLastName (optional)
     * @param  string $addressPostcode (optional)
     * @param  string $addressState (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderTrackingStatus = null, $orderShipmentStatusCode = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderPhoneNumber = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderAddressAddressLine1 = null, $orderAddressAddressLine2 = null, $orderAddressCity = null, $orderAddressCompany = null, $orderAddressCountryIso2 = null, $orderAddressFirstName = null, $orderAddressLastName = null, $orderAddressPostcode = null, $orderAddressState = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $trackingStatus = null, $trackingStatus2 = null, $shipmentStatusCode = null, $shipmentStatusCode2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $phoneNumber = null, $addressAddressLine1 = null, $addressAddressLine2 = null, $addressCity = null, $addressCompany = null, $addressCountryIso2 = null, $addressCountryIso3 = null, $addressFirstName = null, $addressLastName = null, $addressPostcode = null, $addressState = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGet[]';
        $request = $this->apiTeamsWorkspacesShipmentsGetSubresourceRequest($id, $workspaces, $orderId, $orderTrackingNumber, $orderTrackingStatus, $orderShipmentStatusCode, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderPhoneNumber, $orderDaysInTransit, $orderReviewTotalScore, $orderAddressAddressLine1, $orderAddressAddressLine2, $orderAddressCity, $orderAddressCompany, $orderAddressCountryIso2, $orderAddressFirstName, $orderAddressLastName, $orderAddressPostcode, $orderAddressState, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $trackingStatus, $trackingStatus2, $shipmentStatusCode, $shipmentStatusCode2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $phoneNumber, $addressAddressLine1, $addressAddressLine2, $addressCity, $addressCompany, $addressCountryIso2, $addressCountryIso3, $addressFirstName, $addressLastName, $addressPostcode, $addressState, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesShipmentsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderTrackingStatus (optional)
     * @param  string $orderShipmentStatusCode (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderAddressAddressLine1 (optional)
     * @param  string $orderAddressAddressLine2 (optional)
     * @param  string $orderAddressCity (optional)
     * @param  string $orderAddressCompany (optional)
     * @param  string $orderAddressCountryIso2 (optional)
     * @param  string $orderAddressFirstName (optional)
     * @param  string $orderAddressLastName (optional)
     * @param  string $orderAddressPostcode (optional)
     * @param  string $orderAddressState (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $trackingStatus (optional)
     * @param  string[] $trackingStatus2 (optional)
     * @param  string $shipmentStatusCode (optional)
     * @param  string[] $shipmentStatusCode2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $addressAddressLine1 (optional)
     * @param  string $addressAddressLine2 (optional)
     * @param  string $addressCity (optional)
     * @param  string $addressCompany (optional)
     * @param  string $addressCountryIso2 (optional)
     * @param  string[] $addressCountryIso3 (optional)
     * @param  string $addressFirstName (optional)
     * @param  string $addressLastName (optional)
     * @param  string $addressPostcode (optional)
     * @param  string $addressState (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesShipmentsGetSubresourceRequest($id, $workspaces, $orderId = null, $orderTrackingNumber = null, $orderTrackingStatus = null, $orderShipmentStatusCode = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderPhoneNumber = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderAddressAddressLine1 = null, $orderAddressAddressLine2 = null, $orderAddressCity = null, $orderAddressCompany = null, $orderAddressCountryIso2 = null, $orderAddressFirstName = null, $orderAddressLastName = null, $orderAddressPostcode = null, $orderAddressState = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $trackingStatus = null, $trackingStatus2 = null, $shipmentStatusCode = null, $shipmentStatusCode2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $phoneNumber = null, $addressAddressLine1 = null, $addressAddressLine2 = null, $addressCity = null, $addressCompany = null, $addressCountryIso2 = null, $addressCountryIso3 = null, $addressFirstName = null, $addressLastName = null, $addressPostcode = null, $addressState = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesShipmentsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesShipmentsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($orderId)) {
            $orderId = ObjectSerializer::serializeCollection($orderId, '', true);
        }
        if ($orderId !== null) {
            $queryParams['order[id]'] = $orderId;
        }
        // query params
        if (is_array($orderTrackingNumber)) {
            $orderTrackingNumber = ObjectSerializer::serializeCollection($orderTrackingNumber, '', true);
        }
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = $orderTrackingNumber;
        }
        // query params
        if (is_array($orderTrackingStatus)) {
            $orderTrackingStatus = ObjectSerializer::serializeCollection($orderTrackingStatus, '', true);
        }
        if ($orderTrackingStatus !== null) {
            $queryParams['order[trackingStatus]'] = $orderTrackingStatus;
        }
        // query params
        if (is_array($orderShipmentStatusCode)) {
            $orderShipmentStatusCode = ObjectSerializer::serializeCollection($orderShipmentStatusCode, '', true);
        }
        if ($orderShipmentStatusCode !== null) {
            $queryParams['order[shipmentStatus.code]'] = $orderShipmentStatusCode;
        }
        // query params
        if (is_array($orderOriginCarrier)) {
            $orderOriginCarrier = ObjectSerializer::serializeCollection($orderOriginCarrier, '', true);
        }
        if ($orderOriginCarrier !== null) {
            $queryParams['order[originCarrier]'] = $orderOriginCarrier;
        }
        // query params
        if (is_array($orderDestinationCarrier)) {
            $orderDestinationCarrier = ObjectSerializer::serializeCollection($orderDestinationCarrier, '', true);
        }
        if ($orderDestinationCarrier !== null) {
            $queryParams['order[destinationCarrier]'] = $orderDestinationCarrier;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($orderUpdatedAt)) {
            $orderUpdatedAt = ObjectSerializer::serializeCollection($orderUpdatedAt, '', true);
        }
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = $orderUpdatedAt;
        }
        // query params
        if (is_array($orderShippedAt)) {
            $orderShippedAt = ObjectSerializer::serializeCollection($orderShippedAt, '', true);
        }
        if ($orderShippedAt !== null) {
            $queryParams['order[shippedAt]'] = $orderShippedAt;
        }
        // query params
        if (is_array($orderLastStatusUpdate)) {
            $orderLastStatusUpdate = ObjectSerializer::serializeCollection($orderLastStatusUpdate, '', true);
        }
        if ($orderLastStatusUpdate !== null) {
            $queryParams['order[lastStatusUpdate]'] = $orderLastStatusUpdate;
        }
        // query params
        if (is_array($orderExpectedDeliveryDate)) {
            $orderExpectedDeliveryDate = ObjectSerializer::serializeCollection($orderExpectedDeliveryDate, '', true);
        }
        if ($orderExpectedDeliveryDate !== null) {
            $queryParams['order[expectedDeliveryDate]'] = $orderExpectedDeliveryDate;
        }
        // query params
        if (is_array($orderOriginCountry)) {
            $orderOriginCountry = ObjectSerializer::serializeCollection($orderOriginCountry, '', true);
        }
        if ($orderOriginCountry !== null) {
            $queryParams['order[originCountry]'] = $orderOriginCountry;
        }
        // query params
        if (is_array($orderDestinationCountry)) {
            $orderDestinationCountry = ObjectSerializer::serializeCollection($orderDestinationCountry, '', true);
        }
        if ($orderDestinationCountry !== null) {
            $queryParams['order[destinationCountry]'] = $orderDestinationCountry;
        }
        // query params
        if (is_array($orderOriginCountryIso2)) {
            $orderOriginCountryIso2 = ObjectSerializer::serializeCollection($orderOriginCountryIso2, '', true);
        }
        if ($orderOriginCountryIso2 !== null) {
            $queryParams['order[originCountryIso2]'] = $orderOriginCountryIso2;
        }
        // query params
        if (is_array($orderDestinationCountryIso2)) {
            $orderDestinationCountryIso2 = ObjectSerializer::serializeCollection($orderDestinationCountryIso2, '', true);
        }
        if ($orderDestinationCountryIso2 !== null) {
            $queryParams['order[destinationCountryIso2]'] = $orderDestinationCountryIso2;
        }
        // query params
        if (is_array($orderEmail)) {
            $orderEmail = ObjectSerializer::serializeCollection($orderEmail, '', true);
        }
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = $orderEmail;
        }
        // query params
        if (is_array($orderPhoneNumber)) {
            $orderPhoneNumber = ObjectSerializer::serializeCollection($orderPhoneNumber, '', true);
        }
        if ($orderPhoneNumber !== null) {
            $queryParams['order[phoneNumber]'] = $orderPhoneNumber;
        }
        // query params
        if (is_array($orderDaysInTransit)) {
            $orderDaysInTransit = ObjectSerializer::serializeCollection($orderDaysInTransit, '', true);
        }
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = $orderDaysInTransit;
        }
        // query params
        if (is_array($orderReviewTotalScore)) {
            $orderReviewTotalScore = ObjectSerializer::serializeCollection($orderReviewTotalScore, '', true);
        }
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = $orderReviewTotalScore;
        }
        // query params
        if (is_array($orderAddressAddressLine1)) {
            $orderAddressAddressLine1 = ObjectSerializer::serializeCollection($orderAddressAddressLine1, '', true);
        }
        if ($orderAddressAddressLine1 !== null) {
            $queryParams['order[address.addressLine1]'] = $orderAddressAddressLine1;
        }
        // query params
        if (is_array($orderAddressAddressLine2)) {
            $orderAddressAddressLine2 = ObjectSerializer::serializeCollection($orderAddressAddressLine2, '', true);
        }
        if ($orderAddressAddressLine2 !== null) {
            $queryParams['order[address.addressLine2]'] = $orderAddressAddressLine2;
        }
        // query params
        if (is_array($orderAddressCity)) {
            $orderAddressCity = ObjectSerializer::serializeCollection($orderAddressCity, '', true);
        }
        if ($orderAddressCity !== null) {
            $queryParams['order[address.city]'] = $orderAddressCity;
        }
        // query params
        if (is_array($orderAddressCompany)) {
            $orderAddressCompany = ObjectSerializer::serializeCollection($orderAddressCompany, '', true);
        }
        if ($orderAddressCompany !== null) {
            $queryParams['order[address.company]'] = $orderAddressCompany;
        }
        // query params
        if (is_array($orderAddressCountryIso2)) {
            $orderAddressCountryIso2 = ObjectSerializer::serializeCollection($orderAddressCountryIso2, '', true);
        }
        if ($orderAddressCountryIso2 !== null) {
            $queryParams['order[address.countryIso2]'] = $orderAddressCountryIso2;
        }
        // query params
        if (is_array($orderAddressFirstName)) {
            $orderAddressFirstName = ObjectSerializer::serializeCollection($orderAddressFirstName, '', true);
        }
        if ($orderAddressFirstName !== null) {
            $queryParams['order[address.firstName]'] = $orderAddressFirstName;
        }
        // query params
        if (is_array($orderAddressLastName)) {
            $orderAddressLastName = ObjectSerializer::serializeCollection($orderAddressLastName, '', true);
        }
        if ($orderAddressLastName !== null) {
            $queryParams['order[address.lastName]'] = $orderAddressLastName;
        }
        // query params
        if (is_array($orderAddressPostcode)) {
            $orderAddressPostcode = ObjectSerializer::serializeCollection($orderAddressPostcode, '', true);
        }
        if ($orderAddressPostcode !== null) {
            $queryParams['order[address.postcode]'] = $orderAddressPostcode;
        }
        // query params
        if (is_array($orderAddressState)) {
            $orderAddressState = ObjectSerializer::serializeCollection($orderAddressState, '', true);
        }
        if ($orderAddressState !== null) {
            $queryParams['order[address.state]'] = $orderAddressState;
        }
        // query params
        if (is_array($orderNumbers)) {
            $orderNumbers = ObjectSerializer::serializeCollection($orderNumbers, '', true);
        }
        if ($orderNumbers !== null) {
            $queryParams['orderNumbers'] = $orderNumbers;
        }
        // query params
        if (is_array($orderNumbers2)) {
            $orderNumbers2 = ObjectSerializer::serializeCollection($orderNumbers2, 'form', true);
        }
        if ($orderNumbers2 !== null) {
            $queryParams['orderNumbers[]'] = $orderNumbers2;
        }
        // query params
        if (is_array($createdAtBefore)) {
            $createdAtBefore = ObjectSerializer::serializeCollection($createdAtBefore, '', true);
        }
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = $createdAtBefore;
        }
        // query params
        if (is_array($createdAtStrictlyBefore)) {
            $createdAtStrictlyBefore = ObjectSerializer::serializeCollection($createdAtStrictlyBefore, '', true);
        }
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = $createdAtStrictlyBefore;
        }
        // query params
        if (is_array($createdAtAfter)) {
            $createdAtAfter = ObjectSerializer::serializeCollection($createdAtAfter, '', true);
        }
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = $createdAtAfter;
        }
        // query params
        if (is_array($createdAtStrictlyAfter)) {
            $createdAtStrictlyAfter = ObjectSerializer::serializeCollection($createdAtStrictlyAfter, '', true);
        }
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = $createdAtStrictlyAfter;
        }
        // query params
        if (is_array($updatedAtBefore)) {
            $updatedAtBefore = ObjectSerializer::serializeCollection($updatedAtBefore, '', true);
        }
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = $updatedAtBefore;
        }
        // query params
        if (is_array($updatedAtStrictlyBefore)) {
            $updatedAtStrictlyBefore = ObjectSerializer::serializeCollection($updatedAtStrictlyBefore, '', true);
        }
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = $updatedAtStrictlyBefore;
        }
        // query params
        if (is_array($updatedAtAfter)) {
            $updatedAtAfter = ObjectSerializer::serializeCollection($updatedAtAfter, '', true);
        }
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = $updatedAtAfter;
        }
        // query params
        if (is_array($updatedAtStrictlyAfter)) {
            $updatedAtStrictlyAfter = ObjectSerializer::serializeCollection($updatedAtStrictlyAfter, '', true);
        }
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = $updatedAtStrictlyAfter;
        }
        // query params
        if (is_array($shippedAtBefore)) {
            $shippedAtBefore = ObjectSerializer::serializeCollection($shippedAtBefore, '', true);
        }
        if ($shippedAtBefore !== null) {
            $queryParams['shippedAt[before]'] = $shippedAtBefore;
        }
        // query params
        if (is_array($shippedAtStrictlyBefore)) {
            $shippedAtStrictlyBefore = ObjectSerializer::serializeCollection($shippedAtStrictlyBefore, '', true);
        }
        if ($shippedAtStrictlyBefore !== null) {
            $queryParams['shippedAt[strictly_before]'] = $shippedAtStrictlyBefore;
        }
        // query params
        if (is_array($shippedAtAfter)) {
            $shippedAtAfter = ObjectSerializer::serializeCollection($shippedAtAfter, '', true);
        }
        if ($shippedAtAfter !== null) {
            $queryParams['shippedAt[after]'] = $shippedAtAfter;
        }
        // query params
        if (is_array($shippedAtStrictlyAfter)) {
            $shippedAtStrictlyAfter = ObjectSerializer::serializeCollection($shippedAtStrictlyAfter, '', true);
        }
        if ($shippedAtStrictlyAfter !== null) {
            $queryParams['shippedAt[strictly_after]'] = $shippedAtStrictlyAfter;
        }
        // query params
        if (is_array($lastStatusUpdateBefore)) {
            $lastStatusUpdateBefore = ObjectSerializer::serializeCollection($lastStatusUpdateBefore, '', true);
        }
        if ($lastStatusUpdateBefore !== null) {
            $queryParams['lastStatusUpdate[before]'] = $lastStatusUpdateBefore;
        }
        // query params
        if (is_array($lastStatusUpdateStrictlyBefore)) {
            $lastStatusUpdateStrictlyBefore = ObjectSerializer::serializeCollection($lastStatusUpdateStrictlyBefore, '', true);
        }
        if ($lastStatusUpdateStrictlyBefore !== null) {
            $queryParams['lastStatusUpdate[strictly_before]'] = $lastStatusUpdateStrictlyBefore;
        }
        // query params
        if (is_array($lastStatusUpdateAfter)) {
            $lastStatusUpdateAfter = ObjectSerializer::serializeCollection($lastStatusUpdateAfter, '', true);
        }
        if ($lastStatusUpdateAfter !== null) {
            $queryParams['lastStatusUpdate[after]'] = $lastStatusUpdateAfter;
        }
        // query params
        if (is_array($lastStatusUpdateStrictlyAfter)) {
            $lastStatusUpdateStrictlyAfter = ObjectSerializer::serializeCollection($lastStatusUpdateStrictlyAfter, '', true);
        }
        if ($lastStatusUpdateStrictlyAfter !== null) {
            $queryParams['lastStatusUpdate[strictly_after]'] = $lastStatusUpdateStrictlyAfter;
        }
        // query params
        if (is_array($expectedDeliveryDateBefore)) {
            $expectedDeliveryDateBefore = ObjectSerializer::serializeCollection($expectedDeliveryDateBefore, '', true);
        }
        if ($expectedDeliveryDateBefore !== null) {
            $queryParams['expectedDeliveryDate[before]'] = $expectedDeliveryDateBefore;
        }
        // query params
        if (is_array($expectedDeliveryDateStrictlyBefore)) {
            $expectedDeliveryDateStrictlyBefore = ObjectSerializer::serializeCollection($expectedDeliveryDateStrictlyBefore, '', true);
        }
        if ($expectedDeliveryDateStrictlyBefore !== null) {
            $queryParams['expectedDeliveryDate[strictly_before]'] = $expectedDeliveryDateStrictlyBefore;
        }
        // query params
        if (is_array($expectedDeliveryDateAfter)) {
            $expectedDeliveryDateAfter = ObjectSerializer::serializeCollection($expectedDeliveryDateAfter, '', true);
        }
        if ($expectedDeliveryDateAfter !== null) {
            $queryParams['expectedDeliveryDate[after]'] = $expectedDeliveryDateAfter;
        }
        // query params
        if (is_array($expectedDeliveryDateStrictlyAfter)) {
            $expectedDeliveryDateStrictlyAfter = ObjectSerializer::serializeCollection($expectedDeliveryDateStrictlyAfter, '', true);
        }
        if ($expectedDeliveryDateStrictlyAfter !== null) {
            $queryParams['expectedDeliveryDate[strictly_after]'] = $expectedDeliveryDateStrictlyAfter;
        }
        // query params
        if ($id2 !== null) {
            if('form' === 'form' && is_array($id2)) {
                foreach($id2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id2;
            }
        }
        // query params
        if (is_array($trackingNumber)) {
            $trackingNumber = ObjectSerializer::serializeCollection($trackingNumber, '', true);
        }
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = $trackingNumber;
        }
        // query params
        if (is_array($trackingStatus)) {
            $trackingStatus = ObjectSerializer::serializeCollection($trackingStatus, '', true);
        }
        if ($trackingStatus !== null) {
            $queryParams['trackingStatus'] = $trackingStatus;
        }
        // query params
        if ($trackingStatus2 !== null) {
            if('form' === 'form' && is_array($trackingStatus2)) {
                foreach($trackingStatus2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['trackingStatus[]'] = $trackingStatus2;
            }
        }
        // query params
        if (is_array($shipmentStatusCode)) {
            $shipmentStatusCode = ObjectSerializer::serializeCollection($shipmentStatusCode, '', true);
        }
        if ($shipmentStatusCode !== null) {
            $queryParams['shipmentStatus.code'] = $shipmentStatusCode;
        }
        // query params
        if ($shipmentStatusCode2 !== null) {
            if('form' === 'form' && is_array($shipmentStatusCode2)) {
                foreach($shipmentStatusCode2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['shipmentStatus.code[]'] = $shipmentStatusCode2;
            }
        }
        // query params
        if (is_array($originCarrier)) {
            $originCarrier = ObjectSerializer::serializeCollection($originCarrier, '', true);
        }
        if ($originCarrier !== null) {
            $queryParams['originCarrier'] = $originCarrier;
        }
        // query params
        if ($originCarrier2 !== null) {
            if('form' === 'form' && is_array($originCarrier2)) {
                foreach($originCarrier2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originCarrier[]'] = $originCarrier2;
            }
        }
        // query params
        if (is_array($destinationCarrier)) {
            $destinationCarrier = ObjectSerializer::serializeCollection($destinationCarrier, '', true);
        }
        if ($destinationCarrier !== null) {
            $queryParams['destinationCarrier'] = $destinationCarrier;
        }
        // query params
        if ($destinationCarrier2 !== null) {
            if('form' === 'form' && is_array($destinationCarrier2)) {
                foreach($destinationCarrier2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['destinationCarrier[]'] = $destinationCarrier2;
            }
        }
        // query params
        if (is_array($originCountry)) {
            $originCountry = ObjectSerializer::serializeCollection($originCountry, '', true);
        }
        if ($originCountry !== null) {
            $queryParams['originCountry'] = $originCountry;
        }
        // query params
        if (is_array($originCountryIso2)) {
            $originCountryIso2 = ObjectSerializer::serializeCollection($originCountryIso2, '', true);
        }
        if ($originCountryIso2 !== null) {
            $queryParams['originCountryIso2'] = $originCountryIso2;
        }
        // query params
        if ($originCountryIso3 !== null) {
            if('form' === 'form' && is_array($originCountryIso3)) {
                foreach($originCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originCountryIso2[]'] = $originCountryIso3;
            }
        }
        // query params
        if (is_array($destinationCountry)) {
            $destinationCountry = ObjectSerializer::serializeCollection($destinationCountry, '', true);
        }
        if ($destinationCountry !== null) {
            $queryParams['destinationCountry'] = $destinationCountry;
        }
        // query params
        if (is_array($destinationCountryIso2)) {
            $destinationCountryIso2 = ObjectSerializer::serializeCollection($destinationCountryIso2, '', true);
        }
        if ($destinationCountryIso2 !== null) {
            $queryParams['destinationCountryIso2'] = $destinationCountryIso2;
        }
        // query params
        if ($destinationCountryIso3 !== null) {
            if('form' === 'form' && is_array($destinationCountryIso3)) {
                foreach($destinationCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['destinationCountryIso2[]'] = $destinationCountryIso3;
            }
        }
        // query params
        if (is_array($email)) {
            $email = ObjectSerializer::serializeCollection($email, '', true);
        }
        if ($email !== null) {
            $queryParams['email'] = $email;
        }
        // query params
        if (is_array($phoneNumber)) {
            $phoneNumber = ObjectSerializer::serializeCollection($phoneNumber, '', true);
        }
        if ($phoneNumber !== null) {
            $queryParams['phoneNumber'] = $phoneNumber;
        }
        // query params
        if (is_array($addressAddressLine1)) {
            $addressAddressLine1 = ObjectSerializer::serializeCollection($addressAddressLine1, '', true);
        }
        if ($addressAddressLine1 !== null) {
            $queryParams['address.addressLine1'] = $addressAddressLine1;
        }
        // query params
        if (is_array($addressAddressLine2)) {
            $addressAddressLine2 = ObjectSerializer::serializeCollection($addressAddressLine2, '', true);
        }
        if ($addressAddressLine2 !== null) {
            $queryParams['address.addressLine2'] = $addressAddressLine2;
        }
        // query params
        if (is_array($addressCity)) {
            $addressCity = ObjectSerializer::serializeCollection($addressCity, '', true);
        }
        if ($addressCity !== null) {
            $queryParams['address.city'] = $addressCity;
        }
        // query params
        if (is_array($addressCompany)) {
            $addressCompany = ObjectSerializer::serializeCollection($addressCompany, '', true);
        }
        if ($addressCompany !== null) {
            $queryParams['address.company'] = $addressCompany;
        }
        // query params
        if (is_array($addressCountryIso2)) {
            $addressCountryIso2 = ObjectSerializer::serializeCollection($addressCountryIso2, '', true);
        }
        if ($addressCountryIso2 !== null) {
            $queryParams['address.countryIso2'] = $addressCountryIso2;
        }
        // query params
        if ($addressCountryIso3 !== null) {
            if('form' === 'form' && is_array($addressCountryIso3)) {
                foreach($addressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['address.countryIso2[]'] = $addressCountryIso3;
            }
        }
        // query params
        if (is_array($addressFirstName)) {
            $addressFirstName = ObjectSerializer::serializeCollection($addressFirstName, '', true);
        }
        if ($addressFirstName !== null) {
            $queryParams['address.firstName'] = $addressFirstName;
        }
        // query params
        if (is_array($addressLastName)) {
            $addressLastName = ObjectSerializer::serializeCollection($addressLastName, '', true);
        }
        if ($addressLastName !== null) {
            $queryParams['address.lastName'] = $addressLastName;
        }
        // query params
        if (is_array($addressPostcode)) {
            $addressPostcode = ObjectSerializer::serializeCollection($addressPostcode, '', true);
        }
        if ($addressPostcode !== null) {
            $queryParams['address.postcode'] = $addressPostcode;
        }
        // query params
        if (is_array($addressState)) {
            $addressState = ObjectSerializer::serializeCollection($addressState, '', true);
        }
        if ($addressState !== null) {
            $queryParams['address.state'] = $addressState;
        }
        // query params
        if (is_array($daysInTransit)) {
            $daysInTransit = ObjectSerializer::serializeCollection($daysInTransit, '', true);
        }
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = $daysInTransit;
        }
        // query params
        if ($daysInTransit2 !== null) {
            if('form' === 'form' && is_array($daysInTransit2)) {
                foreach($daysInTransit2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['daysInTransit[]'] = $daysInTransit2;
            }
        }
        // query params
        if (is_array($daysInTransitBetween)) {
            $daysInTransitBetween = ObjectSerializer::serializeCollection($daysInTransitBetween, '', true);
        }
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = $daysInTransitBetween;
        }
        // query params
        if (is_array($daysInTransitGt)) {
            $daysInTransitGt = ObjectSerializer::serializeCollection($daysInTransitGt, '', true);
        }
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = $daysInTransitGt;
        }
        // query params
        if (is_array($daysInTransitGte)) {
            $daysInTransitGte = ObjectSerializer::serializeCollection($daysInTransitGte, '', true);
        }
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = $daysInTransitGte;
        }
        // query params
        if (is_array($daysInTransitLt)) {
            $daysInTransitLt = ObjectSerializer::serializeCollection($daysInTransitLt, '', true);
        }
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = $daysInTransitLt;
        }
        // query params
        if (is_array($daysInTransitLte)) {
            $daysInTransitLte = ObjectSerializer::serializeCollection($daysInTransitLte, '', true);
        }
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = $daysInTransitLte;
        }
        // query params
        if (is_array($reviewTotalScoreBetween)) {
            $reviewTotalScoreBetween = ObjectSerializer::serializeCollection($reviewTotalScoreBetween, '', true);
        }
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = $reviewTotalScoreBetween;
        }
        // query params
        if (is_array($reviewTotalScoreGt)) {
            $reviewTotalScoreGt = ObjectSerializer::serializeCollection($reviewTotalScoreGt, '', true);
        }
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = $reviewTotalScoreGt;
        }
        // query params
        if (is_array($reviewTotalScoreGte)) {
            $reviewTotalScoreGte = ObjectSerializer::serializeCollection($reviewTotalScoreGte, '', true);
        }
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = $reviewTotalScoreGte;
        }
        // query params
        if (is_array($reviewTotalScoreLt)) {
            $reviewTotalScoreLt = ObjectSerializer::serializeCollection($reviewTotalScoreLt, '', true);
        }
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = $reviewTotalScoreLt;
        }
        // query params
        if (is_array($reviewTotalScoreLte)) {
            $reviewTotalScoreLte = ObjectSerializer::serializeCollection($reviewTotalScoreLte, '', true);
        }
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = $reviewTotalScoreLte;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesStatusesGetSubresource
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $entity entity (optional)
     * @param  string $code code (optional)
     * @param  string $title title (optional)
     * @param  string $orderEntity orderEntity (optional)
     * @param  string $orderCode orderCode (optional)
     * @param  string $orderTitle orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\StatusGet[]
     */
    public function apiTeamsWorkspacesStatusesGetSubresource($id, $workspaces, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesStatusesGetSubresourceWithHttpInfo($id, $workspaces, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesStatusesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\StatusGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesStatusesGetSubresourceWithHttpInfo($id, $workspaces, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesStatusesGetSubresourceRequest($id, $workspaces, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\StatusGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\StatusGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\StatusGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\StatusGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesStatusesGetSubresourceAsync
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesStatusesGetSubresourceAsync($id, $workspaces, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesStatusesGetSubresourceAsyncWithHttpInfo($id, $workspaces, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesStatusesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesStatusesGetSubresourceAsyncWithHttpInfo($id, $workspaces, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\StatusGet[]';
        $request = $this->apiTeamsWorkspacesStatusesGetSubresourceRequest($id, $workspaces, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesStatusesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesStatusesGetSubresourceRequest($id, $workspaces, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesStatusesGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesStatusesGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($entity)) {
            $entity = ObjectSerializer::serializeCollection($entity, '', true);
        }
        if ($entity !== null) {
            $queryParams['entity'] = $entity;
        }
        // query params
        if (is_array($code)) {
            $code = ObjectSerializer::serializeCollection($code, '', true);
        }
        if ($code !== null) {
            $queryParams['code'] = $code;
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($orderEntity)) {
            $orderEntity = ObjectSerializer::serializeCollection($orderEntity, '', true);
        }
        if ($orderEntity !== null) {
            $queryParams['order[entity]'] = $orderEntity;
        }
        // query params
        if (is_array($orderCode)) {
            $orderCode = ObjectSerializer::serializeCollection($orderCode, '', true);
        }
        if ($orderCode !== null) {
            $queryParams['order[code]'] = $orderCode;
        }
        // query params
        if (is_array($orderTitle)) {
            $orderTitle = ObjectSerializer::serializeCollection($orderTitle, '', true);
        }
        if ($orderTitle !== null) {
            $queryParams['order[title]'] = $orderTitle;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresource
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingPageGet[]
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresource($id, $workspaces, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id, $workspaces, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingPageGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id, $workspaces, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesTrackingPagesGetSubresourceRequest($id, $workspaces, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingPageGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingPageGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingPageGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresourceAsync
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresourceAsync($id, $workspaces, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id, $workspaces, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id, $workspaces, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGet[]';
        $request = $this->apiTeamsWorkspacesTrackingPagesGetSubresourceRequest($id, $workspaces, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesTrackingPagesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesTrackingPagesGetSubresourceRequest($id, $workspaces, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesTrackingPagesGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesTrackingPagesGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/tracking_pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresource
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $type type (optional)
     * @param  string[] $type2 type2 (optional)
     * @param  string $period period (optional)
     * @param  string[] $period2 period2 (optional)
     * @param  string $title title (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $tag tag (optional)
     * @param  bool $existsIntegration existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGet[]
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresource($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $workspaces, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceAsync
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceAsync($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet[]';
        $request = $this->apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesWorkflowsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesWorkflowsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesWorkflowsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/workflows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if ($type2 !== null) {
            if('form' === 'form' && is_array($type2)) {
                foreach($type2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type[]'] = $type2;
            }
        }
        // query params
        if (is_array($period)) {
            $period = ObjectSerializer::serializeCollection($period, '', true);
        }
        if ($period !== null) {
            $queryParams['period'] = $period;
        }
        // query params
        if ($period2 !== null) {
            if('form' === 'form' && is_array($period2)) {
                foreach($period2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['period[]'] = $period2;
            }
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($tag)) {
            $tag = ObjectSerializer::serializeCollection($tag, '', true);
        }
        if ($tag !== null) {
            $queryParams['tag'] = $tag;
        }
        // query params
        if (is_array($existsIntegration)) {
            $existsIntegration = ObjectSerializer::serializeCollection($existsIntegration, '', true);
        }
        if ($existsIntegration !== null) {
            $queryParams['exists[integration]'] = $existsIntegration;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresource
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id id (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderOrderNumber orderOrderNumber (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderPhoneNumber orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode orderOrderStatusCode (optional)
     * @param  string $orderSubtotal orderSubtotal (optional)
     * @param  string $orderTotal orderTotal (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState orderBillingAddressState (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $orderNumber orderNumber (optional)
     * @param  string $email email (optional)
     * @param  string $phoneNumber phoneNumber (optional)
     * @param  string $orderStatusCode orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 orderStatusCode2 (optional)
     * @param  string $orderType orderType (optional)
     * @param  string[] $orderType2 orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity shippingAddressCity (optional)
     * @param  string $shippingAddressCompany shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode shippingAddressPostcode (optional)
     * @param  string $shippingAddressState shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity billingAddressCity (optional)
     * @param  string $billingAddressCompany billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName billingAddressFirstName (optional)
     * @param  string $billingAddressLastName billingAddressLastName (optional)
     * @param  string $billingAddressPostcode billingAddressPostcode (optional)
     * @param  string $billingAddressState billingAddressState (optional)
     * @param  string $subtotal subtotal (optional)
     * @param  string[] $subtotal2 subtotal2 (optional)
     * @param  string $total total (optional)
     * @param  string[] $total2 total2 (optional)
     * @param  string $subtotalBetween subtotalBetween (optional)
     * @param  string $subtotalGt subtotalGt (optional)
     * @param  string $subtotalGte subtotalGte (optional)
     * @param  string $subtotalLt subtotalLt (optional)
     * @param  string $subtotalLte subtotalLte (optional)
     * @param  string $totalBetween totalBetween (optional)
     * @param  string $totalGt totalGt (optional)
     * @param  string $totalGte totalGte (optional)
     * @param  string $totalLt totalLt (optional)
     * @param  string $totalLte totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGet[]
     */
    public function apiWorkspacesOrdersGetSubresource($id, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiWorkspacesOrdersGetSubresourceWithHttpInfo($id, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesOrdersGetSubresourceWithHttpInfo($id, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiWorkspacesOrdersGetSubresourceRequest($id, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceAsync
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersGetSubresourceAsync($id, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGet[]';
        $request = $this->apiWorkspacesOrdersGetSubresourceRequest($id, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesOrdersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesOrdersGetSubresourceRequest($id, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesOrdersGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($orderId)) {
            $orderId = ObjectSerializer::serializeCollection($orderId, '', true);
        }
        if ($orderId !== null) {
            $queryParams['order[id]'] = $orderId;
        }
        // query params
        if (is_array($orderOrderNumber)) {
            $orderOrderNumber = ObjectSerializer::serializeCollection($orderOrderNumber, '', true);
        }
        if ($orderOrderNumber !== null) {
            $queryParams['order[orderNumber]'] = $orderOrderNumber;
        }
        // query params
        if (is_array($orderEmail)) {
            $orderEmail = ObjectSerializer::serializeCollection($orderEmail, '', true);
        }
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = $orderEmail;
        }
        // query params
        if (is_array($orderPhoneNumber)) {
            $orderPhoneNumber = ObjectSerializer::serializeCollection($orderPhoneNumber, '', true);
        }
        if ($orderPhoneNumber !== null) {
            $queryParams['order[phoneNumber]'] = $orderPhoneNumber;
        }
        // query params
        if (is_array($orderOrderStatusCode)) {
            $orderOrderStatusCode = ObjectSerializer::serializeCollection($orderOrderStatusCode, '', true);
        }
        if ($orderOrderStatusCode !== null) {
            $queryParams['order[orderStatus.code]'] = $orderOrderStatusCode;
        }
        // query params
        if (is_array($orderSubtotal)) {
            $orderSubtotal = ObjectSerializer::serializeCollection($orderSubtotal, '', true);
        }
        if ($orderSubtotal !== null) {
            $queryParams['order[subtotal]'] = $orderSubtotal;
        }
        // query params
        if (is_array($orderTotal)) {
            $orderTotal = ObjectSerializer::serializeCollection($orderTotal, '', true);
        }
        if ($orderTotal !== null) {
            $queryParams['order[total]'] = $orderTotal;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($orderUpdatedAt)) {
            $orderUpdatedAt = ObjectSerializer::serializeCollection($orderUpdatedAt, '', true);
        }
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = $orderUpdatedAt;
        }
        // query params
        if (is_array($orderShippingAddressAddressLine1)) {
            $orderShippingAddressAddressLine1 = ObjectSerializer::serializeCollection($orderShippingAddressAddressLine1, '', true);
        }
        if ($orderShippingAddressAddressLine1 !== null) {
            $queryParams['order[shippingAddress.addressLine1]'] = $orderShippingAddressAddressLine1;
        }
        // query params
        if (is_array($orderShippingAddressAddressLine2)) {
            $orderShippingAddressAddressLine2 = ObjectSerializer::serializeCollection($orderShippingAddressAddressLine2, '', true);
        }
        if ($orderShippingAddressAddressLine2 !== null) {
            $queryParams['order[shippingAddress.addressLine2]'] = $orderShippingAddressAddressLine2;
        }
        // query params
        if (is_array($orderShippingAddressCity)) {
            $orderShippingAddressCity = ObjectSerializer::serializeCollection($orderShippingAddressCity, '', true);
        }
        if ($orderShippingAddressCity !== null) {
            $queryParams['order[shippingAddress.city]'] = $orderShippingAddressCity;
        }
        // query params
        if (is_array($orderShippingAddressCompany)) {
            $orderShippingAddressCompany = ObjectSerializer::serializeCollection($orderShippingAddressCompany, '', true);
        }
        if ($orderShippingAddressCompany !== null) {
            $queryParams['order[shippingAddress.company]'] = $orderShippingAddressCompany;
        }
        // query params
        if (is_array($orderShippingAddressCountryIso2)) {
            $orderShippingAddressCountryIso2 = ObjectSerializer::serializeCollection($orderShippingAddressCountryIso2, '', true);
        }
        if ($orderShippingAddressCountryIso2 !== null) {
            $queryParams['order[shippingAddress.countryIso2]'] = $orderShippingAddressCountryIso2;
        }
        // query params
        if (is_array($orderShippingAddressFirstName)) {
            $orderShippingAddressFirstName = ObjectSerializer::serializeCollection($orderShippingAddressFirstName, '', true);
        }
        if ($orderShippingAddressFirstName !== null) {
            $queryParams['order[shippingAddress.firstName]'] = $orderShippingAddressFirstName;
        }
        // query params
        if (is_array($orderShippingAddressLastName)) {
            $orderShippingAddressLastName = ObjectSerializer::serializeCollection($orderShippingAddressLastName, '', true);
        }
        if ($orderShippingAddressLastName !== null) {
            $queryParams['order[shippingAddress.lastName]'] = $orderShippingAddressLastName;
        }
        // query params
        if (is_array($orderShippingAddressPostcode)) {
            $orderShippingAddressPostcode = ObjectSerializer::serializeCollection($orderShippingAddressPostcode, '', true);
        }
        if ($orderShippingAddressPostcode !== null) {
            $queryParams['order[shippingAddress.postcode]'] = $orderShippingAddressPostcode;
        }
        // query params
        if (is_array($orderShippingAddressState)) {
            $orderShippingAddressState = ObjectSerializer::serializeCollection($orderShippingAddressState, '', true);
        }
        if ($orderShippingAddressState !== null) {
            $queryParams['order[shippingAddress.state]'] = $orderShippingAddressState;
        }
        // query params
        if (is_array($orderBillingAddressAddressLine1)) {
            $orderBillingAddressAddressLine1 = ObjectSerializer::serializeCollection($orderBillingAddressAddressLine1, '', true);
        }
        if ($orderBillingAddressAddressLine1 !== null) {
            $queryParams['order[billingAddress.addressLine1]'] = $orderBillingAddressAddressLine1;
        }
        // query params
        if (is_array($orderBillingAddressAddressLine2)) {
            $orderBillingAddressAddressLine2 = ObjectSerializer::serializeCollection($orderBillingAddressAddressLine2, '', true);
        }
        if ($orderBillingAddressAddressLine2 !== null) {
            $queryParams['order[billingAddress.addressLine2]'] = $orderBillingAddressAddressLine2;
        }
        // query params
        if (is_array($orderBillingAddressCity)) {
            $orderBillingAddressCity = ObjectSerializer::serializeCollection($orderBillingAddressCity, '', true);
        }
        if ($orderBillingAddressCity !== null) {
            $queryParams['order[billingAddress.city]'] = $orderBillingAddressCity;
        }
        // query params
        if (is_array($orderBillingAddressCompany)) {
            $orderBillingAddressCompany = ObjectSerializer::serializeCollection($orderBillingAddressCompany, '', true);
        }
        if ($orderBillingAddressCompany !== null) {
            $queryParams['order[billingAddress.company]'] = $orderBillingAddressCompany;
        }
        // query params
        if (is_array($orderBillingAddressCountryIso2)) {
            $orderBillingAddressCountryIso2 = ObjectSerializer::serializeCollection($orderBillingAddressCountryIso2, '', true);
        }
        if ($orderBillingAddressCountryIso2 !== null) {
            $queryParams['order[billingAddress.countryIso2]'] = $orderBillingAddressCountryIso2;
        }
        // query params
        if (is_array($orderBillingAddressFirstName)) {
            $orderBillingAddressFirstName = ObjectSerializer::serializeCollection($orderBillingAddressFirstName, '', true);
        }
        if ($orderBillingAddressFirstName !== null) {
            $queryParams['order[billingAddress.firstName]'] = $orderBillingAddressFirstName;
        }
        // query params
        if (is_array($orderBillingAddressLastName)) {
            $orderBillingAddressLastName = ObjectSerializer::serializeCollection($orderBillingAddressLastName, '', true);
        }
        if ($orderBillingAddressLastName !== null) {
            $queryParams['order[billingAddress.lastName]'] = $orderBillingAddressLastName;
        }
        // query params
        if (is_array($orderBillingAddressPostcode)) {
            $orderBillingAddressPostcode = ObjectSerializer::serializeCollection($orderBillingAddressPostcode, '', true);
        }
        if ($orderBillingAddressPostcode !== null) {
            $queryParams['order[billingAddress.postcode]'] = $orderBillingAddressPostcode;
        }
        // query params
        if (is_array($orderBillingAddressState)) {
            $orderBillingAddressState = ObjectSerializer::serializeCollection($orderBillingAddressState, '', true);
        }
        if ($orderBillingAddressState !== null) {
            $queryParams['order[billingAddress.state]'] = $orderBillingAddressState;
        }
        // query params
        if (is_array($createdAtBefore)) {
            $createdAtBefore = ObjectSerializer::serializeCollection($createdAtBefore, '', true);
        }
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = $createdAtBefore;
        }
        // query params
        if (is_array($createdAtStrictlyBefore)) {
            $createdAtStrictlyBefore = ObjectSerializer::serializeCollection($createdAtStrictlyBefore, '', true);
        }
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = $createdAtStrictlyBefore;
        }
        // query params
        if (is_array($createdAtAfter)) {
            $createdAtAfter = ObjectSerializer::serializeCollection($createdAtAfter, '', true);
        }
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = $createdAtAfter;
        }
        // query params
        if (is_array($createdAtStrictlyAfter)) {
            $createdAtStrictlyAfter = ObjectSerializer::serializeCollection($createdAtStrictlyAfter, '', true);
        }
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = $createdAtStrictlyAfter;
        }
        // query params
        if (is_array($updatedAtBefore)) {
            $updatedAtBefore = ObjectSerializer::serializeCollection($updatedAtBefore, '', true);
        }
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = $updatedAtBefore;
        }
        // query params
        if (is_array($updatedAtStrictlyBefore)) {
            $updatedAtStrictlyBefore = ObjectSerializer::serializeCollection($updatedAtStrictlyBefore, '', true);
        }
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = $updatedAtStrictlyBefore;
        }
        // query params
        if (is_array($updatedAtAfter)) {
            $updatedAtAfter = ObjectSerializer::serializeCollection($updatedAtAfter, '', true);
        }
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = $updatedAtAfter;
        }
        // query params
        if (is_array($updatedAtStrictlyAfter)) {
            $updatedAtStrictlyAfter = ObjectSerializer::serializeCollection($updatedAtStrictlyAfter, '', true);
        }
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = $updatedAtStrictlyAfter;
        }
        // query params
        if ($id2 !== null) {
            if('form' === 'form' && is_array($id2)) {
                foreach($id2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id2;
            }
        }
        // query params
        if (is_array($orderNumber)) {
            $orderNumber = ObjectSerializer::serializeCollection($orderNumber, '', true);
        }
        if ($orderNumber !== null) {
            $queryParams['orderNumber'] = $orderNumber;
        }
        // query params
        if (is_array($email)) {
            $email = ObjectSerializer::serializeCollection($email, '', true);
        }
        if ($email !== null) {
            $queryParams['email'] = $email;
        }
        // query params
        if (is_array($phoneNumber)) {
            $phoneNumber = ObjectSerializer::serializeCollection($phoneNumber, '', true);
        }
        if ($phoneNumber !== null) {
            $queryParams['phoneNumber'] = $phoneNumber;
        }
        // query params
        if (is_array($orderStatusCode)) {
            $orderStatusCode = ObjectSerializer::serializeCollection($orderStatusCode, '', true);
        }
        if ($orderStatusCode !== null) {
            $queryParams['orderStatus.code'] = $orderStatusCode;
        }
        // query params
        if ($orderStatusCode2 !== null) {
            if('form' === 'form' && is_array($orderStatusCode2)) {
                foreach($orderStatusCode2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderStatus.code[]'] = $orderStatusCode2;
            }
        }
        // query params
        if (is_array($orderType)) {
            $orderType = ObjectSerializer::serializeCollection($orderType, '', true);
        }
        if ($orderType !== null) {
            $queryParams['orderType'] = $orderType;
        }
        // query params
        if ($orderType2 !== null) {
            if('form' === 'form' && is_array($orderType2)) {
                foreach($orderType2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderType[]'] = $orderType2;
            }
        }
        // query params
        if (is_array($shippingAddressAddressLine1)) {
            $shippingAddressAddressLine1 = ObjectSerializer::serializeCollection($shippingAddressAddressLine1, '', true);
        }
        if ($shippingAddressAddressLine1 !== null) {
            $queryParams['shippingAddress.addressLine1'] = $shippingAddressAddressLine1;
        }
        // query params
        if (is_array($shippingAddressAddressLine2)) {
            $shippingAddressAddressLine2 = ObjectSerializer::serializeCollection($shippingAddressAddressLine2, '', true);
        }
        if ($shippingAddressAddressLine2 !== null) {
            $queryParams['shippingAddress.addressLine2'] = $shippingAddressAddressLine2;
        }
        // query params
        if (is_array($shippingAddressCity)) {
            $shippingAddressCity = ObjectSerializer::serializeCollection($shippingAddressCity, '', true);
        }
        if ($shippingAddressCity !== null) {
            $queryParams['shippingAddress.city'] = $shippingAddressCity;
        }
        // query params
        if (is_array($shippingAddressCompany)) {
            $shippingAddressCompany = ObjectSerializer::serializeCollection($shippingAddressCompany, '', true);
        }
        if ($shippingAddressCompany !== null) {
            $queryParams['shippingAddress.company'] = $shippingAddressCompany;
        }
        // query params
        if (is_array($shippingAddressCountryIso2)) {
            $shippingAddressCountryIso2 = ObjectSerializer::serializeCollection($shippingAddressCountryIso2, '', true);
        }
        if ($shippingAddressCountryIso2 !== null) {
            $queryParams['shippingAddress.countryIso2'] = $shippingAddressCountryIso2;
        }
        // query params
        if ($shippingAddressCountryIso3 !== null) {
            if('form' === 'form' && is_array($shippingAddressCountryIso3)) {
                foreach($shippingAddressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['shippingAddress.countryIso2[]'] = $shippingAddressCountryIso3;
            }
        }
        // query params
        if (is_array($shippingAddressFirstName)) {
            $shippingAddressFirstName = ObjectSerializer::serializeCollection($shippingAddressFirstName, '', true);
        }
        if ($shippingAddressFirstName !== null) {
            $queryParams['shippingAddress.firstName'] = $shippingAddressFirstName;
        }
        // query params
        if (is_array($shippingAddressLastName)) {
            $shippingAddressLastName = ObjectSerializer::serializeCollection($shippingAddressLastName, '', true);
        }
        if ($shippingAddressLastName !== null) {
            $queryParams['shippingAddress.lastName'] = $shippingAddressLastName;
        }
        // query params
        if (is_array($shippingAddressPostcode)) {
            $shippingAddressPostcode = ObjectSerializer::serializeCollection($shippingAddressPostcode, '', true);
        }
        if ($shippingAddressPostcode !== null) {
            $queryParams['shippingAddress.postcode'] = $shippingAddressPostcode;
        }
        // query params
        if (is_array($shippingAddressState)) {
            $shippingAddressState = ObjectSerializer::serializeCollection($shippingAddressState, '', true);
        }
        if ($shippingAddressState !== null) {
            $queryParams['shippingAddress.state'] = $shippingAddressState;
        }
        // query params
        if (is_array($billingAddressAddressLine1)) {
            $billingAddressAddressLine1 = ObjectSerializer::serializeCollection($billingAddressAddressLine1, '', true);
        }
        if ($billingAddressAddressLine1 !== null) {
            $queryParams['billingAddress.addressLine1'] = $billingAddressAddressLine1;
        }
        // query params
        if (is_array($billingAddressAddressLine2)) {
            $billingAddressAddressLine2 = ObjectSerializer::serializeCollection($billingAddressAddressLine2, '', true);
        }
        if ($billingAddressAddressLine2 !== null) {
            $queryParams['billingAddress.addressLine2'] = $billingAddressAddressLine2;
        }
        // query params
        if (is_array($billingAddressCity)) {
            $billingAddressCity = ObjectSerializer::serializeCollection($billingAddressCity, '', true);
        }
        if ($billingAddressCity !== null) {
            $queryParams['billingAddress.city'] = $billingAddressCity;
        }
        // query params
        if (is_array($billingAddressCompany)) {
            $billingAddressCompany = ObjectSerializer::serializeCollection($billingAddressCompany, '', true);
        }
        if ($billingAddressCompany !== null) {
            $queryParams['billingAddress.company'] = $billingAddressCompany;
        }
        // query params
        if (is_array($billingAddressCountryIso2)) {
            $billingAddressCountryIso2 = ObjectSerializer::serializeCollection($billingAddressCountryIso2, '', true);
        }
        if ($billingAddressCountryIso2 !== null) {
            $queryParams['billingAddress.countryIso2'] = $billingAddressCountryIso2;
        }
        // query params
        if ($billingAddressCountryIso3 !== null) {
            if('form' === 'form' && is_array($billingAddressCountryIso3)) {
                foreach($billingAddressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['billingAddress.countryIso2[]'] = $billingAddressCountryIso3;
            }
        }
        // query params
        if (is_array($billingAddressFirstName)) {
            $billingAddressFirstName = ObjectSerializer::serializeCollection($billingAddressFirstName, '', true);
        }
        if ($billingAddressFirstName !== null) {
            $queryParams['billingAddress.firstName'] = $billingAddressFirstName;
        }
        // query params
        if (is_array($billingAddressLastName)) {
            $billingAddressLastName = ObjectSerializer::serializeCollection($billingAddressLastName, '', true);
        }
        if ($billingAddressLastName !== null) {
            $queryParams['billingAddress.lastName'] = $billingAddressLastName;
        }
        // query params
        if (is_array($billingAddressPostcode)) {
            $billingAddressPostcode = ObjectSerializer::serializeCollection($billingAddressPostcode, '', true);
        }
        if ($billingAddressPostcode !== null) {
            $queryParams['billingAddress.postcode'] = $billingAddressPostcode;
        }
        // query params
        if (is_array($billingAddressState)) {
            $billingAddressState = ObjectSerializer::serializeCollection($billingAddressState, '', true);
        }
        if ($billingAddressState !== null) {
            $queryParams['billingAddress.state'] = $billingAddressState;
        }
        // query params
        if (is_array($subtotal)) {
            $subtotal = ObjectSerializer::serializeCollection($subtotal, '', true);
        }
        if ($subtotal !== null) {
            $queryParams['subtotal'] = $subtotal;
        }
        // query params
        if ($subtotal2 !== null) {
            if('form' === 'form' && is_array($subtotal2)) {
                foreach($subtotal2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subtotal[]'] = $subtotal2;
            }
        }
        // query params
        if (is_array($total)) {
            $total = ObjectSerializer::serializeCollection($total, '', true);
        }
        if ($total !== null) {
            $queryParams['total'] = $total;
        }
        // query params
        if ($total2 !== null) {
            if('form' === 'form' && is_array($total2)) {
                foreach($total2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['total[]'] = $total2;
            }
        }
        // query params
        if (is_array($subtotalBetween)) {
            $subtotalBetween = ObjectSerializer::serializeCollection($subtotalBetween, '', true);
        }
        if ($subtotalBetween !== null) {
            $queryParams['subtotal[between]'] = $subtotalBetween;
        }
        // query params
        if (is_array($subtotalGt)) {
            $subtotalGt = ObjectSerializer::serializeCollection($subtotalGt, '', true);
        }
        if ($subtotalGt !== null) {
            $queryParams['subtotal[gt]'] = $subtotalGt;
        }
        // query params
        if (is_array($subtotalGte)) {
            $subtotalGte = ObjectSerializer::serializeCollection($subtotalGte, '', true);
        }
        if ($subtotalGte !== null) {
            $queryParams['subtotal[gte]'] = $subtotalGte;
        }
        // query params
        if (is_array($subtotalLt)) {
            $subtotalLt = ObjectSerializer::serializeCollection($subtotalLt, '', true);
        }
        if ($subtotalLt !== null) {
            $queryParams['subtotal[lt]'] = $subtotalLt;
        }
        // query params
        if (is_array($subtotalLte)) {
            $subtotalLte = ObjectSerializer::serializeCollection($subtotalLte, '', true);
        }
        if ($subtotalLte !== null) {
            $queryParams['subtotal[lte]'] = $subtotalLte;
        }
        // query params
        if (is_array($totalBetween)) {
            $totalBetween = ObjectSerializer::serializeCollection($totalBetween, '', true);
        }
        if ($totalBetween !== null) {
            $queryParams['total[between]'] = $totalBetween;
        }
        // query params
        if (is_array($totalGt)) {
            $totalGt = ObjectSerializer::serializeCollection($totalGt, '', true);
        }
        if ($totalGt !== null) {
            $queryParams['total[gt]'] = $totalGt;
        }
        // query params
        if (is_array($totalGte)) {
            $totalGte = ObjectSerializer::serializeCollection($totalGte, '', true);
        }
        if ($totalGte !== null) {
            $queryParams['total[gte]'] = $totalGte;
        }
        // query params
        if (is_array($totalLt)) {
            $totalLt = ObjectSerializer::serializeCollection($totalLt, '', true);
        }
        if ($totalLt !== null) {
            $queryParams['total[lt]'] = $totalLt;
        }
        // query params
        if (is_array($totalLte)) {
            $totalLte = ObjectSerializer::serializeCollection($totalLte, '', true);
        }
        if ($totalLte !== null) {
            $queryParams['total[lte]'] = $totalLte;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresource
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id id (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderTrackingNumber orderTrackingNumber (optional)
     * @param  string $orderTrackingStatus orderTrackingStatus (optional)
     * @param  string $orderShipmentStatusCode orderShipmentStatusCode (optional)
     * @param  string $orderOriginCarrier orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippedAt orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry orderOriginCountry (optional)
     * @param  string $orderDestinationCountry orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderPhoneNumber orderPhoneNumber (optional)
     * @param  string $orderDaysInTransit orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore orderReviewTotalScore (optional)
     * @param  string $orderAddressAddressLine1 orderAddressAddressLine1 (optional)
     * @param  string $orderAddressAddressLine2 orderAddressAddressLine2 (optional)
     * @param  string $orderAddressCity orderAddressCity (optional)
     * @param  string $orderAddressCompany orderAddressCompany (optional)
     * @param  string $orderAddressCountryIso2 orderAddressCountryIso2 (optional)
     * @param  string $orderAddressFirstName orderAddressFirstName (optional)
     * @param  string $orderAddressLastName orderAddressLastName (optional)
     * @param  string $orderAddressPostcode orderAddressPostcode (optional)
     * @param  string $orderAddressState orderAddressState (optional)
     * @param  string $orderNumbers orderNumbers (optional)
     * @param  string[] $orderNumbers2 orderNumbers2 (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter expectedDeliveryDateStrictlyAfter (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $trackingNumber trackingNumber (optional)
     * @param  string $trackingStatus trackingStatus (optional)
     * @param  string[] $trackingStatus2 trackingStatus2 (optional)
     * @param  string $shipmentStatusCode shipmentStatusCode (optional)
     * @param  string[] $shipmentStatusCode2 shipmentStatusCode2 (optional)
     * @param  string $originCarrier originCarrier (optional)
     * @param  string[] $originCarrier2 originCarrier2 (optional)
     * @param  string $destinationCarrier destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 destinationCarrier2 (optional)
     * @param  string $originCountry originCountry (optional)
     * @param  string $originCountryIso2 originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 originCountryIso3 (optional)
     * @param  string $destinationCountry destinationCountry (optional)
     * @param  string $destinationCountryIso2 destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 destinationCountryIso3 (optional)
     * @param  string $email email (optional)
     * @param  string $phoneNumber phoneNumber (optional)
     * @param  string $addressAddressLine1 addressAddressLine1 (optional)
     * @param  string $addressAddressLine2 addressAddressLine2 (optional)
     * @param  string $addressCity addressCity (optional)
     * @param  string $addressCompany addressCompany (optional)
     * @param  string $addressCountryIso2 addressCountryIso2 (optional)
     * @param  string[] $addressCountryIso3 addressCountryIso3 (optional)
     * @param  string $addressFirstName addressFirstName (optional)
     * @param  string $addressLastName addressLastName (optional)
     * @param  string $addressPostcode addressPostcode (optional)
     * @param  string $addressState addressState (optional)
     * @param  int $daysInTransit daysInTransit (optional)
     * @param  int[] $daysInTransit2 daysInTransit2 (optional)
     * @param  string $daysInTransitBetween daysInTransitBetween (optional)
     * @param  string $daysInTransitGt daysInTransitGt (optional)
     * @param  string $daysInTransitGte daysInTransitGte (optional)
     * @param  string $daysInTransitLt daysInTransitLt (optional)
     * @param  string $daysInTransitLte daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\ShipmentGet[]
     */
    public function apiWorkspacesShipmentsGetSubresource($id, $orderId = null, $orderTrackingNumber = null, $orderTrackingStatus = null, $orderShipmentStatusCode = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderPhoneNumber = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderAddressAddressLine1 = null, $orderAddressAddressLine2 = null, $orderAddressCity = null, $orderAddressCompany = null, $orderAddressCountryIso2 = null, $orderAddressFirstName = null, $orderAddressLastName = null, $orderAddressPostcode = null, $orderAddressState = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $trackingStatus = null, $trackingStatus2 = null, $shipmentStatusCode = null, $shipmentStatusCode2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $phoneNumber = null, $addressAddressLine1 = null, $addressAddressLine2 = null, $addressCity = null, $addressCompany = null, $addressCountryIso2 = null, $addressCountryIso3 = null, $addressFirstName = null, $addressLastName = null, $addressPostcode = null, $addressState = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $orderId, $orderTrackingNumber, $orderTrackingStatus, $orderShipmentStatusCode, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderPhoneNumber, $orderDaysInTransit, $orderReviewTotalScore, $orderAddressAddressLine1, $orderAddressAddressLine2, $orderAddressCity, $orderAddressCompany, $orderAddressCountryIso2, $orderAddressFirstName, $orderAddressLastName, $orderAddressPostcode, $orderAddressState, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $trackingStatus, $trackingStatus2, $shipmentStatusCode, $shipmentStatusCode2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $phoneNumber, $addressAddressLine1, $addressAddressLine2, $addressCity, $addressCompany, $addressCountryIso2, $addressCountryIso3, $addressFirstName, $addressLastName, $addressPostcode, $addressState, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderTrackingStatus (optional)
     * @param  string $orderShipmentStatusCode (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderAddressAddressLine1 (optional)
     * @param  string $orderAddressAddressLine2 (optional)
     * @param  string $orderAddressCity (optional)
     * @param  string $orderAddressCompany (optional)
     * @param  string $orderAddressCountryIso2 (optional)
     * @param  string $orderAddressFirstName (optional)
     * @param  string $orderAddressLastName (optional)
     * @param  string $orderAddressPostcode (optional)
     * @param  string $orderAddressState (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $trackingStatus (optional)
     * @param  string[] $trackingStatus2 (optional)
     * @param  string $shipmentStatusCode (optional)
     * @param  string[] $shipmentStatusCode2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $addressAddressLine1 (optional)
     * @param  string $addressAddressLine2 (optional)
     * @param  string $addressCity (optional)
     * @param  string $addressCompany (optional)
     * @param  string $addressCountryIso2 (optional)
     * @param  string[] $addressCountryIso3 (optional)
     * @param  string $addressFirstName (optional)
     * @param  string $addressLastName (optional)
     * @param  string $addressPostcode (optional)
     * @param  string $addressState (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\ShipmentGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesShipmentsGetSubresourceWithHttpInfo($id, $orderId = null, $orderTrackingNumber = null, $orderTrackingStatus = null, $orderShipmentStatusCode = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderPhoneNumber = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderAddressAddressLine1 = null, $orderAddressAddressLine2 = null, $orderAddressCity = null, $orderAddressCompany = null, $orderAddressCountryIso2 = null, $orderAddressFirstName = null, $orderAddressLastName = null, $orderAddressPostcode = null, $orderAddressState = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $trackingStatus = null, $trackingStatus2 = null, $shipmentStatusCode = null, $shipmentStatusCode2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $phoneNumber = null, $addressAddressLine1 = null, $addressAddressLine2 = null, $addressCity = null, $addressCompany = null, $addressCountryIso2 = null, $addressCountryIso3 = null, $addressFirstName = null, $addressLastName = null, $addressPostcode = null, $addressState = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiWorkspacesShipmentsGetSubresourceRequest($id, $orderId, $orderTrackingNumber, $orderTrackingStatus, $orderShipmentStatusCode, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderPhoneNumber, $orderDaysInTransit, $orderReviewTotalScore, $orderAddressAddressLine1, $orderAddressAddressLine2, $orderAddressCity, $orderAddressCompany, $orderAddressCountryIso2, $orderAddressFirstName, $orderAddressLastName, $orderAddressPostcode, $orderAddressState, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $trackingStatus, $trackingStatus2, $shipmentStatusCode, $shipmentStatusCode2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $phoneNumber, $addressAddressLine1, $addressAddressLine2, $addressCity, $addressCompany, $addressCountryIso2, $addressCountryIso3, $addressFirstName, $addressLastName, $addressPostcode, $addressState, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\ShipmentGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\ShipmentGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\ShipmentGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresourceAsync
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderTrackingStatus (optional)
     * @param  string $orderShipmentStatusCode (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderAddressAddressLine1 (optional)
     * @param  string $orderAddressAddressLine2 (optional)
     * @param  string $orderAddressCity (optional)
     * @param  string $orderAddressCompany (optional)
     * @param  string $orderAddressCountryIso2 (optional)
     * @param  string $orderAddressFirstName (optional)
     * @param  string $orderAddressLastName (optional)
     * @param  string $orderAddressPostcode (optional)
     * @param  string $orderAddressState (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $trackingStatus (optional)
     * @param  string[] $trackingStatus2 (optional)
     * @param  string $shipmentStatusCode (optional)
     * @param  string[] $shipmentStatusCode2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $addressAddressLine1 (optional)
     * @param  string $addressAddressLine2 (optional)
     * @param  string $addressCity (optional)
     * @param  string $addressCompany (optional)
     * @param  string $addressCountryIso2 (optional)
     * @param  string[] $addressCountryIso3 (optional)
     * @param  string $addressFirstName (optional)
     * @param  string $addressLastName (optional)
     * @param  string $addressPostcode (optional)
     * @param  string $addressState (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesShipmentsGetSubresourceAsync($id, $orderId = null, $orderTrackingNumber = null, $orderTrackingStatus = null, $orderShipmentStatusCode = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderPhoneNumber = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderAddressAddressLine1 = null, $orderAddressAddressLine2 = null, $orderAddressCity = null, $orderAddressCompany = null, $orderAddressCountryIso2 = null, $orderAddressFirstName = null, $orderAddressLastName = null, $orderAddressPostcode = null, $orderAddressState = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $trackingStatus = null, $trackingStatus2 = null, $shipmentStatusCode = null, $shipmentStatusCode2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $phoneNumber = null, $addressAddressLine1 = null, $addressAddressLine2 = null, $addressCity = null, $addressCompany = null, $addressCountryIso2 = null, $addressCountryIso3 = null, $addressFirstName = null, $addressLastName = null, $addressPostcode = null, $addressState = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $orderId, $orderTrackingNumber, $orderTrackingStatus, $orderShipmentStatusCode, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderPhoneNumber, $orderDaysInTransit, $orderReviewTotalScore, $orderAddressAddressLine1, $orderAddressAddressLine2, $orderAddressCity, $orderAddressCompany, $orderAddressCountryIso2, $orderAddressFirstName, $orderAddressLastName, $orderAddressPostcode, $orderAddressState, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $trackingStatus, $trackingStatus2, $shipmentStatusCode, $shipmentStatusCode2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $phoneNumber, $addressAddressLine1, $addressAddressLine2, $addressCity, $addressCompany, $addressCountryIso2, $addressCountryIso3, $addressFirstName, $addressLastName, $addressPostcode, $addressState, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Shipment resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderTrackingStatus (optional)
     * @param  string $orderShipmentStatusCode (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderAddressAddressLine1 (optional)
     * @param  string $orderAddressAddressLine2 (optional)
     * @param  string $orderAddressCity (optional)
     * @param  string $orderAddressCompany (optional)
     * @param  string $orderAddressCountryIso2 (optional)
     * @param  string $orderAddressFirstName (optional)
     * @param  string $orderAddressLastName (optional)
     * @param  string $orderAddressPostcode (optional)
     * @param  string $orderAddressState (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $trackingStatus (optional)
     * @param  string[] $trackingStatus2 (optional)
     * @param  string $shipmentStatusCode (optional)
     * @param  string[] $shipmentStatusCode2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $addressAddressLine1 (optional)
     * @param  string $addressAddressLine2 (optional)
     * @param  string $addressCity (optional)
     * @param  string $addressCompany (optional)
     * @param  string $addressCountryIso2 (optional)
     * @param  string[] $addressCountryIso3 (optional)
     * @param  string $addressFirstName (optional)
     * @param  string $addressLastName (optional)
     * @param  string $addressPostcode (optional)
     * @param  string $addressState (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesShipmentsGetSubresourceAsyncWithHttpInfo($id, $orderId = null, $orderTrackingNumber = null, $orderTrackingStatus = null, $orderShipmentStatusCode = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderPhoneNumber = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderAddressAddressLine1 = null, $orderAddressAddressLine2 = null, $orderAddressCity = null, $orderAddressCompany = null, $orderAddressCountryIso2 = null, $orderAddressFirstName = null, $orderAddressLastName = null, $orderAddressPostcode = null, $orderAddressState = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $trackingStatus = null, $trackingStatus2 = null, $shipmentStatusCode = null, $shipmentStatusCode2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $phoneNumber = null, $addressAddressLine1 = null, $addressAddressLine2 = null, $addressCity = null, $addressCompany = null, $addressCountryIso2 = null, $addressCountryIso3 = null, $addressFirstName = null, $addressLastName = null, $addressPostcode = null, $addressState = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\ShipmentGet[]';
        $request = $this->apiWorkspacesShipmentsGetSubresourceRequest($id, $orderId, $orderTrackingNumber, $orderTrackingStatus, $orderShipmentStatusCode, $orderOriginCarrier, $orderDestinationCarrier, $orderCreatedAt, $orderUpdatedAt, $orderShippedAt, $orderLastStatusUpdate, $orderExpectedDeliveryDate, $orderOriginCountry, $orderDestinationCountry, $orderOriginCountryIso2, $orderDestinationCountryIso2, $orderEmail, $orderPhoneNumber, $orderDaysInTransit, $orderReviewTotalScore, $orderAddressAddressLine1, $orderAddressAddressLine2, $orderAddressCity, $orderAddressCompany, $orderAddressCountryIso2, $orderAddressFirstName, $orderAddressLastName, $orderAddressPostcode, $orderAddressState, $orderNumbers, $orderNumbers2, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $shippedAtBefore, $shippedAtStrictlyBefore, $shippedAtAfter, $shippedAtStrictlyAfter, $lastStatusUpdateBefore, $lastStatusUpdateStrictlyBefore, $lastStatusUpdateAfter, $lastStatusUpdateStrictlyAfter, $expectedDeliveryDateBefore, $expectedDeliveryDateStrictlyBefore, $expectedDeliveryDateAfter, $expectedDeliveryDateStrictlyAfter, $id2, $trackingNumber, $trackingStatus, $trackingStatus2, $shipmentStatusCode, $shipmentStatusCode2, $originCarrier, $originCarrier2, $destinationCarrier, $destinationCarrier2, $originCountry, $originCountryIso2, $originCountryIso3, $destinationCountry, $destinationCountryIso2, $destinationCountryIso3, $email, $phoneNumber, $addressAddressLine1, $addressAddressLine2, $addressCity, $addressCompany, $addressCountryIso2, $addressCountryIso3, $addressFirstName, $addressLastName, $addressPostcode, $addressState, $daysInTransit, $daysInTransit2, $daysInTransitBetween, $daysInTransitGt, $daysInTransitGte, $daysInTransitLt, $daysInTransitLte, $reviewTotalScoreBetween, $reviewTotalScoreGt, $reviewTotalScoreGte, $reviewTotalScoreLt, $reviewTotalScoreLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesShipmentsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderTrackingNumber (optional)
     * @param  string $orderTrackingStatus (optional)
     * @param  string $orderShipmentStatusCode (optional)
     * @param  string $orderOriginCarrier (optional)
     * @param  string $orderDestinationCarrier (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippedAt (optional)
     * @param  string $orderLastStatusUpdate (optional)
     * @param  string $orderExpectedDeliveryDate (optional)
     * @param  string $orderOriginCountry (optional)
     * @param  string $orderDestinationCountry (optional)
     * @param  string $orderOriginCountryIso2 (optional)
     * @param  string $orderDestinationCountryIso2 (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderDaysInTransit (optional)
     * @param  string $orderReviewTotalScore (optional)
     * @param  string $orderAddressAddressLine1 (optional)
     * @param  string $orderAddressAddressLine2 (optional)
     * @param  string $orderAddressCity (optional)
     * @param  string $orderAddressCompany (optional)
     * @param  string $orderAddressCountryIso2 (optional)
     * @param  string $orderAddressFirstName (optional)
     * @param  string $orderAddressLastName (optional)
     * @param  string $orderAddressPostcode (optional)
     * @param  string $orderAddressState (optional)
     * @param  string $orderNumbers (optional)
     * @param  string[] $orderNumbers2 (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $shippedAtBefore (optional)
     * @param  string $shippedAtStrictlyBefore (optional)
     * @param  string $shippedAtAfter (optional)
     * @param  string $shippedAtStrictlyAfter (optional)
     * @param  string $lastStatusUpdateBefore (optional)
     * @param  string $lastStatusUpdateStrictlyBefore (optional)
     * @param  string $lastStatusUpdateAfter (optional)
     * @param  string $lastStatusUpdateStrictlyAfter (optional)
     * @param  string $expectedDeliveryDateBefore (optional)
     * @param  string $expectedDeliveryDateStrictlyBefore (optional)
     * @param  string $expectedDeliveryDateAfter (optional)
     * @param  string $expectedDeliveryDateStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $trackingNumber (optional)
     * @param  string $trackingStatus (optional)
     * @param  string[] $trackingStatus2 (optional)
     * @param  string $shipmentStatusCode (optional)
     * @param  string[] $shipmentStatusCode2 (optional)
     * @param  string $originCarrier (optional)
     * @param  string[] $originCarrier2 (optional)
     * @param  string $destinationCarrier (optional)
     * @param  string[] $destinationCarrier2 (optional)
     * @param  string $originCountry (optional)
     * @param  string $originCountryIso2 (optional)
     * @param  string[] $originCountryIso3 (optional)
     * @param  string $destinationCountry (optional)
     * @param  string $destinationCountryIso2 (optional)
     * @param  string[] $destinationCountryIso3 (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $addressAddressLine1 (optional)
     * @param  string $addressAddressLine2 (optional)
     * @param  string $addressCity (optional)
     * @param  string $addressCompany (optional)
     * @param  string $addressCountryIso2 (optional)
     * @param  string[] $addressCountryIso3 (optional)
     * @param  string $addressFirstName (optional)
     * @param  string $addressLastName (optional)
     * @param  string $addressPostcode (optional)
     * @param  string $addressState (optional)
     * @param  int $daysInTransit (optional)
     * @param  int[] $daysInTransit2 (optional)
     * @param  string $daysInTransitBetween (optional)
     * @param  string $daysInTransitGt (optional)
     * @param  string $daysInTransitGte (optional)
     * @param  string $daysInTransitLt (optional)
     * @param  string $daysInTransitLte (optional)
     * @param  string $reviewTotalScoreBetween (optional)
     * @param  string $reviewTotalScoreGt (optional)
     * @param  string $reviewTotalScoreGte (optional)
     * @param  string $reviewTotalScoreLt (optional)
     * @param  string $reviewTotalScoreLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesShipmentsGetSubresourceRequest($id, $orderId = null, $orderTrackingNumber = null, $orderTrackingStatus = null, $orderShipmentStatusCode = null, $orderOriginCarrier = null, $orderDestinationCarrier = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippedAt = null, $orderLastStatusUpdate = null, $orderExpectedDeliveryDate = null, $orderOriginCountry = null, $orderDestinationCountry = null, $orderOriginCountryIso2 = null, $orderDestinationCountryIso2 = null, $orderEmail = null, $orderPhoneNumber = null, $orderDaysInTransit = null, $orderReviewTotalScore = null, $orderAddressAddressLine1 = null, $orderAddressAddressLine2 = null, $orderAddressCity = null, $orderAddressCompany = null, $orderAddressCountryIso2 = null, $orderAddressFirstName = null, $orderAddressLastName = null, $orderAddressPostcode = null, $orderAddressState = null, $orderNumbers = null, $orderNumbers2 = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $shippedAtBefore = null, $shippedAtStrictlyBefore = null, $shippedAtAfter = null, $shippedAtStrictlyAfter = null, $lastStatusUpdateBefore = null, $lastStatusUpdateStrictlyBefore = null, $lastStatusUpdateAfter = null, $lastStatusUpdateStrictlyAfter = null, $expectedDeliveryDateBefore = null, $expectedDeliveryDateStrictlyBefore = null, $expectedDeliveryDateAfter = null, $expectedDeliveryDateStrictlyAfter = null, $id2 = null, $trackingNumber = null, $trackingStatus = null, $trackingStatus2 = null, $shipmentStatusCode = null, $shipmentStatusCode2 = null, $originCarrier = null, $originCarrier2 = null, $destinationCarrier = null, $destinationCarrier2 = null, $originCountry = null, $originCountryIso2 = null, $originCountryIso3 = null, $destinationCountry = null, $destinationCountryIso2 = null, $destinationCountryIso3 = null, $email = null, $phoneNumber = null, $addressAddressLine1 = null, $addressAddressLine2 = null, $addressCity = null, $addressCompany = null, $addressCountryIso2 = null, $addressCountryIso3 = null, $addressFirstName = null, $addressLastName = null, $addressPostcode = null, $addressState = null, $daysInTransit = null, $daysInTransit2 = null, $daysInTransitBetween = null, $daysInTransitGt = null, $daysInTransitGte = null, $daysInTransitLt = null, $daysInTransitLte = null, $reviewTotalScoreBetween = null, $reviewTotalScoreGt = null, $reviewTotalScoreGte = null, $reviewTotalScoreLt = null, $reviewTotalScoreLte = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesShipmentsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($orderId)) {
            $orderId = ObjectSerializer::serializeCollection($orderId, '', true);
        }
        if ($orderId !== null) {
            $queryParams['order[id]'] = $orderId;
        }
        // query params
        if (is_array($orderTrackingNumber)) {
            $orderTrackingNumber = ObjectSerializer::serializeCollection($orderTrackingNumber, '', true);
        }
        if ($orderTrackingNumber !== null) {
            $queryParams['order[trackingNumber]'] = $orderTrackingNumber;
        }
        // query params
        if (is_array($orderTrackingStatus)) {
            $orderTrackingStatus = ObjectSerializer::serializeCollection($orderTrackingStatus, '', true);
        }
        if ($orderTrackingStatus !== null) {
            $queryParams['order[trackingStatus]'] = $orderTrackingStatus;
        }
        // query params
        if (is_array($orderShipmentStatusCode)) {
            $orderShipmentStatusCode = ObjectSerializer::serializeCollection($orderShipmentStatusCode, '', true);
        }
        if ($orderShipmentStatusCode !== null) {
            $queryParams['order[shipmentStatus.code]'] = $orderShipmentStatusCode;
        }
        // query params
        if (is_array($orderOriginCarrier)) {
            $orderOriginCarrier = ObjectSerializer::serializeCollection($orderOriginCarrier, '', true);
        }
        if ($orderOriginCarrier !== null) {
            $queryParams['order[originCarrier]'] = $orderOriginCarrier;
        }
        // query params
        if (is_array($orderDestinationCarrier)) {
            $orderDestinationCarrier = ObjectSerializer::serializeCollection($orderDestinationCarrier, '', true);
        }
        if ($orderDestinationCarrier !== null) {
            $queryParams['order[destinationCarrier]'] = $orderDestinationCarrier;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($orderUpdatedAt)) {
            $orderUpdatedAt = ObjectSerializer::serializeCollection($orderUpdatedAt, '', true);
        }
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = $orderUpdatedAt;
        }
        // query params
        if (is_array($orderShippedAt)) {
            $orderShippedAt = ObjectSerializer::serializeCollection($orderShippedAt, '', true);
        }
        if ($orderShippedAt !== null) {
            $queryParams['order[shippedAt]'] = $orderShippedAt;
        }
        // query params
        if (is_array($orderLastStatusUpdate)) {
            $orderLastStatusUpdate = ObjectSerializer::serializeCollection($orderLastStatusUpdate, '', true);
        }
        if ($orderLastStatusUpdate !== null) {
            $queryParams['order[lastStatusUpdate]'] = $orderLastStatusUpdate;
        }
        // query params
        if (is_array($orderExpectedDeliveryDate)) {
            $orderExpectedDeliveryDate = ObjectSerializer::serializeCollection($orderExpectedDeliveryDate, '', true);
        }
        if ($orderExpectedDeliveryDate !== null) {
            $queryParams['order[expectedDeliveryDate]'] = $orderExpectedDeliveryDate;
        }
        // query params
        if (is_array($orderOriginCountry)) {
            $orderOriginCountry = ObjectSerializer::serializeCollection($orderOriginCountry, '', true);
        }
        if ($orderOriginCountry !== null) {
            $queryParams['order[originCountry]'] = $orderOriginCountry;
        }
        // query params
        if (is_array($orderDestinationCountry)) {
            $orderDestinationCountry = ObjectSerializer::serializeCollection($orderDestinationCountry, '', true);
        }
        if ($orderDestinationCountry !== null) {
            $queryParams['order[destinationCountry]'] = $orderDestinationCountry;
        }
        // query params
        if (is_array($orderOriginCountryIso2)) {
            $orderOriginCountryIso2 = ObjectSerializer::serializeCollection($orderOriginCountryIso2, '', true);
        }
        if ($orderOriginCountryIso2 !== null) {
            $queryParams['order[originCountryIso2]'] = $orderOriginCountryIso2;
        }
        // query params
        if (is_array($orderDestinationCountryIso2)) {
            $orderDestinationCountryIso2 = ObjectSerializer::serializeCollection($orderDestinationCountryIso2, '', true);
        }
        if ($orderDestinationCountryIso2 !== null) {
            $queryParams['order[destinationCountryIso2]'] = $orderDestinationCountryIso2;
        }
        // query params
        if (is_array($orderEmail)) {
            $orderEmail = ObjectSerializer::serializeCollection($orderEmail, '', true);
        }
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = $orderEmail;
        }
        // query params
        if (is_array($orderPhoneNumber)) {
            $orderPhoneNumber = ObjectSerializer::serializeCollection($orderPhoneNumber, '', true);
        }
        if ($orderPhoneNumber !== null) {
            $queryParams['order[phoneNumber]'] = $orderPhoneNumber;
        }
        // query params
        if (is_array($orderDaysInTransit)) {
            $orderDaysInTransit = ObjectSerializer::serializeCollection($orderDaysInTransit, '', true);
        }
        if ($orderDaysInTransit !== null) {
            $queryParams['order[daysInTransit]'] = $orderDaysInTransit;
        }
        // query params
        if (is_array($orderReviewTotalScore)) {
            $orderReviewTotalScore = ObjectSerializer::serializeCollection($orderReviewTotalScore, '', true);
        }
        if ($orderReviewTotalScore !== null) {
            $queryParams['order[reviewTotalScore]'] = $orderReviewTotalScore;
        }
        // query params
        if (is_array($orderAddressAddressLine1)) {
            $orderAddressAddressLine1 = ObjectSerializer::serializeCollection($orderAddressAddressLine1, '', true);
        }
        if ($orderAddressAddressLine1 !== null) {
            $queryParams['order[address.addressLine1]'] = $orderAddressAddressLine1;
        }
        // query params
        if (is_array($orderAddressAddressLine2)) {
            $orderAddressAddressLine2 = ObjectSerializer::serializeCollection($orderAddressAddressLine2, '', true);
        }
        if ($orderAddressAddressLine2 !== null) {
            $queryParams['order[address.addressLine2]'] = $orderAddressAddressLine2;
        }
        // query params
        if (is_array($orderAddressCity)) {
            $orderAddressCity = ObjectSerializer::serializeCollection($orderAddressCity, '', true);
        }
        if ($orderAddressCity !== null) {
            $queryParams['order[address.city]'] = $orderAddressCity;
        }
        // query params
        if (is_array($orderAddressCompany)) {
            $orderAddressCompany = ObjectSerializer::serializeCollection($orderAddressCompany, '', true);
        }
        if ($orderAddressCompany !== null) {
            $queryParams['order[address.company]'] = $orderAddressCompany;
        }
        // query params
        if (is_array($orderAddressCountryIso2)) {
            $orderAddressCountryIso2 = ObjectSerializer::serializeCollection($orderAddressCountryIso2, '', true);
        }
        if ($orderAddressCountryIso2 !== null) {
            $queryParams['order[address.countryIso2]'] = $orderAddressCountryIso2;
        }
        // query params
        if (is_array($orderAddressFirstName)) {
            $orderAddressFirstName = ObjectSerializer::serializeCollection($orderAddressFirstName, '', true);
        }
        if ($orderAddressFirstName !== null) {
            $queryParams['order[address.firstName]'] = $orderAddressFirstName;
        }
        // query params
        if (is_array($orderAddressLastName)) {
            $orderAddressLastName = ObjectSerializer::serializeCollection($orderAddressLastName, '', true);
        }
        if ($orderAddressLastName !== null) {
            $queryParams['order[address.lastName]'] = $orderAddressLastName;
        }
        // query params
        if (is_array($orderAddressPostcode)) {
            $orderAddressPostcode = ObjectSerializer::serializeCollection($orderAddressPostcode, '', true);
        }
        if ($orderAddressPostcode !== null) {
            $queryParams['order[address.postcode]'] = $orderAddressPostcode;
        }
        // query params
        if (is_array($orderAddressState)) {
            $orderAddressState = ObjectSerializer::serializeCollection($orderAddressState, '', true);
        }
        if ($orderAddressState !== null) {
            $queryParams['order[address.state]'] = $orderAddressState;
        }
        // query params
        if (is_array($orderNumbers)) {
            $orderNumbers = ObjectSerializer::serializeCollection($orderNumbers, '', true);
        }
        if ($orderNumbers !== null) {
            $queryParams['orderNumbers'] = $orderNumbers;
        }
        // query params
        if (is_array($orderNumbers2)) {
            $orderNumbers2 = ObjectSerializer::serializeCollection($orderNumbers2, 'form', true);
        }
        if ($orderNumbers2 !== null) {
            $queryParams['orderNumbers[]'] = $orderNumbers2;
        }
        // query params
        if (is_array($createdAtBefore)) {
            $createdAtBefore = ObjectSerializer::serializeCollection($createdAtBefore, '', true);
        }
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = $createdAtBefore;
        }
        // query params
        if (is_array($createdAtStrictlyBefore)) {
            $createdAtStrictlyBefore = ObjectSerializer::serializeCollection($createdAtStrictlyBefore, '', true);
        }
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = $createdAtStrictlyBefore;
        }
        // query params
        if (is_array($createdAtAfter)) {
            $createdAtAfter = ObjectSerializer::serializeCollection($createdAtAfter, '', true);
        }
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = $createdAtAfter;
        }
        // query params
        if (is_array($createdAtStrictlyAfter)) {
            $createdAtStrictlyAfter = ObjectSerializer::serializeCollection($createdAtStrictlyAfter, '', true);
        }
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = $createdAtStrictlyAfter;
        }
        // query params
        if (is_array($updatedAtBefore)) {
            $updatedAtBefore = ObjectSerializer::serializeCollection($updatedAtBefore, '', true);
        }
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = $updatedAtBefore;
        }
        // query params
        if (is_array($updatedAtStrictlyBefore)) {
            $updatedAtStrictlyBefore = ObjectSerializer::serializeCollection($updatedAtStrictlyBefore, '', true);
        }
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = $updatedAtStrictlyBefore;
        }
        // query params
        if (is_array($updatedAtAfter)) {
            $updatedAtAfter = ObjectSerializer::serializeCollection($updatedAtAfter, '', true);
        }
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = $updatedAtAfter;
        }
        // query params
        if (is_array($updatedAtStrictlyAfter)) {
            $updatedAtStrictlyAfter = ObjectSerializer::serializeCollection($updatedAtStrictlyAfter, '', true);
        }
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = $updatedAtStrictlyAfter;
        }
        // query params
        if (is_array($shippedAtBefore)) {
            $shippedAtBefore = ObjectSerializer::serializeCollection($shippedAtBefore, '', true);
        }
        if ($shippedAtBefore !== null) {
            $queryParams['shippedAt[before]'] = $shippedAtBefore;
        }
        // query params
        if (is_array($shippedAtStrictlyBefore)) {
            $shippedAtStrictlyBefore = ObjectSerializer::serializeCollection($shippedAtStrictlyBefore, '', true);
        }
        if ($shippedAtStrictlyBefore !== null) {
            $queryParams['shippedAt[strictly_before]'] = $shippedAtStrictlyBefore;
        }
        // query params
        if (is_array($shippedAtAfter)) {
            $shippedAtAfter = ObjectSerializer::serializeCollection($shippedAtAfter, '', true);
        }
        if ($shippedAtAfter !== null) {
            $queryParams['shippedAt[after]'] = $shippedAtAfter;
        }
        // query params
        if (is_array($shippedAtStrictlyAfter)) {
            $shippedAtStrictlyAfter = ObjectSerializer::serializeCollection($shippedAtStrictlyAfter, '', true);
        }
        if ($shippedAtStrictlyAfter !== null) {
            $queryParams['shippedAt[strictly_after]'] = $shippedAtStrictlyAfter;
        }
        // query params
        if (is_array($lastStatusUpdateBefore)) {
            $lastStatusUpdateBefore = ObjectSerializer::serializeCollection($lastStatusUpdateBefore, '', true);
        }
        if ($lastStatusUpdateBefore !== null) {
            $queryParams['lastStatusUpdate[before]'] = $lastStatusUpdateBefore;
        }
        // query params
        if (is_array($lastStatusUpdateStrictlyBefore)) {
            $lastStatusUpdateStrictlyBefore = ObjectSerializer::serializeCollection($lastStatusUpdateStrictlyBefore, '', true);
        }
        if ($lastStatusUpdateStrictlyBefore !== null) {
            $queryParams['lastStatusUpdate[strictly_before]'] = $lastStatusUpdateStrictlyBefore;
        }
        // query params
        if (is_array($lastStatusUpdateAfter)) {
            $lastStatusUpdateAfter = ObjectSerializer::serializeCollection($lastStatusUpdateAfter, '', true);
        }
        if ($lastStatusUpdateAfter !== null) {
            $queryParams['lastStatusUpdate[after]'] = $lastStatusUpdateAfter;
        }
        // query params
        if (is_array($lastStatusUpdateStrictlyAfter)) {
            $lastStatusUpdateStrictlyAfter = ObjectSerializer::serializeCollection($lastStatusUpdateStrictlyAfter, '', true);
        }
        if ($lastStatusUpdateStrictlyAfter !== null) {
            $queryParams['lastStatusUpdate[strictly_after]'] = $lastStatusUpdateStrictlyAfter;
        }
        // query params
        if (is_array($expectedDeliveryDateBefore)) {
            $expectedDeliveryDateBefore = ObjectSerializer::serializeCollection($expectedDeliveryDateBefore, '', true);
        }
        if ($expectedDeliveryDateBefore !== null) {
            $queryParams['expectedDeliveryDate[before]'] = $expectedDeliveryDateBefore;
        }
        // query params
        if (is_array($expectedDeliveryDateStrictlyBefore)) {
            $expectedDeliveryDateStrictlyBefore = ObjectSerializer::serializeCollection($expectedDeliveryDateStrictlyBefore, '', true);
        }
        if ($expectedDeliveryDateStrictlyBefore !== null) {
            $queryParams['expectedDeliveryDate[strictly_before]'] = $expectedDeliveryDateStrictlyBefore;
        }
        // query params
        if (is_array($expectedDeliveryDateAfter)) {
            $expectedDeliveryDateAfter = ObjectSerializer::serializeCollection($expectedDeliveryDateAfter, '', true);
        }
        if ($expectedDeliveryDateAfter !== null) {
            $queryParams['expectedDeliveryDate[after]'] = $expectedDeliveryDateAfter;
        }
        // query params
        if (is_array($expectedDeliveryDateStrictlyAfter)) {
            $expectedDeliveryDateStrictlyAfter = ObjectSerializer::serializeCollection($expectedDeliveryDateStrictlyAfter, '', true);
        }
        if ($expectedDeliveryDateStrictlyAfter !== null) {
            $queryParams['expectedDeliveryDate[strictly_after]'] = $expectedDeliveryDateStrictlyAfter;
        }
        // query params
        if ($id2 !== null) {
            if('form' === 'form' && is_array($id2)) {
                foreach($id2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id2;
            }
        }
        // query params
        if (is_array($trackingNumber)) {
            $trackingNumber = ObjectSerializer::serializeCollection($trackingNumber, '', true);
        }
        if ($trackingNumber !== null) {
            $queryParams['trackingNumber'] = $trackingNumber;
        }
        // query params
        if (is_array($trackingStatus)) {
            $trackingStatus = ObjectSerializer::serializeCollection($trackingStatus, '', true);
        }
        if ($trackingStatus !== null) {
            $queryParams['trackingStatus'] = $trackingStatus;
        }
        // query params
        if ($trackingStatus2 !== null) {
            if('form' === 'form' && is_array($trackingStatus2)) {
                foreach($trackingStatus2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['trackingStatus[]'] = $trackingStatus2;
            }
        }
        // query params
        if (is_array($shipmentStatusCode)) {
            $shipmentStatusCode = ObjectSerializer::serializeCollection($shipmentStatusCode, '', true);
        }
        if ($shipmentStatusCode !== null) {
            $queryParams['shipmentStatus.code'] = $shipmentStatusCode;
        }
        // query params
        if ($shipmentStatusCode2 !== null) {
            if('form' === 'form' && is_array($shipmentStatusCode2)) {
                foreach($shipmentStatusCode2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['shipmentStatus.code[]'] = $shipmentStatusCode2;
            }
        }
        // query params
        if (is_array($originCarrier)) {
            $originCarrier = ObjectSerializer::serializeCollection($originCarrier, '', true);
        }
        if ($originCarrier !== null) {
            $queryParams['originCarrier'] = $originCarrier;
        }
        // query params
        if ($originCarrier2 !== null) {
            if('form' === 'form' && is_array($originCarrier2)) {
                foreach($originCarrier2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originCarrier[]'] = $originCarrier2;
            }
        }
        // query params
        if (is_array($destinationCarrier)) {
            $destinationCarrier = ObjectSerializer::serializeCollection($destinationCarrier, '', true);
        }
        if ($destinationCarrier !== null) {
            $queryParams['destinationCarrier'] = $destinationCarrier;
        }
        // query params
        if ($destinationCarrier2 !== null) {
            if('form' === 'form' && is_array($destinationCarrier2)) {
                foreach($destinationCarrier2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['destinationCarrier[]'] = $destinationCarrier2;
            }
        }
        // query params
        if (is_array($originCountry)) {
            $originCountry = ObjectSerializer::serializeCollection($originCountry, '', true);
        }
        if ($originCountry !== null) {
            $queryParams['originCountry'] = $originCountry;
        }
        // query params
        if (is_array($originCountryIso2)) {
            $originCountryIso2 = ObjectSerializer::serializeCollection($originCountryIso2, '', true);
        }
        if ($originCountryIso2 !== null) {
            $queryParams['originCountryIso2'] = $originCountryIso2;
        }
        // query params
        if ($originCountryIso3 !== null) {
            if('form' === 'form' && is_array($originCountryIso3)) {
                foreach($originCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originCountryIso2[]'] = $originCountryIso3;
            }
        }
        // query params
        if (is_array($destinationCountry)) {
            $destinationCountry = ObjectSerializer::serializeCollection($destinationCountry, '', true);
        }
        if ($destinationCountry !== null) {
            $queryParams['destinationCountry'] = $destinationCountry;
        }
        // query params
        if (is_array($destinationCountryIso2)) {
            $destinationCountryIso2 = ObjectSerializer::serializeCollection($destinationCountryIso2, '', true);
        }
        if ($destinationCountryIso2 !== null) {
            $queryParams['destinationCountryIso2'] = $destinationCountryIso2;
        }
        // query params
        if ($destinationCountryIso3 !== null) {
            if('form' === 'form' && is_array($destinationCountryIso3)) {
                foreach($destinationCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['destinationCountryIso2[]'] = $destinationCountryIso3;
            }
        }
        // query params
        if (is_array($email)) {
            $email = ObjectSerializer::serializeCollection($email, '', true);
        }
        if ($email !== null) {
            $queryParams['email'] = $email;
        }
        // query params
        if (is_array($phoneNumber)) {
            $phoneNumber = ObjectSerializer::serializeCollection($phoneNumber, '', true);
        }
        if ($phoneNumber !== null) {
            $queryParams['phoneNumber'] = $phoneNumber;
        }
        // query params
        if (is_array($addressAddressLine1)) {
            $addressAddressLine1 = ObjectSerializer::serializeCollection($addressAddressLine1, '', true);
        }
        if ($addressAddressLine1 !== null) {
            $queryParams['address.addressLine1'] = $addressAddressLine1;
        }
        // query params
        if (is_array($addressAddressLine2)) {
            $addressAddressLine2 = ObjectSerializer::serializeCollection($addressAddressLine2, '', true);
        }
        if ($addressAddressLine2 !== null) {
            $queryParams['address.addressLine2'] = $addressAddressLine2;
        }
        // query params
        if (is_array($addressCity)) {
            $addressCity = ObjectSerializer::serializeCollection($addressCity, '', true);
        }
        if ($addressCity !== null) {
            $queryParams['address.city'] = $addressCity;
        }
        // query params
        if (is_array($addressCompany)) {
            $addressCompany = ObjectSerializer::serializeCollection($addressCompany, '', true);
        }
        if ($addressCompany !== null) {
            $queryParams['address.company'] = $addressCompany;
        }
        // query params
        if (is_array($addressCountryIso2)) {
            $addressCountryIso2 = ObjectSerializer::serializeCollection($addressCountryIso2, '', true);
        }
        if ($addressCountryIso2 !== null) {
            $queryParams['address.countryIso2'] = $addressCountryIso2;
        }
        // query params
        if ($addressCountryIso3 !== null) {
            if('form' === 'form' && is_array($addressCountryIso3)) {
                foreach($addressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['address.countryIso2[]'] = $addressCountryIso3;
            }
        }
        // query params
        if (is_array($addressFirstName)) {
            $addressFirstName = ObjectSerializer::serializeCollection($addressFirstName, '', true);
        }
        if ($addressFirstName !== null) {
            $queryParams['address.firstName'] = $addressFirstName;
        }
        // query params
        if (is_array($addressLastName)) {
            $addressLastName = ObjectSerializer::serializeCollection($addressLastName, '', true);
        }
        if ($addressLastName !== null) {
            $queryParams['address.lastName'] = $addressLastName;
        }
        // query params
        if (is_array($addressPostcode)) {
            $addressPostcode = ObjectSerializer::serializeCollection($addressPostcode, '', true);
        }
        if ($addressPostcode !== null) {
            $queryParams['address.postcode'] = $addressPostcode;
        }
        // query params
        if (is_array($addressState)) {
            $addressState = ObjectSerializer::serializeCollection($addressState, '', true);
        }
        if ($addressState !== null) {
            $queryParams['address.state'] = $addressState;
        }
        // query params
        if (is_array($daysInTransit)) {
            $daysInTransit = ObjectSerializer::serializeCollection($daysInTransit, '', true);
        }
        if ($daysInTransit !== null) {
            $queryParams['daysInTransit'] = $daysInTransit;
        }
        // query params
        if ($daysInTransit2 !== null) {
            if('form' === 'form' && is_array($daysInTransit2)) {
                foreach($daysInTransit2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['daysInTransit[]'] = $daysInTransit2;
            }
        }
        // query params
        if (is_array($daysInTransitBetween)) {
            $daysInTransitBetween = ObjectSerializer::serializeCollection($daysInTransitBetween, '', true);
        }
        if ($daysInTransitBetween !== null) {
            $queryParams['daysInTransit[between]'] = $daysInTransitBetween;
        }
        // query params
        if (is_array($daysInTransitGt)) {
            $daysInTransitGt = ObjectSerializer::serializeCollection($daysInTransitGt, '', true);
        }
        if ($daysInTransitGt !== null) {
            $queryParams['daysInTransit[gt]'] = $daysInTransitGt;
        }
        // query params
        if (is_array($daysInTransitGte)) {
            $daysInTransitGte = ObjectSerializer::serializeCollection($daysInTransitGte, '', true);
        }
        if ($daysInTransitGte !== null) {
            $queryParams['daysInTransit[gte]'] = $daysInTransitGte;
        }
        // query params
        if (is_array($daysInTransitLt)) {
            $daysInTransitLt = ObjectSerializer::serializeCollection($daysInTransitLt, '', true);
        }
        if ($daysInTransitLt !== null) {
            $queryParams['daysInTransit[lt]'] = $daysInTransitLt;
        }
        // query params
        if (is_array($daysInTransitLte)) {
            $daysInTransitLte = ObjectSerializer::serializeCollection($daysInTransitLte, '', true);
        }
        if ($daysInTransitLte !== null) {
            $queryParams['daysInTransit[lte]'] = $daysInTransitLte;
        }
        // query params
        if (is_array($reviewTotalScoreBetween)) {
            $reviewTotalScoreBetween = ObjectSerializer::serializeCollection($reviewTotalScoreBetween, '', true);
        }
        if ($reviewTotalScoreBetween !== null) {
            $queryParams['reviewTotalScore[between]'] = $reviewTotalScoreBetween;
        }
        // query params
        if (is_array($reviewTotalScoreGt)) {
            $reviewTotalScoreGt = ObjectSerializer::serializeCollection($reviewTotalScoreGt, '', true);
        }
        if ($reviewTotalScoreGt !== null) {
            $queryParams['reviewTotalScore[gt]'] = $reviewTotalScoreGt;
        }
        // query params
        if (is_array($reviewTotalScoreGte)) {
            $reviewTotalScoreGte = ObjectSerializer::serializeCollection($reviewTotalScoreGte, '', true);
        }
        if ($reviewTotalScoreGte !== null) {
            $queryParams['reviewTotalScore[gte]'] = $reviewTotalScoreGte;
        }
        // query params
        if (is_array($reviewTotalScoreLt)) {
            $reviewTotalScoreLt = ObjectSerializer::serializeCollection($reviewTotalScoreLt, '', true);
        }
        if ($reviewTotalScoreLt !== null) {
            $queryParams['reviewTotalScore[lt]'] = $reviewTotalScoreLt;
        }
        // query params
        if (is_array($reviewTotalScoreLte)) {
            $reviewTotalScoreLte = ObjectSerializer::serializeCollection($reviewTotalScoreLte, '', true);
        }
        if ($reviewTotalScoreLte !== null) {
            $queryParams['reviewTotalScore[lte]'] = $reviewTotalScoreLte;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesStatusesGetSubresource
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id id (required)
     * @param  string $entity entity (optional)
     * @param  string $code code (optional)
     * @param  string $title title (optional)
     * @param  string $orderEntity orderEntity (optional)
     * @param  string $orderCode orderCode (optional)
     * @param  string $orderTitle orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\StatusGet[]
     */
    public function apiWorkspacesStatusesGetSubresource($id, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiWorkspacesStatusesGetSubresourceWithHttpInfo($id, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiWorkspacesStatusesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\StatusGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesStatusesGetSubresourceWithHttpInfo($id, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiWorkspacesStatusesGetSubresourceRequest($id, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\StatusGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\StatusGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\StatusGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\StatusGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesStatusesGetSubresourceAsync
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesStatusesGetSubresourceAsync($id, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiWorkspacesStatusesGetSubresourceAsyncWithHttpInfo($id, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesStatusesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Status resources.
     *
     * @param  string $id (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesStatusesGetSubresourceAsyncWithHttpInfo($id, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\StatusGet[]';
        $request = $this->apiWorkspacesStatusesGetSubresourceRequest($id, $entity, $code, $title, $orderEntity, $orderCode, $orderTitle, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesStatusesGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $entity (optional)
     * @param  string $code (optional)
     * @param  string $title (optional)
     * @param  string $orderEntity (optional)
     * @param  string $orderCode (optional)
     * @param  string $orderTitle (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesStatusesGetSubresourceRequest($id, $entity = null, $code = null, $title = null, $orderEntity = null, $orderCode = null, $orderTitle = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesStatusesGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($entity)) {
            $entity = ObjectSerializer::serializeCollection($entity, '', true);
        }
        if ($entity !== null) {
            $queryParams['entity'] = $entity;
        }
        // query params
        if (is_array($code)) {
            $code = ObjectSerializer::serializeCollection($code, '', true);
        }
        if ($code !== null) {
            $queryParams['code'] = $code;
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($orderEntity)) {
            $orderEntity = ObjectSerializer::serializeCollection($orderEntity, '', true);
        }
        if ($orderEntity !== null) {
            $queryParams['order[entity]'] = $orderEntity;
        }
        // query params
        if (is_array($orderCode)) {
            $orderCode = ObjectSerializer::serializeCollection($orderCode, '', true);
        }
        if ($orderCode !== null) {
            $queryParams['order[code]'] = $orderCode;
        }
        // query params
        if (is_array($orderTitle)) {
            $orderTitle = ObjectSerializer::serializeCollection($orderTitle, '', true);
        }
        if ($orderTitle !== null) {
            $queryParams['order[title]'] = $orderTitle;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresource
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id id (required)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\TrackingPageGet[]
     */
    public function apiWorkspacesTrackingPagesGetSubresource($id, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\TrackingPageGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesTrackingPagesGetSubresourceWithHttpInfo($id, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiWorkspacesTrackingPagesGetSubresourceRequest($id, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\TrackingPageGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\TrackingPageGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\TrackingPageGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresourceAsync
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingPagesGetSubresourceAsync($id, $page = null, $itemsPerPage = null)
    {
        return $this->apiWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of TrackingPage resources.
     *
     * @param  string $id (required)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesTrackingPagesGetSubresourceAsyncWithHttpInfo($id, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\TrackingPageGet[]';
        $request = $this->apiWorkspacesTrackingPagesGetSubresourceRequest($id, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesTrackingPagesGetSubresource'
     *
     * @param  string $id (required)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesTrackingPagesGetSubresourceRequest($id, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesTrackingPagesGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/tracking_pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresource
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id id (required)
     * @param  string $type type (optional)
     * @param  string[] $type2 type2 (optional)
     * @param  string $period period (optional)
     * @param  string[] $period2 period2 (optional)
     * @param  string $title title (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $tag tag (optional)
     * @param  bool $existsIntegration existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGet[]
     */
    public function apiWorkspacesWorkflowsGetSubresource($id, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiWorkspacesWorkflowsGetSubresourceRequest($id, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceAsync
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesWorkflowsGetSubresourceAsync($id, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet[]';
        $request = $this->apiWorkspacesWorkflowsGetSubresourceRequest($id, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesWorkflowsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesWorkflowsGetSubresourceRequest($id, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesWorkflowsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/workflows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if ($type2 !== null) {
            if('form' === 'form' && is_array($type2)) {
                foreach($type2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type[]'] = $type2;
            }
        }
        // query params
        if (is_array($period)) {
            $period = ObjectSerializer::serializeCollection($period, '', true);
        }
        if ($period !== null) {
            $queryParams['period'] = $period;
        }
        // query params
        if ($period2 !== null) {
            if('form' === 'form' && is_array($period2)) {
                foreach($period2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['period[]'] = $period2;
            }
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($tag)) {
            $tag = ObjectSerializer::serializeCollection($tag, '', true);
        }
        if ($tag !== null) {
            $queryParams['tag'] = $tag;
        }
        // query params
        if (is_array($existsIntegration)) {
            $existsIntegration = ObjectSerializer::serializeCollection($existsIntegration, '', true);
        }
        if ($existsIntegration !== null) {
            $queryParams['exists[integration]'] = $existsIntegration;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkspaceItem
     *
     * Removes the Workspace resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWorkspaceItem($id)
    {
        $this->deleteWorkspaceItemWithHttpInfo($id);
    }

    /**
     * Operation deleteWorkspaceItemWithHttpInfo
     *
     * Removes the Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkspaceItemWithHttpInfo($id)
    {
        $request = $this->deleteWorkspaceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkspaceItemAsync
     *
     * Removes the Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkspaceItemAsync($id)
    {
        return $this->deleteWorkspaceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWorkspaceItemAsyncWithHttpInfo
     *
     * Removes the Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkspaceItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteWorkspaceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWorkspaceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkspaceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteWorkspaceItem'
            );
        }

        $resourcePath = '/workspaces/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkspaceCollection
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGetc[]
     */
    public function getWorkspaceCollection($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->getWorkspaceCollectionWithHttpInfo($orderCreatedAt, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getWorkspaceCollectionWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGetc[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkspaceCollectionWithHttpInfo($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->getWorkspaceCollectionRequest($orderCreatedAt, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGetc[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGetc[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetc[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGetc[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkspaceCollectionAsync
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceCollectionAsync($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        return $this->getWorkspaceCollectionAsyncWithHttpInfo($orderCreatedAt, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkspaceCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Workspace resources.
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceCollectionAsyncWithHttpInfo($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGetc[]';
        $request = $this->getWorkspaceCollectionRequest($orderCreatedAt, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkspaceCollection'
     *
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkspaceCollectionRequest($orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {

        $resourcePath = '/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkspaceItem
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGet
     */
    public function getWorkspaceItem($id)
    {
        list($response) = $this->getWorkspaceItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getWorkspaceItemWithHttpInfo
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkspaceItemWithHttpInfo($id)
    {
        $request = $this->getWorkspaceItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkspaceItemAsync
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceItemAsync($id)
    {
        return $this->getWorkspaceItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkspaceItemAsyncWithHttpInfo
     *
     * Retrieves a Workspace resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkspaceItemAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGet';
        $request = $this->getWorkspaceItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkspaceItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkspaceItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getWorkspaceItem'
            );
        }

        $resourcePath = '/workspaces/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postWorkspaceCollection
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePost $workspace The new Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGet
     */
    public function postWorkspaceCollection($workspace = null)
    {
        list($response) = $this->postWorkspaceCollectionWithHttpInfo($workspace);
        return $response;
    }

    /**
     * Operation postWorkspaceCollectionWithHttpInfo
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePost $workspace The new Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function postWorkspaceCollectionWithHttpInfo($workspace = null)
    {
        $request = $this->postWorkspaceCollectionRequest($workspace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postWorkspaceCollectionAsync
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePost $workspace The new Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWorkspaceCollectionAsync($workspace = null)
    {
        return $this->postWorkspaceCollectionAsyncWithHttpInfo($workspace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postWorkspaceCollectionAsyncWithHttpInfo
     *
     * Creates a Workspace resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePost $workspace The new Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWorkspaceCollectionAsyncWithHttpInfo($workspace = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGet';
        $request = $this->postWorkspaceCollectionRequest($workspace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postWorkspaceCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePost $workspace The new Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postWorkspaceCollectionRequest($workspace = null)
    {

        $resourcePath = '/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($workspace)) {
            $_tempBody = $workspace;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putWorkspaceItem
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePut $workspace The updated Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkspaceGet
     */
    public function putWorkspaceItem($id, $workspace = null)
    {
        list($response) = $this->putWorkspaceItemWithHttpInfo($id, $workspace);
        return $response;
    }

    /**
     * Operation putWorkspaceItemWithHttpInfo
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePut $workspace The updated Workspace resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkspaceGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function putWorkspaceItemWithHttpInfo($id, $workspace = null)
    {
        $request = $this->putWorkspaceItemRequest($id, $workspace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkspaceGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkspaceGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkspaceGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putWorkspaceItemAsync
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePut $workspace The updated Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putWorkspaceItemAsync($id, $workspace = null)
    {
        return $this->putWorkspaceItemAsyncWithHttpInfo($id, $workspace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putWorkspaceItemAsyncWithHttpInfo
     *
     * Replaces the Workspace resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePut $workspace The updated Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putWorkspaceItemAsyncWithHttpInfo($id, $workspace = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkspaceGet';
        $request = $this->putWorkspaceItemRequest($id, $workspace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putWorkspaceItem'
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkspacePut $workspace The updated Workspace resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putWorkspaceItemRequest($id, $workspace = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putWorkspaceItem'
            );
        }

        $resourcePath = '/workspaces/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($workspace)) {
            $_tempBody = $workspace;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
