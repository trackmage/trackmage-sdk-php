<?php
/**
 * SubscriptionGet
 *
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trackmage Public API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: dev
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Model;

use \ArrayAccess;
use \TrackMage\Client\Swagger\ObjectSerializer;

/**
 * SubscriptionGet Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SubscriptionGet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Subscription-Get';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cbId' => 'string',
        'status' => 'string',
        'planType' => 'string',
        'planId' => 'string',
        'addonsQtyByKey' => 'string[]',
        'planName' => 'string',
        'billingPeriod' => 'int',
        'billingPeriodUnit' => 'string',
        'expiresAt' => '\DateTime',
        'unpaidInvoices' => 'bool',
        'hasScheduledChanges' => 'bool',
        'id' => 'string',
        'hasCouponCode' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'cbId' => null,
        'status' => null,
        'planType' => null,
        'planId' => null,
        'addonsQtyByKey' => null,
        'planName' => null,
        'billingPeriod' => null,
        'billingPeriodUnit' => null,
        'expiresAt' => 'date-time',
        'unpaidInvoices' => null,
        'hasScheduledChanges' => null,
        'id' => 'uuid',
        'hasCouponCode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cbId' => 'cbId',
        'status' => 'status',
        'planType' => 'planType',
        'planId' => 'planId',
        'addonsQtyByKey' => 'addonsQtyByKey',
        'planName' => 'planName',
        'billingPeriod' => 'billingPeriod',
        'billingPeriodUnit' => 'billingPeriodUnit',
        'expiresAt' => 'expiresAt',
        'unpaidInvoices' => 'unpaidInvoices',
        'hasScheduledChanges' => 'hasScheduledChanges',
        'id' => 'id',
        'hasCouponCode' => 'hasCouponCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cbId' => 'setCbId',
        'status' => 'setStatus',
        'planType' => 'setPlanType',
        'planId' => 'setPlanId',
        'addonsQtyByKey' => 'setAddonsQtyByKey',
        'planName' => 'setPlanName',
        'billingPeriod' => 'setBillingPeriod',
        'billingPeriodUnit' => 'setBillingPeriodUnit',
        'expiresAt' => 'setExpiresAt',
        'unpaidInvoices' => 'setUnpaidInvoices',
        'hasScheduledChanges' => 'setHasScheduledChanges',
        'id' => 'setId',
        'hasCouponCode' => 'setHasCouponCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cbId' => 'getCbId',
        'status' => 'getStatus',
        'planType' => 'getPlanType',
        'planId' => 'getPlanId',
        'addonsQtyByKey' => 'getAddonsQtyByKey',
        'planName' => 'getPlanName',
        'billingPeriod' => 'getBillingPeriod',
        'billingPeriodUnit' => 'getBillingPeriodUnit',
        'expiresAt' => 'getExpiresAt',
        'unpaidInvoices' => 'getUnpaidInvoices',
        'hasScheduledChanges' => 'getHasScheduledChanges',
        'id' => 'getId',
        'hasCouponCode' => 'getHasCouponCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cbId'] = isset($data['cbId']) ? $data['cbId'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['planType'] = isset($data['planType']) ? $data['planType'] : null;
        $this->container['planId'] = isset($data['planId']) ? $data['planId'] : null;
        $this->container['addonsQtyByKey'] = isset($data['addonsQtyByKey']) ? $data['addonsQtyByKey'] : null;
        $this->container['planName'] = isset($data['planName']) ? $data['planName'] : null;
        $this->container['billingPeriod'] = isset($data['billingPeriod']) ? $data['billingPeriod'] : null;
        $this->container['billingPeriodUnit'] = isset($data['billingPeriodUnit']) ? $data['billingPeriodUnit'] : null;
        $this->container['expiresAt'] = isset($data['expiresAt']) ? $data['expiresAt'] : null;
        $this->container['unpaidInvoices'] = isset($data['unpaidInvoices']) ? $data['unpaidInvoices'] : null;
        $this->container['hasScheduledChanges'] = isset($data['hasScheduledChanges']) ? $data['hasScheduledChanges'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['hasCouponCode'] = isset($data['hasCouponCode']) ? $data['hasCouponCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cbId
     *
     * @return string|null
     */
    public function getCbId()
    {
        return $this->container['cbId'];
    }

    /**
     * Sets cbId
     *
     * @param string|null $cbId cbId
     *
     * @return $this
     */
    public function setCbId($cbId)
    {
        $this->container['cbId'] = $cbId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets planType
     *
     * @return string|null
     */
    public function getPlanType()
    {
        return $this->container['planType'];
    }

    /**
     * Sets planType
     *
     * @param string|null $planType planType
     *
     * @return $this
     */
    public function setPlanType($planType)
    {
        $this->container['planType'] = $planType;

        return $this;
    }

    /**
     * Gets planId
     *
     * @return string|null
     */
    public function getPlanId()
    {
        return $this->container['planId'];
    }

    /**
     * Sets planId
     *
     * @param string|null $planId planId
     *
     * @return $this
     */
    public function setPlanId($planId)
    {
        $this->container['planId'] = $planId;

        return $this;
    }

    /**
     * Gets addonsQtyByKey
     *
     * @return string[]|null
     */
    public function getAddonsQtyByKey()
    {
        return $this->container['addonsQtyByKey'];
    }

    /**
     * Sets addonsQtyByKey
     *
     * @param string[]|null $addonsQtyByKey addonsQtyByKey
     *
     * @return $this
     */
    public function setAddonsQtyByKey($addonsQtyByKey)
    {
        $this->container['addonsQtyByKey'] = $addonsQtyByKey;

        return $this;
    }

    /**
     * Gets planName
     *
     * @return string|null
     */
    public function getPlanName()
    {
        return $this->container['planName'];
    }

    /**
     * Sets planName
     *
     * @param string|null $planName planName
     *
     * @return $this
     */
    public function setPlanName($planName)
    {
        $this->container['planName'] = $planName;

        return $this;
    }

    /**
     * Gets billingPeriod
     *
     * @return int|null
     */
    public function getBillingPeriod()
    {
        return $this->container['billingPeriod'];
    }

    /**
     * Sets billingPeriod
     *
     * @param int|null $billingPeriod billingPeriod
     *
     * @return $this
     */
    public function setBillingPeriod($billingPeriod)
    {
        $this->container['billingPeriod'] = $billingPeriod;

        return $this;
    }

    /**
     * Gets billingPeriodUnit
     *
     * @return string|null
     */
    public function getBillingPeriodUnit()
    {
        return $this->container['billingPeriodUnit'];
    }

    /**
     * Sets billingPeriodUnit
     *
     * @param string|null $billingPeriodUnit billingPeriodUnit
     *
     * @return $this
     */
    public function setBillingPeriodUnit($billingPeriodUnit)
    {
        $this->container['billingPeriodUnit'] = $billingPeriodUnit;

        return $this;
    }

    /**
     * Gets expiresAt
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expiresAt'];
    }

    /**
     * Sets expiresAt
     *
     * @param \DateTime|null $expiresAt expiresAt
     *
     * @return $this
     */
    public function setExpiresAt($expiresAt)
    {
        $this->container['expiresAt'] = $expiresAt;

        return $this;
    }

    /**
     * Gets unpaidInvoices
     *
     * @return bool|null
     */
    public function getUnpaidInvoices()
    {
        return $this->container['unpaidInvoices'];
    }

    /**
     * Sets unpaidInvoices
     *
     * @param bool|null $unpaidInvoices unpaidInvoices
     *
     * @return $this
     */
    public function setUnpaidInvoices($unpaidInvoices)
    {
        $this->container['unpaidInvoices'] = $unpaidInvoices;

        return $this;
    }

    /**
     * Gets hasScheduledChanges
     *
     * @return bool|null
     */
    public function getHasScheduledChanges()
    {
        return $this->container['hasScheduledChanges'];
    }

    /**
     * Sets hasScheduledChanges
     *
     * @param bool|null $hasScheduledChanges hasScheduledChanges
     *
     * @return $this
     */
    public function setHasScheduledChanges($hasScheduledChanges)
    {
        $this->container['hasScheduledChanges'] = $hasScheduledChanges;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets hasCouponCode
     *
     * @return bool|null
     */
    public function getHasCouponCode()
    {
        return $this->container['hasCouponCode'];
    }

    /**
     * Sets hasCouponCode
     *
     * @param bool|null $hasCouponCode hasCouponCode
     *
     * @return $this
     */
    public function setHasCouponCode($hasCouponCode)
    {
        $this->container['hasCouponCode'] = $hasCouponCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


