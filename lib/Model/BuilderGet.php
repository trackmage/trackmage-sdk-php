<?php
/**
 * BuilderGet
 *
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trackmage Public API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: dev
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Model;

use \ArrayAccess;
use \TrackMage\Client\Swagger\ObjectSerializer;

/**
 * BuilderGet Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BuilderGet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Builder-Get';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'background' => '\TrackMage\Client\Swagger\Model\BackgroundGet',
        'card' => '\TrackMage\Client\Swagger\Model\CardGet',
        'searchButton' => '\TrackMage\Client\Swagger\Model\ButtonGet',
        'detailsButton' => '\TrackMage\Client\Swagger\Model\ButtonGet',
        'trackButton' => '\TrackMage\Client\Swagger\Model\ButtonGet',
        'searchPageInput' => '\TrackMage\Client\Swagger\Model\ButtonGet',
        'searchPageTitle' => '\TrackMage\Client\Swagger\Model\SearchPageTitleGet',
        'pageScroll' => '\TrackMage\Client\Swagger\Model\PageScrollGet',
        'scripts' => '\TrackMage\Client\Swagger\Model\ScriptsGet',
        'logo' => '\TrackMage\Client\Swagger\Model\LogoGet',
        'socialIcons' => '\TrackMage\Client\Swagger\Model\SocialIconsGet',
        'sidebar' => '\TrackMage\Client\Swagger\Model\SidebarGet',
        'footer' => '\TrackMage\Client\Swagger\Model\FooterGet',
        'header' => '\TrackMage\Client\Swagger\Model\HeaderGet',
        'languageMenu' => '\TrackMage\Client\Swagger\Model\LanguageMenuGet',
        'faviconUrl' => 'string',
        'defaultThemeId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'background' => null,
        'card' => null,
        'searchButton' => null,
        'detailsButton' => null,
        'trackButton' => null,
        'searchPageInput' => null,
        'searchPageTitle' => null,
        'pageScroll' => null,
        'scripts' => null,
        'logo' => null,
        'socialIcons' => null,
        'sidebar' => null,
        'footer' => null,
        'header' => null,
        'languageMenu' => null,
        'faviconUrl' => null,
        'defaultThemeId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'background' => 'background',
        'card' => 'card',
        'searchButton' => 'searchButton',
        'detailsButton' => 'detailsButton',
        'trackButton' => 'trackButton',
        'searchPageInput' => 'searchPageInput',
        'searchPageTitle' => 'searchPageTitle',
        'pageScroll' => 'pageScroll',
        'scripts' => 'scripts',
        'logo' => 'logo',
        'socialIcons' => 'socialIcons',
        'sidebar' => 'sidebar',
        'footer' => 'footer',
        'header' => 'header',
        'languageMenu' => 'languageMenu',
        'faviconUrl' => 'faviconUrl',
        'defaultThemeId' => 'defaultThemeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'background' => 'setBackground',
        'card' => 'setCard',
        'searchButton' => 'setSearchButton',
        'detailsButton' => 'setDetailsButton',
        'trackButton' => 'setTrackButton',
        'searchPageInput' => 'setSearchPageInput',
        'searchPageTitle' => 'setSearchPageTitle',
        'pageScroll' => 'setPageScroll',
        'scripts' => 'setScripts',
        'logo' => 'setLogo',
        'socialIcons' => 'setSocialIcons',
        'sidebar' => 'setSidebar',
        'footer' => 'setFooter',
        'header' => 'setHeader',
        'languageMenu' => 'setLanguageMenu',
        'faviconUrl' => 'setFaviconUrl',
        'defaultThemeId' => 'setDefaultThemeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'background' => 'getBackground',
        'card' => 'getCard',
        'searchButton' => 'getSearchButton',
        'detailsButton' => 'getDetailsButton',
        'trackButton' => 'getTrackButton',
        'searchPageInput' => 'getSearchPageInput',
        'searchPageTitle' => 'getSearchPageTitle',
        'pageScroll' => 'getPageScroll',
        'scripts' => 'getScripts',
        'logo' => 'getLogo',
        'socialIcons' => 'getSocialIcons',
        'sidebar' => 'getSidebar',
        'footer' => 'getFooter',
        'header' => 'getHeader',
        'languageMenu' => 'getLanguageMenu',
        'faviconUrl' => 'getFaviconUrl',
        'defaultThemeId' => 'getDefaultThemeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['background'] = isset($data['background']) ? $data['background'] : null;
        $this->container['card'] = isset($data['card']) ? $data['card'] : null;
        $this->container['searchButton'] = isset($data['searchButton']) ? $data['searchButton'] : null;
        $this->container['detailsButton'] = isset($data['detailsButton']) ? $data['detailsButton'] : null;
        $this->container['trackButton'] = isset($data['trackButton']) ? $data['trackButton'] : null;
        $this->container['searchPageInput'] = isset($data['searchPageInput']) ? $data['searchPageInput'] : null;
        $this->container['searchPageTitle'] = isset($data['searchPageTitle']) ? $data['searchPageTitle'] : null;
        $this->container['pageScroll'] = isset($data['pageScroll']) ? $data['pageScroll'] : null;
        $this->container['scripts'] = isset($data['scripts']) ? $data['scripts'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['socialIcons'] = isset($data['socialIcons']) ? $data['socialIcons'] : null;
        $this->container['sidebar'] = isset($data['sidebar']) ? $data['sidebar'] : null;
        $this->container['footer'] = isset($data['footer']) ? $data['footer'] : null;
        $this->container['header'] = isset($data['header']) ? $data['header'] : null;
        $this->container['languageMenu'] = isset($data['languageMenu']) ? $data['languageMenu'] : null;
        $this->container['faviconUrl'] = isset($data['faviconUrl']) ? $data['faviconUrl'] : null;
        $this->container['defaultThemeId'] = isset($data['defaultThemeId']) ? $data['defaultThemeId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets background
     *
     * @return \TrackMage\Client\Swagger\Model\BackgroundGet|null
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param \TrackMage\Client\Swagger\Model\BackgroundGet|null $background background
     *
     * @return $this
     */
    public function setBackground($background)
    {
        $this->container['background'] = $background;

        return $this;
    }

    /**
     * Gets card
     *
     * @return \TrackMage\Client\Swagger\Model\CardGet|null
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \TrackMage\Client\Swagger\Model\CardGet|null $card card
     *
     * @return $this
     */
    public function setCard($card)
    {
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets searchButton
     *
     * @return \TrackMage\Client\Swagger\Model\ButtonGet|null
     */
    public function getSearchButton()
    {
        return $this->container['searchButton'];
    }

    /**
     * Sets searchButton
     *
     * @param \TrackMage\Client\Swagger\Model\ButtonGet|null $searchButton searchButton
     *
     * @return $this
     */
    public function setSearchButton($searchButton)
    {
        $this->container['searchButton'] = $searchButton;

        return $this;
    }

    /**
     * Gets detailsButton
     *
     * @return \TrackMage\Client\Swagger\Model\ButtonGet|null
     */
    public function getDetailsButton()
    {
        return $this->container['detailsButton'];
    }

    /**
     * Sets detailsButton
     *
     * @param \TrackMage\Client\Swagger\Model\ButtonGet|null $detailsButton detailsButton
     *
     * @return $this
     */
    public function setDetailsButton($detailsButton)
    {
        $this->container['detailsButton'] = $detailsButton;

        return $this;
    }

    /**
     * Gets trackButton
     *
     * @return \TrackMage\Client\Swagger\Model\ButtonGet|null
     */
    public function getTrackButton()
    {
        return $this->container['trackButton'];
    }

    /**
     * Sets trackButton
     *
     * @param \TrackMage\Client\Swagger\Model\ButtonGet|null $trackButton trackButton
     *
     * @return $this
     */
    public function setTrackButton($trackButton)
    {
        $this->container['trackButton'] = $trackButton;

        return $this;
    }

    /**
     * Gets searchPageInput
     *
     * @return \TrackMage\Client\Swagger\Model\ButtonGet|null
     */
    public function getSearchPageInput()
    {
        return $this->container['searchPageInput'];
    }

    /**
     * Sets searchPageInput
     *
     * @param \TrackMage\Client\Swagger\Model\ButtonGet|null $searchPageInput searchPageInput
     *
     * @return $this
     */
    public function setSearchPageInput($searchPageInput)
    {
        $this->container['searchPageInput'] = $searchPageInput;

        return $this;
    }

    /**
     * Gets searchPageTitle
     *
     * @return \TrackMage\Client\Swagger\Model\SearchPageTitleGet|null
     */
    public function getSearchPageTitle()
    {
        return $this->container['searchPageTitle'];
    }

    /**
     * Sets searchPageTitle
     *
     * @param \TrackMage\Client\Swagger\Model\SearchPageTitleGet|null $searchPageTitle searchPageTitle
     *
     * @return $this
     */
    public function setSearchPageTitle($searchPageTitle)
    {
        $this->container['searchPageTitle'] = $searchPageTitle;

        return $this;
    }

    /**
     * Gets pageScroll
     *
     * @return \TrackMage\Client\Swagger\Model\PageScrollGet|null
     */
    public function getPageScroll()
    {
        return $this->container['pageScroll'];
    }

    /**
     * Sets pageScroll
     *
     * @param \TrackMage\Client\Swagger\Model\PageScrollGet|null $pageScroll pageScroll
     *
     * @return $this
     */
    public function setPageScroll($pageScroll)
    {
        $this->container['pageScroll'] = $pageScroll;

        return $this;
    }

    /**
     * Gets scripts
     *
     * @return \TrackMage\Client\Swagger\Model\ScriptsGet|null
     */
    public function getScripts()
    {
        return $this->container['scripts'];
    }

    /**
     * Sets scripts
     *
     * @param \TrackMage\Client\Swagger\Model\ScriptsGet|null $scripts scripts
     *
     * @return $this
     */
    public function setScripts($scripts)
    {
        $this->container['scripts'] = $scripts;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return \TrackMage\Client\Swagger\Model\LogoGet|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param \TrackMage\Client\Swagger\Model\LogoGet|null $logo logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets socialIcons
     *
     * @return \TrackMage\Client\Swagger\Model\SocialIconsGet|null
     */
    public function getSocialIcons()
    {
        return $this->container['socialIcons'];
    }

    /**
     * Sets socialIcons
     *
     * @param \TrackMage\Client\Swagger\Model\SocialIconsGet|null $socialIcons socialIcons
     *
     * @return $this
     */
    public function setSocialIcons($socialIcons)
    {
        $this->container['socialIcons'] = $socialIcons;

        return $this;
    }

    /**
     * Gets sidebar
     *
     * @return \TrackMage\Client\Swagger\Model\SidebarGet|null
     */
    public function getSidebar()
    {
        return $this->container['sidebar'];
    }

    /**
     * Sets sidebar
     *
     * @param \TrackMage\Client\Swagger\Model\SidebarGet|null $sidebar sidebar
     *
     * @return $this
     */
    public function setSidebar($sidebar)
    {
        $this->container['sidebar'] = $sidebar;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return \TrackMage\Client\Swagger\Model\FooterGet|null
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param \TrackMage\Client\Swagger\Model\FooterGet|null $footer footer
     *
     * @return $this
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets header
     *
     * @return \TrackMage\Client\Swagger\Model\HeaderGet|null
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param \TrackMage\Client\Swagger\Model\HeaderGet|null $header header
     *
     * @return $this
     */
    public function setHeader($header)
    {
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets languageMenu
     *
     * @return \TrackMage\Client\Swagger\Model\LanguageMenuGet|null
     */
    public function getLanguageMenu()
    {
        return $this->container['languageMenu'];
    }

    /**
     * Sets languageMenu
     *
     * @param \TrackMage\Client\Swagger\Model\LanguageMenuGet|null $languageMenu languageMenu
     *
     * @return $this
     */
    public function setLanguageMenu($languageMenu)
    {
        $this->container['languageMenu'] = $languageMenu;

        return $this;
    }

    /**
     * Gets faviconUrl
     *
     * @return string|null
     */
    public function getFaviconUrl()
    {
        return $this->container['faviconUrl'];
    }

    /**
     * Sets faviconUrl
     *
     * @param string|null $faviconUrl faviconUrl
     *
     * @return $this
     */
    public function setFaviconUrl($faviconUrl)
    {
        $this->container['faviconUrl'] = $faviconUrl;

        return $this;
    }

    /**
     * Gets defaultThemeId
     *
     * @return string|null
     */
    public function getDefaultThemeId()
    {
        return $this->container['defaultThemeId'];
    }

    /**
     * Sets defaultThemeId
     *
     * @param string|null $defaultThemeId defaultThemeId
     *
     * @return $this
     */
    public function setDefaultThemeId($defaultThemeId)
    {
        $this->container['defaultThemeId'] = $defaultThemeId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


