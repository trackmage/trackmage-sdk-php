<?php
/**
 * OrderItemGet
 *
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trackmage Public API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: dev
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Model;

use \ArrayAccess;
use \TrackMage\Client\Swagger\ObjectSerializer;

/**
 * OrderItemGet Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderItemGet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderItem-Get';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order' => 'string',
        'productName' => 'string',
        'productSku' => 'string',
        'productOptions' => 'string[]',
        'qty' => 'int',
        'price' => 'string',
        'rowTotal' => 'string',
        'externalProductId' => 'string',
        'externalSourceSyncId' => 'string',
        'externalSourceIntegration' => 'string',
        'product' => 'string',
        'productVariant' => 'string',
        'imageUrl' => 'string',
        'fulfilledQty' => 'int',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'order' => 'iri-reference',
        'productName' => null,
        'productSku' => null,
        'productOptions' => null,
        'qty' => null,
        'price' => null,
        'rowTotal' => null,
        'externalProductId' => null,
        'externalSourceSyncId' => null,
        'externalSourceIntegration' => 'iri-reference',
        'product' => 'iri-reference',
        'productVariant' => 'iri-reference',
        'imageUrl' => null,
        'fulfilledQty' => null,
        'id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order' => 'order',
        'productName' => 'productName',
        'productSku' => 'productSku',
        'productOptions' => 'productOptions',
        'qty' => 'qty',
        'price' => 'price',
        'rowTotal' => 'rowTotal',
        'externalProductId' => 'externalProductId',
        'externalSourceSyncId' => 'externalSourceSyncId',
        'externalSourceIntegration' => 'externalSourceIntegration',
        'product' => 'product',
        'productVariant' => 'productVariant',
        'imageUrl' => 'imageUrl',
        'fulfilledQty' => 'fulfilledQty',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order' => 'setOrder',
        'productName' => 'setProductName',
        'productSku' => 'setProductSku',
        'productOptions' => 'setProductOptions',
        'qty' => 'setQty',
        'price' => 'setPrice',
        'rowTotal' => 'setRowTotal',
        'externalProductId' => 'setExternalProductId',
        'externalSourceSyncId' => 'setExternalSourceSyncId',
        'externalSourceIntegration' => 'setExternalSourceIntegration',
        'product' => 'setProduct',
        'productVariant' => 'setProductVariant',
        'imageUrl' => 'setImageUrl',
        'fulfilledQty' => 'setFulfilledQty',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order' => 'getOrder',
        'productName' => 'getProductName',
        'productSku' => 'getProductSku',
        'productOptions' => 'getProductOptions',
        'qty' => 'getQty',
        'price' => 'getPrice',
        'rowTotal' => 'getRowTotal',
        'externalProductId' => 'getExternalProductId',
        'externalSourceSyncId' => 'getExternalSourceSyncId',
        'externalSourceIntegration' => 'getExternalSourceIntegration',
        'product' => 'getProduct',
        'productVariant' => 'getProductVariant',
        'imageUrl' => 'getImageUrl',
        'fulfilledQty' => 'getFulfilledQty',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['productName'] = isset($data['productName']) ? $data['productName'] : null;
        $this->container['productSku'] = isset($data['productSku']) ? $data['productSku'] : null;
        $this->container['productOptions'] = isset($data['productOptions']) ? $data['productOptions'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['rowTotal'] = isset($data['rowTotal']) ? $data['rowTotal'] : null;
        $this->container['externalProductId'] = isset($data['externalProductId']) ? $data['externalProductId'] : null;
        $this->container['externalSourceSyncId'] = isset($data['externalSourceSyncId']) ? $data['externalSourceSyncId'] : null;
        $this->container['externalSourceIntegration'] = isset($data['externalSourceIntegration']) ? $data['externalSourceIntegration'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['productVariant'] = isset($data['productVariant']) ? $data['productVariant'] : null;
        $this->container['imageUrl'] = isset($data['imageUrl']) ? $data['imageUrl'] : null;
        $this->container['fulfilledQty'] = isset($data['fulfilledQty']) ? $data['fulfilledQty'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order'] === null) {
            $invalidProperties[] = "'order' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets productName
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName
     *
     * @param string|null $productName productName
     *
     * @return $this
     */
    public function setProductName($productName)
    {
        $this->container['productName'] = $productName;

        return $this;
    }

    /**
     * Gets productSku
     *
     * @return string|null
     */
    public function getProductSku()
    {
        return $this->container['productSku'];
    }

    /**
     * Sets productSku
     *
     * @param string|null $productSku productSku
     *
     * @return $this
     */
    public function setProductSku($productSku)
    {
        $this->container['productSku'] = $productSku;

        return $this;
    }

    /**
     * Gets productOptions
     *
     * @return string[]|null
     */
    public function getProductOptions()
    {
        return $this->container['productOptions'];
    }

    /**
     * Sets productOptions
     *
     * @param string[]|null $productOptions productOptions
     *
     * @return $this
     */
    public function setProductOptions($productOptions)
    {
        $this->container['productOptions'] = $productOptions;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return int|null
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param int|null $qty qty
     *
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets rowTotal
     *
     * @return string|null
     */
    public function getRowTotal()
    {
        return $this->container['rowTotal'];
    }

    /**
     * Sets rowTotal
     *
     * @param string|null $rowTotal rowTotal
     *
     * @return $this
     */
    public function setRowTotal($rowTotal)
    {
        $this->container['rowTotal'] = $rowTotal;

        return $this;
    }

    /**
     * Gets externalProductId
     *
     * @return string|null
     */
    public function getExternalProductId()
    {
        return $this->container['externalProductId'];
    }

    /**
     * Sets externalProductId
     *
     * @param string|null $externalProductId externalProductId
     *
     * @return $this
     */
    public function setExternalProductId($externalProductId)
    {
        $this->container['externalProductId'] = $externalProductId;

        return $this;
    }

    /**
     * Gets externalSourceSyncId
     *
     * @return string|null
     */
    public function getExternalSourceSyncId()
    {
        return $this->container['externalSourceSyncId'];
    }

    /**
     * Sets externalSourceSyncId
     *
     * @param string|null $externalSourceSyncId externalSourceSyncId
     *
     * @return $this
     */
    public function setExternalSourceSyncId($externalSourceSyncId)
    {
        $this->container['externalSourceSyncId'] = $externalSourceSyncId;

        return $this;
    }

    /**
     * Gets externalSourceIntegration
     *
     * @return string|null
     */
    public function getExternalSourceIntegration()
    {
        return $this->container['externalSourceIntegration'];
    }

    /**
     * Sets externalSourceIntegration
     *
     * @param string|null $externalSourceIntegration externalSourceIntegration
     *
     * @return $this
     */
    public function setExternalSourceIntegration($externalSourceIntegration)
    {
        $this->container['externalSourceIntegration'] = $externalSourceIntegration;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets productVariant
     *
     * @return string|null
     */
    public function getProductVariant()
    {
        return $this->container['productVariant'];
    }

    /**
     * Sets productVariant
     *
     * @param string|null $productVariant productVariant
     *
     * @return $this
     */
    public function setProductVariant($productVariant)
    {
        $this->container['productVariant'] = $productVariant;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param string|null $imageUrl imageUrl
     *
     * @return $this
     */
    public function setImageUrl($imageUrl)
    {
        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets fulfilledQty
     *
     * @return int|null
     */
    public function getFulfilledQty()
    {
        return $this->container['fulfilledQty'];
    }

    /**
     * Sets fulfilledQty
     *
     * @param int|null $fulfilledQty fulfilledQty
     *
     * @return $this
     */
    public function setFulfilledQty($fulfilledQty)
    {
        $this->container['fulfilledQty'] = $fulfilledQty;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


