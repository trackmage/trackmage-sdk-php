<?php
/**
 * SidebarGet
 *
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trackmage Public API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: dev
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Model;

use \ArrayAccess;
use \TrackMage\Client\Swagger\ObjectSerializer;

/**
 * SidebarGet Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SidebarGet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Sidebar-Get';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'parcelIcon' => 'string',
        'groupIcon' => 'string',
        'backgroundColor' => 'string',
        'borderColor' => 'string',
        'borderRadius' => 'int',
        'borderWidth' => 'int',
        'shadow' => 'string',
        'font' => '\TrackMage\Client\Swagger\Model\FontGet'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'parcelIcon' => null,
        'groupIcon' => null,
        'backgroundColor' => null,
        'borderColor' => null,
        'borderRadius' => null,
        'borderWidth' => null,
        'shadow' => null,
        'font' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parcelIcon' => 'parcelIcon',
        'groupIcon' => 'groupIcon',
        'backgroundColor' => 'backgroundColor',
        'borderColor' => 'borderColor',
        'borderRadius' => 'borderRadius',
        'borderWidth' => 'borderWidth',
        'shadow' => 'shadow',
        'font' => 'font'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parcelIcon' => 'setParcelIcon',
        'groupIcon' => 'setGroupIcon',
        'backgroundColor' => 'setBackgroundColor',
        'borderColor' => 'setBorderColor',
        'borderRadius' => 'setBorderRadius',
        'borderWidth' => 'setBorderWidth',
        'shadow' => 'setShadow',
        'font' => 'setFont'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parcelIcon' => 'getParcelIcon',
        'groupIcon' => 'getGroupIcon',
        'backgroundColor' => 'getBackgroundColor',
        'borderColor' => 'getBorderColor',
        'borderRadius' => 'getBorderRadius',
        'borderWidth' => 'getBorderWidth',
        'shadow' => 'getShadow',
        'font' => 'getFont'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parcelIcon'] = isset($data['parcelIcon']) ? $data['parcelIcon'] : null;
        $this->container['groupIcon'] = isset($data['groupIcon']) ? $data['groupIcon'] : null;
        $this->container['backgroundColor'] = isset($data['backgroundColor']) ? $data['backgroundColor'] : null;
        $this->container['borderColor'] = isset($data['borderColor']) ? $data['borderColor'] : null;
        $this->container['borderRadius'] = isset($data['borderRadius']) ? $data['borderRadius'] : null;
        $this->container['borderWidth'] = isset($data['borderWidth']) ? $data['borderWidth'] : null;
        $this->container['shadow'] = isset($data['shadow']) ? $data['shadow'] : null;
        $this->container['font'] = isset($data['font']) ? $data['font'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parcelIcon
     *
     * @return string|null
     */
    public function getParcelIcon()
    {
        return $this->container['parcelIcon'];
    }

    /**
     * Sets parcelIcon
     *
     * @param string|null $parcelIcon parcelIcon
     *
     * @return $this
     */
    public function setParcelIcon($parcelIcon)
    {
        $this->container['parcelIcon'] = $parcelIcon;

        return $this;
    }

    /**
     * Gets groupIcon
     *
     * @return string|null
     */
    public function getGroupIcon()
    {
        return $this->container['groupIcon'];
    }

    /**
     * Sets groupIcon
     *
     * @param string|null $groupIcon groupIcon
     *
     * @return $this
     */
    public function setGroupIcon($groupIcon)
    {
        $this->container['groupIcon'] = $groupIcon;

        return $this;
    }

    /**
     * Gets backgroundColor
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['backgroundColor'];
    }

    /**
     * Sets backgroundColor
     *
     * @param string|null $backgroundColor backgroundColor
     *
     * @return $this
     */
    public function setBackgroundColor($backgroundColor)
    {
        $this->container['backgroundColor'] = $backgroundColor;

        return $this;
    }

    /**
     * Gets borderColor
     *
     * @return string|null
     */
    public function getBorderColor()
    {
        return $this->container['borderColor'];
    }

    /**
     * Sets borderColor
     *
     * @param string|null $borderColor borderColor
     *
     * @return $this
     */
    public function setBorderColor($borderColor)
    {
        $this->container['borderColor'] = $borderColor;

        return $this;
    }

    /**
     * Gets borderRadius
     *
     * @return int|null
     */
    public function getBorderRadius()
    {
        return $this->container['borderRadius'];
    }

    /**
     * Sets borderRadius
     *
     * @param int|null $borderRadius borderRadius
     *
     * @return $this
     */
    public function setBorderRadius($borderRadius)
    {
        $this->container['borderRadius'] = $borderRadius;

        return $this;
    }

    /**
     * Gets borderWidth
     *
     * @return int|null
     */
    public function getBorderWidth()
    {
        return $this->container['borderWidth'];
    }

    /**
     * Sets borderWidth
     *
     * @param int|null $borderWidth borderWidth
     *
     * @return $this
     */
    public function setBorderWidth($borderWidth)
    {
        $this->container['borderWidth'] = $borderWidth;

        return $this;
    }

    /**
     * Gets shadow
     *
     * @return string|null
     */
    public function getShadow()
    {
        return $this->container['shadow'];
    }

    /**
     * Sets shadow
     *
     * @param string|null $shadow shadow
     *
     * @return $this
     */
    public function setShadow($shadow)
    {
        $this->container['shadow'] = $shadow;

        return $this;
    }

    /**
     * Gets font
     *
     * @return \TrackMage\Client\Swagger\Model\FontGet|null
     */
    public function getFont()
    {
        return $this->container['font'];
    }

    /**
     * Sets font
     *
     * @param \TrackMage\Client\Swagger\Model\FontGet|null $font font
     *
     * @return $this
     */
    public function setFont($font)
    {
        $this->container['font'] = $font;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


