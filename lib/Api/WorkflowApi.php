<?php
/**
 * WorkflowApi
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trackmage Public API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: dev
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TrackMage\Client\Swagger\ApiException;
use TrackMage\Client\Swagger\Configuration;
use TrackMage\Client\Swagger\HeaderSelector;
use TrackMage\Client\Swagger\ObjectSerializer;

/**
 * WorkflowApi Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkflowApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresource
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $type type (optional)
     * @param  string[] $type2 type2 (optional)
     * @param  string $period period (optional)
     * @param  string[] $period2 period2 (optional)
     * @param  string $title title (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $tag tag (optional)
     * @param  bool $existsIntegration existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGet[]
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresource($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $workspaces, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceAsync
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceAsync($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet[]';
        $request = $this->apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesWorkflowsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesWorkflowsGetSubresourceRequest($id, $workspaces, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesWorkflowsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesWorkflowsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/workflows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if ($type2 !== null) {
            if('form' === 'form' && is_array($type2)) {
                foreach($type2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type[]'] = $type2;
            }
        }
        // query params
        if (is_array($period)) {
            $period = ObjectSerializer::serializeCollection($period, '', true);
        }
        if ($period !== null) {
            $queryParams['period'] = $period;
        }
        // query params
        if ($period2 !== null) {
            if('form' === 'form' && is_array($period2)) {
                foreach($period2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['period[]'] = $period2;
            }
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($tag)) {
            $tag = ObjectSerializer::serializeCollection($tag, '', true);
        }
        if ($tag !== null) {
            $queryParams['tag'] = $tag;
        }
        // query params
        if (is_array($existsIntegration)) {
            $existsIntegration = ObjectSerializer::serializeCollection($existsIntegration, '', true);
        }
        if ($existsIntegration !== null) {
            $queryParams['exists[integration]'] = $existsIntegration;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsRunsGetSubresource
     *
     * Retrieves the collection of WorkflowRun resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $workflows workflows (required)
     * @param  string $status status (optional)
     * @param  string[] $status2 status2 (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowRun[]
     */
    public function apiTeamsWorkspacesWorkflowsRunsGetSubresource($id, $workspaces, $workflows, $status = null, $status2 = null, $orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesWorkflowsRunsGetSubresourceWithHttpInfo($id, $workspaces, $workflows, $status, $status2, $orderCreatedAt, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsRunsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of WorkflowRun resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $workflows (required)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowRun[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesWorkflowsRunsGetSubresourceWithHttpInfo($id, $workspaces, $workflows, $status = null, $status2 = null, $orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesWorkflowsRunsGetSubresourceRequest($id, $workspaces, $workflows, $status, $status2, $orderCreatedAt, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowRun[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowRun[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowRun[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowRun[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsRunsGetSubresourceAsync
     *
     * Retrieves the collection of WorkflowRun resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $workflows (required)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesWorkflowsRunsGetSubresourceAsync($id, $workspaces, $workflows, $status = null, $status2 = null, $orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesWorkflowsRunsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $workflows, $status, $status2, $orderCreatedAt, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesWorkflowsRunsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of WorkflowRun resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $workflows (required)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesWorkflowsRunsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $workflows, $status = null, $status2 = null, $orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowRun[]';
        $request = $this->apiTeamsWorkspacesWorkflowsRunsGetSubresourceRequest($id, $workspaces, $workflows, $status, $status2, $orderCreatedAt, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesWorkflowsRunsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $workflows (required)
     * @param  string $status (optional)
     * @param  string[] $status2 (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesWorkflowsRunsGetSubresourceRequest($id, $workspaces, $workflows, $status = null, $status2 = null, $orderCreatedAt = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesWorkflowsRunsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesWorkflowsRunsGetSubresource'
            );
        }
        // verify the required parameter 'workflows' is set
        if ($workflows === null || (is_array($workflows) && count($workflows) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workflows when calling apiTeamsWorkspacesWorkflowsRunsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/workflows/{workflows}/runs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }
        // query params
        if ($status2 !== null) {
            if('form' === 'form' && is_array($status2)) {
                foreach($status2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status[]'] = $status2;
            }
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }
        // path params
        if ($workflows !== null) {
            $resourcePath = str_replace(
                '{' . 'workflows' . '}',
                ObjectSerializer::toPathValue($workflows),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresource
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id id (required)
     * @param  string $type type (optional)
     * @param  string[] $type2 type2 (optional)
     * @param  string $period period (optional)
     * @param  string[] $period2 period2 (optional)
     * @param  string $title title (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $tag tag (optional)
     * @param  bool $existsIntegration existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGet[]
     */
    public function apiWorkspacesWorkflowsGetSubresource($id, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesWorkflowsGetSubresourceWithHttpInfo($id, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiWorkspacesWorkflowsGetSubresourceRequest($id, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceAsync
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesWorkflowsGetSubresourceAsync($id, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesWorkflowsGetSubresourceAsyncWithHttpInfo($id, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet[]';
        $request = $this->apiWorkspacesWorkflowsGetSubresourceRequest($id, $type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesWorkflowsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesWorkflowsGetSubresourceRequest($id, $type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesWorkflowsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/workflows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if ($type2 !== null) {
            if('form' === 'form' && is_array($type2)) {
                foreach($type2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type[]'] = $type2;
            }
        }
        // query params
        if (is_array($period)) {
            $period = ObjectSerializer::serializeCollection($period, '', true);
        }
        if ($period !== null) {
            $queryParams['period'] = $period;
        }
        // query params
        if ($period2 !== null) {
            if('form' === 'form' && is_array($period2)) {
                foreach($period2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['period[]'] = $period2;
            }
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($tag)) {
            $tag = ObjectSerializer::serializeCollection($tag, '', true);
        }
        if ($tag !== null) {
            $queryParams['tag'] = $tag;
        }
        // query params
        if (is_array($existsIntegration)) {
            $existsIntegration = ObjectSerializer::serializeCollection($existsIntegration, '', true);
        }
        if ($existsIntegration !== null) {
            $queryParams['exists[integration]'] = $existsIntegration;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWorkflowItem
     *
     * Removes the Workflow resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWorkflowItem($id)
    {
        $this->deleteWorkflowItemWithHttpInfo($id);
    }

    /**
     * Operation deleteWorkflowItemWithHttpInfo
     *
     * Removes the Workflow resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWorkflowItemWithHttpInfo($id)
    {
        $request = $this->deleteWorkflowItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWorkflowItemAsync
     *
     * Removes the Workflow resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkflowItemAsync($id)
    {
        return $this->deleteWorkflowItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWorkflowItemAsyncWithHttpInfo
     *
     * Removes the Workflow resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWorkflowItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteWorkflowItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWorkflowItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWorkflowItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteWorkflowItem'
            );
        }

        $resourcePath = '/workflows/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkflowCollection
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $type type (optional)
     * @param  string[] $type2 type2 (optional)
     * @param  string $period period (optional)
     * @param  string[] $period2 period2 (optional)
     * @param  string $title title (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $tag tag (optional)
     * @param  bool $existsIntegration existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGetc[]
     */
    public function getWorkflowCollection($type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->getWorkflowCollectionWithHttpInfo($type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getWorkflowCollectionWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGetc[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkflowCollectionWithHttpInfo($type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->getWorkflowCollectionRequest($type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGetc[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGetc[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGetc[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGetc[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkflowCollectionAsync
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkflowCollectionAsync($type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        return $this->getWorkflowCollectionAsyncWithHttpInfo($type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkflowCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Workflow resources.
     *
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkflowCollectionAsyncWithHttpInfo($type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGetc[]';
        $request = $this->getWorkflowCollectionRequest($type, $type2, $period, $period2, $title, $orderCreatedAt, $tag, $existsIntegration, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkflowCollection'
     *
     * @param  string $type (optional)
     * @param  string[] $type2 (optional)
     * @param  string $period (optional)
     * @param  string[] $period2 (optional)
     * @param  string $title (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $tag (optional)
     * @param  bool $existsIntegration (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkflowCollectionRequest($type = null, $type2 = null, $period = null, $period2 = null, $title = null, $orderCreatedAt = null, $tag = null, $existsIntegration = null, $page = null, $itemsPerPage = null)
    {

        $resourcePath = '/workflows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }
        // query params
        if ($type2 !== null) {
            if('form' === 'form' && is_array($type2)) {
                foreach($type2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['type[]'] = $type2;
            }
        }
        // query params
        if (is_array($period)) {
            $period = ObjectSerializer::serializeCollection($period, '', true);
        }
        if ($period !== null) {
            $queryParams['period'] = $period;
        }
        // query params
        if ($period2 !== null) {
            if('form' === 'form' && is_array($period2)) {
                foreach($period2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['period[]'] = $period2;
            }
        }
        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($tag)) {
            $tag = ObjectSerializer::serializeCollection($tag, '', true);
        }
        if ($tag !== null) {
            $queryParams['tag'] = $tag;
        }
        // query params
        if (is_array($existsIntegration)) {
            $existsIntegration = ObjectSerializer::serializeCollection($existsIntegration, '', true);
        }
        if ($existsIntegration !== null) {
            $queryParams['exists[integration]'] = $existsIntegration;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWorkflowItem
     *
     * Retrieves a Workflow resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGet
     */
    public function getWorkflowItem($id)
    {
        list($response) = $this->getWorkflowItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getWorkflowItemWithHttpInfo
     *
     * Retrieves a Workflow resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWorkflowItemWithHttpInfo($id)
    {
        $request = $this->getWorkflowItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWorkflowItemAsync
     *
     * Retrieves a Workflow resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkflowItemAsync($id)
    {
        return $this->getWorkflowItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWorkflowItemAsyncWithHttpInfo
     *
     * Retrieves a Workflow resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWorkflowItemAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet';
        $request = $this->getWorkflowItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWorkflowItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWorkflowItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getWorkflowItem'
            );
        }

        $resourcePath = '/workflows/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postWorkflowCollection
     *
     * Creates a Workflow resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkflowPost $workflow The new Workflow resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGet
     */
    public function postWorkflowCollection($workflow = null)
    {
        list($response) = $this->postWorkflowCollectionWithHttpInfo($workflow);
        return $response;
    }

    /**
     * Operation postWorkflowCollectionWithHttpInfo
     *
     * Creates a Workflow resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkflowPost $workflow The new Workflow resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function postWorkflowCollectionWithHttpInfo($workflow = null)
    {
        $request = $this->postWorkflowCollectionRequest($workflow);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postWorkflowCollectionAsync
     *
     * Creates a Workflow resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkflowPost $workflow The new Workflow resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWorkflowCollectionAsync($workflow = null)
    {
        return $this->postWorkflowCollectionAsyncWithHttpInfo($workflow)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postWorkflowCollectionAsyncWithHttpInfo
     *
     * Creates a Workflow resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkflowPost $workflow The new Workflow resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWorkflowCollectionAsyncWithHttpInfo($workflow = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet';
        $request = $this->postWorkflowCollectionRequest($workflow);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postWorkflowCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\WorkflowPost $workflow The new Workflow resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postWorkflowCollectionRequest($workflow = null)
    {

        $resourcePath = '/workflows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($workflow)) {
            $_tempBody = $workflow;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putWorkflowItem
     *
     * Replaces the Workflow resource.
     *
     * @param  string $id id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkflowPut $workflow The updated Workflow resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\WorkflowGet
     */
    public function putWorkflowItem($id, $workflow = null)
    {
        list($response) = $this->putWorkflowItemWithHttpInfo($id, $workflow);
        return $response;
    }

    /**
     * Operation putWorkflowItemWithHttpInfo
     *
     * Replaces the Workflow resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkflowPut $workflow The updated Workflow resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\WorkflowGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function putWorkflowItemWithHttpInfo($id, $workflow = null)
    {
        $request = $this->putWorkflowItemRequest($id, $workflow);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\WorkflowGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\WorkflowGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\WorkflowGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putWorkflowItemAsync
     *
     * Replaces the Workflow resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkflowPut $workflow The updated Workflow resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putWorkflowItemAsync($id, $workflow = null)
    {
        return $this->putWorkflowItemAsyncWithHttpInfo($id, $workflow)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putWorkflowItemAsyncWithHttpInfo
     *
     * Replaces the Workflow resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkflowPut $workflow The updated Workflow resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putWorkflowItemAsyncWithHttpInfo($id, $workflow = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\WorkflowGet';
        $request = $this->putWorkflowItemRequest($id, $workflow);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putWorkflowItem'
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\WorkflowPut $workflow The updated Workflow resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putWorkflowItemRequest($id, $workflow = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putWorkflowItem'
            );
        }

        $resourcePath = '/workflows/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($workflow)) {
            $_tempBody = $workflow;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
