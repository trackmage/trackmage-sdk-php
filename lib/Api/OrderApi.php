<?php
/**
 * OrderApi
 * PHP version 5
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Trackmage Public API
 *
 * TrackMage API
 *
 * The version of the OpenAPI document: dev
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TrackMage\Client\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TrackMage\Client\Swagger\ApiException;
use TrackMage\Client\Swagger\Configuration;
use TrackMage\Client\Swagger\HeaderSelector;
use TrackMage\Client\Swagger\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  TrackMage\Client\Swagger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiOrdersItemsGetSubresource
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id id (required)
     * @param  string[] $id2 id2 (optional)
     * @param  string $productName productName (optional)
     * @param  string $workspaceId workspaceId (optional)
     * @param  string[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderProductName orderProductName (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  string $orderPrice orderPrice (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $price price (optional)
     * @param  string[] $price2 price2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     * @param  string $priceBetween priceBetween (optional)
     * @param  string $priceGt priceGt (optional)
     * @param  string $priceGte priceGte (optional)
     * @param  string $priceLt priceLt (optional)
     * @param  string $priceLte priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGet[]
     */
    public function apiOrdersItemsGetSubresource($id, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiOrdersItemsGetSubresourceWithHttpInfo($id, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiOrdersItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiOrdersItemsGetSubresourceWithHttpInfo($id, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiOrdersItemsGetSubresourceRequest($id, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiOrdersItemsGetSubresourceAsync
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersItemsGetSubresourceAsync($id, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiOrdersItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGet[]';
        $request = $this->apiOrdersItemsGetSubresourceRequest($id, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiOrdersItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiOrdersItemsGetSubresourceRequest($id, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiOrdersItemsGetSubresource'
            );
        }

        $resourcePath = '/orders/{id}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id2 !== null) {
            if('form' === 'form' && is_array($id2)) {
                foreach($id2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id2;
            }
        }
        // query params
        if (is_array($productName)) {
            $productName = ObjectSerializer::serializeCollection($productName, '', true);
        }
        if ($productName !== null) {
            $queryParams['productName'] = $productName;
        }
        // query params
        if (is_array($workspaceId)) {
            $workspaceId = ObjectSerializer::serializeCollection($workspaceId, '', true);
        }
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = $workspaceId;
        }
        // query params
        if ($workspaceId2 !== null) {
            if('form' === 'form' && is_array($workspaceId2)) {
                foreach($workspaceId2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['workspace.id[]'] = $workspaceId2;
            }
        }
        // query params
        if (is_array($orderId)) {
            $orderId = ObjectSerializer::serializeCollection($orderId, '', true);
        }
        if ($orderId !== null) {
            $queryParams['order[id]'] = $orderId;
        }
        // query params
        if (is_array($orderProductName)) {
            $orderProductName = ObjectSerializer::serializeCollection($orderProductName, '', true);
        }
        if ($orderProductName !== null) {
            $queryParams['order[productName]'] = $orderProductName;
        }
        // query params
        if (is_array($orderQty)) {
            $orderQty = ObjectSerializer::serializeCollection($orderQty, '', true);
        }
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = $orderQty;
        }
        // query params
        if (is_array($orderPrice)) {
            $orderPrice = ObjectSerializer::serializeCollection($orderPrice, '', true);
        }
        if ($orderPrice !== null) {
            $queryParams['order[price]'] = $orderPrice;
        }
        // query params
        if (is_array($qty)) {
            $qty = ObjectSerializer::serializeCollection($qty, '', true);
        }
        if ($qty !== null) {
            $queryParams['qty'] = $qty;
        }
        // query params
        if ($qty2 !== null) {
            if('form' === 'form' && is_array($qty2)) {
                foreach($qty2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['qty[]'] = $qty2;
            }
        }
        // query params
        if (is_array($price)) {
            $price = ObjectSerializer::serializeCollection($price, '', true);
        }
        if ($price !== null) {
            $queryParams['price'] = $price;
        }
        // query params
        if ($price2 !== null) {
            if('form' === 'form' && is_array($price2)) {
                foreach($price2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['price[]'] = $price2;
            }
        }
        // query params
        if (is_array($qtyBetween)) {
            $qtyBetween = ObjectSerializer::serializeCollection($qtyBetween, '', true);
        }
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = $qtyBetween;
        }
        // query params
        if (is_array($qtyGt)) {
            $qtyGt = ObjectSerializer::serializeCollection($qtyGt, '', true);
        }
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = $qtyGt;
        }
        // query params
        if (is_array($qtyGte)) {
            $qtyGte = ObjectSerializer::serializeCollection($qtyGte, '', true);
        }
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = $qtyGte;
        }
        // query params
        if (is_array($qtyLt)) {
            $qtyLt = ObjectSerializer::serializeCollection($qtyLt, '', true);
        }
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = $qtyLt;
        }
        // query params
        if (is_array($qtyLte)) {
            $qtyLte = ObjectSerializer::serializeCollection($qtyLte, '', true);
        }
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = $qtyLte;
        }
        // query params
        if (is_array($priceBetween)) {
            $priceBetween = ObjectSerializer::serializeCollection($priceBetween, '', true);
        }
        if ($priceBetween !== null) {
            $queryParams['price[between]'] = $priceBetween;
        }
        // query params
        if (is_array($priceGt)) {
            $priceGt = ObjectSerializer::serializeCollection($priceGt, '', true);
        }
        if ($priceGt !== null) {
            $queryParams['price[gt]'] = $priceGt;
        }
        // query params
        if (is_array($priceGte)) {
            $priceGte = ObjectSerializer::serializeCollection($priceGte, '', true);
        }
        if ($priceGte !== null) {
            $queryParams['price[gte]'] = $priceGte;
        }
        // query params
        if (is_array($priceLt)) {
            $priceLt = ObjectSerializer::serializeCollection($priceLt, '', true);
        }
        if ($priceLt !== null) {
            $queryParams['price[lt]'] = $priceLt;
        }
        // query params
        if (is_array($priceLte)) {
            $priceLte = ObjectSerializer::serializeCollection($priceLte, '', true);
        }
        if ($priceLte !== null) {
            $queryParams['price[lte]'] = $priceLte;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresource
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderOrderNumber orderOrderNumber (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderPhoneNumber orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode orderOrderStatusCode (optional)
     * @param  string $orderSubtotal orderSubtotal (optional)
     * @param  string $orderTotal orderTotal (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState orderBillingAddressState (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $orderNumber orderNumber (optional)
     * @param  string $email email (optional)
     * @param  string $phoneNumber phoneNumber (optional)
     * @param  string $orderStatusCode orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 orderStatusCode2 (optional)
     * @param  string $orderType orderType (optional)
     * @param  string[] $orderType2 orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity shippingAddressCity (optional)
     * @param  string $shippingAddressCompany shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode shippingAddressPostcode (optional)
     * @param  string $shippingAddressState shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity billingAddressCity (optional)
     * @param  string $billingAddressCompany billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName billingAddressFirstName (optional)
     * @param  string $billingAddressLastName billingAddressLastName (optional)
     * @param  string $billingAddressPostcode billingAddressPostcode (optional)
     * @param  string $billingAddressState billingAddressState (optional)
     * @param  string $subtotal subtotal (optional)
     * @param  string[] $subtotal2 subtotal2 (optional)
     * @param  string $total total (optional)
     * @param  string[] $total2 total2 (optional)
     * @param  string $subtotalBetween subtotalBetween (optional)
     * @param  string $subtotalGt subtotalGt (optional)
     * @param  string $subtotalGte subtotalGte (optional)
     * @param  string $subtotalLt subtotalLt (optional)
     * @param  string $subtotalLte subtotalLte (optional)
     * @param  string $totalBetween totalBetween (optional)
     * @param  string $totalGt totalGt (optional)
     * @param  string $totalGte totalGte (optional)
     * @param  string $totalLt totalLt (optional)
     * @param  string $totalLte totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGet[]
     */
    public function apiTeamsWorkspacesOrdersGetSubresource($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo($id, $workspaces, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceWithHttpInfo($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceAsync
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceAsync($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGet[]';
        $request = $this->apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesOrdersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesOrdersGetSubresourceRequest($id, $workspaces, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesOrdersGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesOrdersGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($orderId)) {
            $orderId = ObjectSerializer::serializeCollection($orderId, '', true);
        }
        if ($orderId !== null) {
            $queryParams['order[id]'] = $orderId;
        }
        // query params
        if (is_array($orderOrderNumber)) {
            $orderOrderNumber = ObjectSerializer::serializeCollection($orderOrderNumber, '', true);
        }
        if ($orderOrderNumber !== null) {
            $queryParams['order[orderNumber]'] = $orderOrderNumber;
        }
        // query params
        if (is_array($orderEmail)) {
            $orderEmail = ObjectSerializer::serializeCollection($orderEmail, '', true);
        }
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = $orderEmail;
        }
        // query params
        if (is_array($orderPhoneNumber)) {
            $orderPhoneNumber = ObjectSerializer::serializeCollection($orderPhoneNumber, '', true);
        }
        if ($orderPhoneNumber !== null) {
            $queryParams['order[phoneNumber]'] = $orderPhoneNumber;
        }
        // query params
        if (is_array($orderOrderStatusCode)) {
            $orderOrderStatusCode = ObjectSerializer::serializeCollection($orderOrderStatusCode, '', true);
        }
        if ($orderOrderStatusCode !== null) {
            $queryParams['order[orderStatus.code]'] = $orderOrderStatusCode;
        }
        // query params
        if (is_array($orderSubtotal)) {
            $orderSubtotal = ObjectSerializer::serializeCollection($orderSubtotal, '', true);
        }
        if ($orderSubtotal !== null) {
            $queryParams['order[subtotal]'] = $orderSubtotal;
        }
        // query params
        if (is_array($orderTotal)) {
            $orderTotal = ObjectSerializer::serializeCollection($orderTotal, '', true);
        }
        if ($orderTotal !== null) {
            $queryParams['order[total]'] = $orderTotal;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($orderUpdatedAt)) {
            $orderUpdatedAt = ObjectSerializer::serializeCollection($orderUpdatedAt, '', true);
        }
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = $orderUpdatedAt;
        }
        // query params
        if (is_array($orderShippingAddressAddressLine1)) {
            $orderShippingAddressAddressLine1 = ObjectSerializer::serializeCollection($orderShippingAddressAddressLine1, '', true);
        }
        if ($orderShippingAddressAddressLine1 !== null) {
            $queryParams['order[shippingAddress.addressLine1]'] = $orderShippingAddressAddressLine1;
        }
        // query params
        if (is_array($orderShippingAddressAddressLine2)) {
            $orderShippingAddressAddressLine2 = ObjectSerializer::serializeCollection($orderShippingAddressAddressLine2, '', true);
        }
        if ($orderShippingAddressAddressLine2 !== null) {
            $queryParams['order[shippingAddress.addressLine2]'] = $orderShippingAddressAddressLine2;
        }
        // query params
        if (is_array($orderShippingAddressCity)) {
            $orderShippingAddressCity = ObjectSerializer::serializeCollection($orderShippingAddressCity, '', true);
        }
        if ($orderShippingAddressCity !== null) {
            $queryParams['order[shippingAddress.city]'] = $orderShippingAddressCity;
        }
        // query params
        if (is_array($orderShippingAddressCompany)) {
            $orderShippingAddressCompany = ObjectSerializer::serializeCollection($orderShippingAddressCompany, '', true);
        }
        if ($orderShippingAddressCompany !== null) {
            $queryParams['order[shippingAddress.company]'] = $orderShippingAddressCompany;
        }
        // query params
        if (is_array($orderShippingAddressCountryIso2)) {
            $orderShippingAddressCountryIso2 = ObjectSerializer::serializeCollection($orderShippingAddressCountryIso2, '', true);
        }
        if ($orderShippingAddressCountryIso2 !== null) {
            $queryParams['order[shippingAddress.countryIso2]'] = $orderShippingAddressCountryIso2;
        }
        // query params
        if (is_array($orderShippingAddressFirstName)) {
            $orderShippingAddressFirstName = ObjectSerializer::serializeCollection($orderShippingAddressFirstName, '', true);
        }
        if ($orderShippingAddressFirstName !== null) {
            $queryParams['order[shippingAddress.firstName]'] = $orderShippingAddressFirstName;
        }
        // query params
        if (is_array($orderShippingAddressLastName)) {
            $orderShippingAddressLastName = ObjectSerializer::serializeCollection($orderShippingAddressLastName, '', true);
        }
        if ($orderShippingAddressLastName !== null) {
            $queryParams['order[shippingAddress.lastName]'] = $orderShippingAddressLastName;
        }
        // query params
        if (is_array($orderShippingAddressPostcode)) {
            $orderShippingAddressPostcode = ObjectSerializer::serializeCollection($orderShippingAddressPostcode, '', true);
        }
        if ($orderShippingAddressPostcode !== null) {
            $queryParams['order[shippingAddress.postcode]'] = $orderShippingAddressPostcode;
        }
        // query params
        if (is_array($orderShippingAddressState)) {
            $orderShippingAddressState = ObjectSerializer::serializeCollection($orderShippingAddressState, '', true);
        }
        if ($orderShippingAddressState !== null) {
            $queryParams['order[shippingAddress.state]'] = $orderShippingAddressState;
        }
        // query params
        if (is_array($orderBillingAddressAddressLine1)) {
            $orderBillingAddressAddressLine1 = ObjectSerializer::serializeCollection($orderBillingAddressAddressLine1, '', true);
        }
        if ($orderBillingAddressAddressLine1 !== null) {
            $queryParams['order[billingAddress.addressLine1]'] = $orderBillingAddressAddressLine1;
        }
        // query params
        if (is_array($orderBillingAddressAddressLine2)) {
            $orderBillingAddressAddressLine2 = ObjectSerializer::serializeCollection($orderBillingAddressAddressLine2, '', true);
        }
        if ($orderBillingAddressAddressLine2 !== null) {
            $queryParams['order[billingAddress.addressLine2]'] = $orderBillingAddressAddressLine2;
        }
        // query params
        if (is_array($orderBillingAddressCity)) {
            $orderBillingAddressCity = ObjectSerializer::serializeCollection($orderBillingAddressCity, '', true);
        }
        if ($orderBillingAddressCity !== null) {
            $queryParams['order[billingAddress.city]'] = $orderBillingAddressCity;
        }
        // query params
        if (is_array($orderBillingAddressCompany)) {
            $orderBillingAddressCompany = ObjectSerializer::serializeCollection($orderBillingAddressCompany, '', true);
        }
        if ($orderBillingAddressCompany !== null) {
            $queryParams['order[billingAddress.company]'] = $orderBillingAddressCompany;
        }
        // query params
        if (is_array($orderBillingAddressCountryIso2)) {
            $orderBillingAddressCountryIso2 = ObjectSerializer::serializeCollection($orderBillingAddressCountryIso2, '', true);
        }
        if ($orderBillingAddressCountryIso2 !== null) {
            $queryParams['order[billingAddress.countryIso2]'] = $orderBillingAddressCountryIso2;
        }
        // query params
        if (is_array($orderBillingAddressFirstName)) {
            $orderBillingAddressFirstName = ObjectSerializer::serializeCollection($orderBillingAddressFirstName, '', true);
        }
        if ($orderBillingAddressFirstName !== null) {
            $queryParams['order[billingAddress.firstName]'] = $orderBillingAddressFirstName;
        }
        // query params
        if (is_array($orderBillingAddressLastName)) {
            $orderBillingAddressLastName = ObjectSerializer::serializeCollection($orderBillingAddressLastName, '', true);
        }
        if ($orderBillingAddressLastName !== null) {
            $queryParams['order[billingAddress.lastName]'] = $orderBillingAddressLastName;
        }
        // query params
        if (is_array($orderBillingAddressPostcode)) {
            $orderBillingAddressPostcode = ObjectSerializer::serializeCollection($orderBillingAddressPostcode, '', true);
        }
        if ($orderBillingAddressPostcode !== null) {
            $queryParams['order[billingAddress.postcode]'] = $orderBillingAddressPostcode;
        }
        // query params
        if (is_array($orderBillingAddressState)) {
            $orderBillingAddressState = ObjectSerializer::serializeCollection($orderBillingAddressState, '', true);
        }
        if ($orderBillingAddressState !== null) {
            $queryParams['order[billingAddress.state]'] = $orderBillingAddressState;
        }
        // query params
        if (is_array($createdAtBefore)) {
            $createdAtBefore = ObjectSerializer::serializeCollection($createdAtBefore, '', true);
        }
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = $createdAtBefore;
        }
        // query params
        if (is_array($createdAtStrictlyBefore)) {
            $createdAtStrictlyBefore = ObjectSerializer::serializeCollection($createdAtStrictlyBefore, '', true);
        }
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = $createdAtStrictlyBefore;
        }
        // query params
        if (is_array($createdAtAfter)) {
            $createdAtAfter = ObjectSerializer::serializeCollection($createdAtAfter, '', true);
        }
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = $createdAtAfter;
        }
        // query params
        if (is_array($createdAtStrictlyAfter)) {
            $createdAtStrictlyAfter = ObjectSerializer::serializeCollection($createdAtStrictlyAfter, '', true);
        }
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = $createdAtStrictlyAfter;
        }
        // query params
        if (is_array($updatedAtBefore)) {
            $updatedAtBefore = ObjectSerializer::serializeCollection($updatedAtBefore, '', true);
        }
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = $updatedAtBefore;
        }
        // query params
        if (is_array($updatedAtStrictlyBefore)) {
            $updatedAtStrictlyBefore = ObjectSerializer::serializeCollection($updatedAtStrictlyBefore, '', true);
        }
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = $updatedAtStrictlyBefore;
        }
        // query params
        if (is_array($updatedAtAfter)) {
            $updatedAtAfter = ObjectSerializer::serializeCollection($updatedAtAfter, '', true);
        }
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = $updatedAtAfter;
        }
        // query params
        if (is_array($updatedAtStrictlyAfter)) {
            $updatedAtStrictlyAfter = ObjectSerializer::serializeCollection($updatedAtStrictlyAfter, '', true);
        }
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = $updatedAtStrictlyAfter;
        }
        // query params
        if ($id2 !== null) {
            if('form' === 'form' && is_array($id2)) {
                foreach($id2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id2;
            }
        }
        // query params
        if (is_array($orderNumber)) {
            $orderNumber = ObjectSerializer::serializeCollection($orderNumber, '', true);
        }
        if ($orderNumber !== null) {
            $queryParams['orderNumber'] = $orderNumber;
        }
        // query params
        if (is_array($email)) {
            $email = ObjectSerializer::serializeCollection($email, '', true);
        }
        if ($email !== null) {
            $queryParams['email'] = $email;
        }
        // query params
        if (is_array($phoneNumber)) {
            $phoneNumber = ObjectSerializer::serializeCollection($phoneNumber, '', true);
        }
        if ($phoneNumber !== null) {
            $queryParams['phoneNumber'] = $phoneNumber;
        }
        // query params
        if (is_array($orderStatusCode)) {
            $orderStatusCode = ObjectSerializer::serializeCollection($orderStatusCode, '', true);
        }
        if ($orderStatusCode !== null) {
            $queryParams['orderStatus.code'] = $orderStatusCode;
        }
        // query params
        if ($orderStatusCode2 !== null) {
            if('form' === 'form' && is_array($orderStatusCode2)) {
                foreach($orderStatusCode2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderStatus.code[]'] = $orderStatusCode2;
            }
        }
        // query params
        if (is_array($orderType)) {
            $orderType = ObjectSerializer::serializeCollection($orderType, '', true);
        }
        if ($orderType !== null) {
            $queryParams['orderType'] = $orderType;
        }
        // query params
        if ($orderType2 !== null) {
            if('form' === 'form' && is_array($orderType2)) {
                foreach($orderType2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderType[]'] = $orderType2;
            }
        }
        // query params
        if (is_array($shippingAddressAddressLine1)) {
            $shippingAddressAddressLine1 = ObjectSerializer::serializeCollection($shippingAddressAddressLine1, '', true);
        }
        if ($shippingAddressAddressLine1 !== null) {
            $queryParams['shippingAddress.addressLine1'] = $shippingAddressAddressLine1;
        }
        // query params
        if (is_array($shippingAddressAddressLine2)) {
            $shippingAddressAddressLine2 = ObjectSerializer::serializeCollection($shippingAddressAddressLine2, '', true);
        }
        if ($shippingAddressAddressLine2 !== null) {
            $queryParams['shippingAddress.addressLine2'] = $shippingAddressAddressLine2;
        }
        // query params
        if (is_array($shippingAddressCity)) {
            $shippingAddressCity = ObjectSerializer::serializeCollection($shippingAddressCity, '', true);
        }
        if ($shippingAddressCity !== null) {
            $queryParams['shippingAddress.city'] = $shippingAddressCity;
        }
        // query params
        if (is_array($shippingAddressCompany)) {
            $shippingAddressCompany = ObjectSerializer::serializeCollection($shippingAddressCompany, '', true);
        }
        if ($shippingAddressCompany !== null) {
            $queryParams['shippingAddress.company'] = $shippingAddressCompany;
        }
        // query params
        if (is_array($shippingAddressCountryIso2)) {
            $shippingAddressCountryIso2 = ObjectSerializer::serializeCollection($shippingAddressCountryIso2, '', true);
        }
        if ($shippingAddressCountryIso2 !== null) {
            $queryParams['shippingAddress.countryIso2'] = $shippingAddressCountryIso2;
        }
        // query params
        if ($shippingAddressCountryIso3 !== null) {
            if('form' === 'form' && is_array($shippingAddressCountryIso3)) {
                foreach($shippingAddressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['shippingAddress.countryIso2[]'] = $shippingAddressCountryIso3;
            }
        }
        // query params
        if (is_array($shippingAddressFirstName)) {
            $shippingAddressFirstName = ObjectSerializer::serializeCollection($shippingAddressFirstName, '', true);
        }
        if ($shippingAddressFirstName !== null) {
            $queryParams['shippingAddress.firstName'] = $shippingAddressFirstName;
        }
        // query params
        if (is_array($shippingAddressLastName)) {
            $shippingAddressLastName = ObjectSerializer::serializeCollection($shippingAddressLastName, '', true);
        }
        if ($shippingAddressLastName !== null) {
            $queryParams['shippingAddress.lastName'] = $shippingAddressLastName;
        }
        // query params
        if (is_array($shippingAddressPostcode)) {
            $shippingAddressPostcode = ObjectSerializer::serializeCollection($shippingAddressPostcode, '', true);
        }
        if ($shippingAddressPostcode !== null) {
            $queryParams['shippingAddress.postcode'] = $shippingAddressPostcode;
        }
        // query params
        if (is_array($shippingAddressState)) {
            $shippingAddressState = ObjectSerializer::serializeCollection($shippingAddressState, '', true);
        }
        if ($shippingAddressState !== null) {
            $queryParams['shippingAddress.state'] = $shippingAddressState;
        }
        // query params
        if (is_array($billingAddressAddressLine1)) {
            $billingAddressAddressLine1 = ObjectSerializer::serializeCollection($billingAddressAddressLine1, '', true);
        }
        if ($billingAddressAddressLine1 !== null) {
            $queryParams['billingAddress.addressLine1'] = $billingAddressAddressLine1;
        }
        // query params
        if (is_array($billingAddressAddressLine2)) {
            $billingAddressAddressLine2 = ObjectSerializer::serializeCollection($billingAddressAddressLine2, '', true);
        }
        if ($billingAddressAddressLine2 !== null) {
            $queryParams['billingAddress.addressLine2'] = $billingAddressAddressLine2;
        }
        // query params
        if (is_array($billingAddressCity)) {
            $billingAddressCity = ObjectSerializer::serializeCollection($billingAddressCity, '', true);
        }
        if ($billingAddressCity !== null) {
            $queryParams['billingAddress.city'] = $billingAddressCity;
        }
        // query params
        if (is_array($billingAddressCompany)) {
            $billingAddressCompany = ObjectSerializer::serializeCollection($billingAddressCompany, '', true);
        }
        if ($billingAddressCompany !== null) {
            $queryParams['billingAddress.company'] = $billingAddressCompany;
        }
        // query params
        if (is_array($billingAddressCountryIso2)) {
            $billingAddressCountryIso2 = ObjectSerializer::serializeCollection($billingAddressCountryIso2, '', true);
        }
        if ($billingAddressCountryIso2 !== null) {
            $queryParams['billingAddress.countryIso2'] = $billingAddressCountryIso2;
        }
        // query params
        if ($billingAddressCountryIso3 !== null) {
            if('form' === 'form' && is_array($billingAddressCountryIso3)) {
                foreach($billingAddressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['billingAddress.countryIso2[]'] = $billingAddressCountryIso3;
            }
        }
        // query params
        if (is_array($billingAddressFirstName)) {
            $billingAddressFirstName = ObjectSerializer::serializeCollection($billingAddressFirstName, '', true);
        }
        if ($billingAddressFirstName !== null) {
            $queryParams['billingAddress.firstName'] = $billingAddressFirstName;
        }
        // query params
        if (is_array($billingAddressLastName)) {
            $billingAddressLastName = ObjectSerializer::serializeCollection($billingAddressLastName, '', true);
        }
        if ($billingAddressLastName !== null) {
            $queryParams['billingAddress.lastName'] = $billingAddressLastName;
        }
        // query params
        if (is_array($billingAddressPostcode)) {
            $billingAddressPostcode = ObjectSerializer::serializeCollection($billingAddressPostcode, '', true);
        }
        if ($billingAddressPostcode !== null) {
            $queryParams['billingAddress.postcode'] = $billingAddressPostcode;
        }
        // query params
        if (is_array($billingAddressState)) {
            $billingAddressState = ObjectSerializer::serializeCollection($billingAddressState, '', true);
        }
        if ($billingAddressState !== null) {
            $queryParams['billingAddress.state'] = $billingAddressState;
        }
        // query params
        if (is_array($subtotal)) {
            $subtotal = ObjectSerializer::serializeCollection($subtotal, '', true);
        }
        if ($subtotal !== null) {
            $queryParams['subtotal'] = $subtotal;
        }
        // query params
        if ($subtotal2 !== null) {
            if('form' === 'form' && is_array($subtotal2)) {
                foreach($subtotal2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subtotal[]'] = $subtotal2;
            }
        }
        // query params
        if (is_array($total)) {
            $total = ObjectSerializer::serializeCollection($total, '', true);
        }
        if ($total !== null) {
            $queryParams['total'] = $total;
        }
        // query params
        if ($total2 !== null) {
            if('form' === 'form' && is_array($total2)) {
                foreach($total2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['total[]'] = $total2;
            }
        }
        // query params
        if (is_array($subtotalBetween)) {
            $subtotalBetween = ObjectSerializer::serializeCollection($subtotalBetween, '', true);
        }
        if ($subtotalBetween !== null) {
            $queryParams['subtotal[between]'] = $subtotalBetween;
        }
        // query params
        if (is_array($subtotalGt)) {
            $subtotalGt = ObjectSerializer::serializeCollection($subtotalGt, '', true);
        }
        if ($subtotalGt !== null) {
            $queryParams['subtotal[gt]'] = $subtotalGt;
        }
        // query params
        if (is_array($subtotalGte)) {
            $subtotalGte = ObjectSerializer::serializeCollection($subtotalGte, '', true);
        }
        if ($subtotalGte !== null) {
            $queryParams['subtotal[gte]'] = $subtotalGte;
        }
        // query params
        if (is_array($subtotalLt)) {
            $subtotalLt = ObjectSerializer::serializeCollection($subtotalLt, '', true);
        }
        if ($subtotalLt !== null) {
            $queryParams['subtotal[lt]'] = $subtotalLt;
        }
        // query params
        if (is_array($subtotalLte)) {
            $subtotalLte = ObjectSerializer::serializeCollection($subtotalLte, '', true);
        }
        if ($subtotalLte !== null) {
            $queryParams['subtotal[lte]'] = $subtotalLte;
        }
        // query params
        if (is_array($totalBetween)) {
            $totalBetween = ObjectSerializer::serializeCollection($totalBetween, '', true);
        }
        if ($totalBetween !== null) {
            $queryParams['total[between]'] = $totalBetween;
        }
        // query params
        if (is_array($totalGt)) {
            $totalGt = ObjectSerializer::serializeCollection($totalGt, '', true);
        }
        if ($totalGt !== null) {
            $queryParams['total[gt]'] = $totalGt;
        }
        // query params
        if (is_array($totalGte)) {
            $totalGte = ObjectSerializer::serializeCollection($totalGte, '', true);
        }
        if ($totalGte !== null) {
            $queryParams['total[gte]'] = $totalGte;
        }
        // query params
        if (is_array($totalLt)) {
            $totalLt = ObjectSerializer::serializeCollection($totalLt, '', true);
        }
        if ($totalLt !== null) {
            $queryParams['total[lt]'] = $totalLt;
        }
        // query params
        if (is_array($totalLte)) {
            $totalLte = ObjectSerializer::serializeCollection($totalLte, '', true);
        }
        if ($totalLte !== null) {
            $queryParams['total[lte]'] = $totalLte;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresource
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id id (required)
     * @param  string $workspaces workspaces (required)
     * @param  string $orders orders (required)
     * @param  string[] $id2 id2 (optional)
     * @param  string $productName productName (optional)
     * @param  string $workspaceId workspaceId (optional)
     * @param  string[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderProductName orderProductName (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  string $orderPrice orderPrice (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $price price (optional)
     * @param  string[] $price2 price2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     * @param  string $priceBetween priceBetween (optional)
     * @param  string $priceGt priceGt (optional)
     * @param  string $priceGte priceGte (optional)
     * @param  string $priceLt priceLt (optional)
     * @param  string $priceLte priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGet[]
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresource($id, $workspaces, $orders, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiTeamsWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $workspaces, $orders, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $workspaces, $orders, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiTeamsWorkspacesOrdersItemsGetSubresourceRequest($id, $workspaces, $orders, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresourceAsync
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresourceAsync($id, $workspaces, $orders, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiTeamsWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orders, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTeamsWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTeamsWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $workspaces, $orders, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGet[]';
        $request = $this->apiTeamsWorkspacesOrdersItemsGetSubresourceRequest($id, $workspaces, $orders, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiTeamsWorkspacesOrdersItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $workspaces (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiTeamsWorkspacesOrdersItemsGetSubresourceRequest($id, $workspaces, $orders, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiTeamsWorkspacesOrdersItemsGetSubresource'
            );
        }
        // verify the required parameter 'workspaces' is set
        if ($workspaces === null || (is_array($workspaces) && count($workspaces) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaces when calling apiTeamsWorkspacesOrdersItemsGetSubresource'
            );
        }
        // verify the required parameter 'orders' is set
        if ($orders === null || (is_array($orders) && count($orders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orders when calling apiTeamsWorkspacesOrdersItemsGetSubresource'
            );
        }

        $resourcePath = '/teams/{id}/workspaces/{workspaces}/orders/{orders}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id2 !== null) {
            if('form' === 'form' && is_array($id2)) {
                foreach($id2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id2;
            }
        }
        // query params
        if (is_array($productName)) {
            $productName = ObjectSerializer::serializeCollection($productName, '', true);
        }
        if ($productName !== null) {
            $queryParams['productName'] = $productName;
        }
        // query params
        if (is_array($workspaceId)) {
            $workspaceId = ObjectSerializer::serializeCollection($workspaceId, '', true);
        }
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = $workspaceId;
        }
        // query params
        if ($workspaceId2 !== null) {
            if('form' === 'form' && is_array($workspaceId2)) {
                foreach($workspaceId2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['workspace.id[]'] = $workspaceId2;
            }
        }
        // query params
        if (is_array($orderId)) {
            $orderId = ObjectSerializer::serializeCollection($orderId, '', true);
        }
        if ($orderId !== null) {
            $queryParams['order[id]'] = $orderId;
        }
        // query params
        if (is_array($orderProductName)) {
            $orderProductName = ObjectSerializer::serializeCollection($orderProductName, '', true);
        }
        if ($orderProductName !== null) {
            $queryParams['order[productName]'] = $orderProductName;
        }
        // query params
        if (is_array($orderQty)) {
            $orderQty = ObjectSerializer::serializeCollection($orderQty, '', true);
        }
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = $orderQty;
        }
        // query params
        if (is_array($orderPrice)) {
            $orderPrice = ObjectSerializer::serializeCollection($orderPrice, '', true);
        }
        if ($orderPrice !== null) {
            $queryParams['order[price]'] = $orderPrice;
        }
        // query params
        if (is_array($qty)) {
            $qty = ObjectSerializer::serializeCollection($qty, '', true);
        }
        if ($qty !== null) {
            $queryParams['qty'] = $qty;
        }
        // query params
        if ($qty2 !== null) {
            if('form' === 'form' && is_array($qty2)) {
                foreach($qty2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['qty[]'] = $qty2;
            }
        }
        // query params
        if (is_array($price)) {
            $price = ObjectSerializer::serializeCollection($price, '', true);
        }
        if ($price !== null) {
            $queryParams['price'] = $price;
        }
        // query params
        if ($price2 !== null) {
            if('form' === 'form' && is_array($price2)) {
                foreach($price2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['price[]'] = $price2;
            }
        }
        // query params
        if (is_array($qtyBetween)) {
            $qtyBetween = ObjectSerializer::serializeCollection($qtyBetween, '', true);
        }
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = $qtyBetween;
        }
        // query params
        if (is_array($qtyGt)) {
            $qtyGt = ObjectSerializer::serializeCollection($qtyGt, '', true);
        }
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = $qtyGt;
        }
        // query params
        if (is_array($qtyGte)) {
            $qtyGte = ObjectSerializer::serializeCollection($qtyGte, '', true);
        }
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = $qtyGte;
        }
        // query params
        if (is_array($qtyLt)) {
            $qtyLt = ObjectSerializer::serializeCollection($qtyLt, '', true);
        }
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = $qtyLt;
        }
        // query params
        if (is_array($qtyLte)) {
            $qtyLte = ObjectSerializer::serializeCollection($qtyLte, '', true);
        }
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = $qtyLte;
        }
        // query params
        if (is_array($priceBetween)) {
            $priceBetween = ObjectSerializer::serializeCollection($priceBetween, '', true);
        }
        if ($priceBetween !== null) {
            $queryParams['price[between]'] = $priceBetween;
        }
        // query params
        if (is_array($priceGt)) {
            $priceGt = ObjectSerializer::serializeCollection($priceGt, '', true);
        }
        if ($priceGt !== null) {
            $queryParams['price[gt]'] = $priceGt;
        }
        // query params
        if (is_array($priceGte)) {
            $priceGte = ObjectSerializer::serializeCollection($priceGte, '', true);
        }
        if ($priceGte !== null) {
            $queryParams['price[gte]'] = $priceGte;
        }
        // query params
        if (is_array($priceLt)) {
            $priceLt = ObjectSerializer::serializeCollection($priceLt, '', true);
        }
        if ($priceLt !== null) {
            $queryParams['price[lt]'] = $priceLt;
        }
        // query params
        if (is_array($priceLte)) {
            $priceLte = ObjectSerializer::serializeCollection($priceLte, '', true);
        }
        if ($priceLte !== null) {
            $queryParams['price[lte]'] = $priceLte;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($workspaces !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaces' . '}',
                ObjectSerializer::toPathValue($workspaces),
                $resourcePath
            );
        }
        // path params
        if ($orders !== null) {
            $resourcePath = str_replace(
                '{' . 'orders' . '}',
                ObjectSerializer::toPathValue($orders),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresource
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id id (required)
     * @param  string $orderId orderId (optional)
     * @param  string $orderOrderNumber orderOrderNumber (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderPhoneNumber orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode orderOrderStatusCode (optional)
     * @param  string $orderSubtotal orderSubtotal (optional)
     * @param  string $orderTotal orderTotal (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState orderBillingAddressState (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $orderNumber orderNumber (optional)
     * @param  string $email email (optional)
     * @param  string $phoneNumber phoneNumber (optional)
     * @param  string $orderStatusCode orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 orderStatusCode2 (optional)
     * @param  string $orderType orderType (optional)
     * @param  string[] $orderType2 orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity shippingAddressCity (optional)
     * @param  string $shippingAddressCompany shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode shippingAddressPostcode (optional)
     * @param  string $shippingAddressState shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity billingAddressCity (optional)
     * @param  string $billingAddressCompany billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName billingAddressFirstName (optional)
     * @param  string $billingAddressLastName billingAddressLastName (optional)
     * @param  string $billingAddressPostcode billingAddressPostcode (optional)
     * @param  string $billingAddressState billingAddressState (optional)
     * @param  string $subtotal subtotal (optional)
     * @param  string[] $subtotal2 subtotal2 (optional)
     * @param  string $total total (optional)
     * @param  string[] $total2 total2 (optional)
     * @param  string $subtotalBetween subtotalBetween (optional)
     * @param  string $subtotalGt subtotalGt (optional)
     * @param  string $subtotalGte subtotalGte (optional)
     * @param  string $subtotalLt subtotalLt (optional)
     * @param  string $subtotalLte subtotalLte (optional)
     * @param  string $totalBetween totalBetween (optional)
     * @param  string $totalGt totalGt (optional)
     * @param  string $totalGte totalGte (optional)
     * @param  string $totalLt totalLt (optional)
     * @param  string $totalLte totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGet[]
     */
    public function apiWorkspacesOrdersGetSubresource($id, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiWorkspacesOrdersGetSubresourceWithHttpInfo($id, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesOrdersGetSubresourceWithHttpInfo($id, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiWorkspacesOrdersGetSubresourceRequest($id, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceAsync
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersGetSubresourceAsync($id, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersGetSubresourceAsyncWithHttpInfo($id, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGet[]';
        $request = $this->apiWorkspacesOrdersGetSubresourceRequest($id, $orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesOrdersGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesOrdersGetSubresourceRequest($id, $orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesOrdersGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($orderId)) {
            $orderId = ObjectSerializer::serializeCollection($orderId, '', true);
        }
        if ($orderId !== null) {
            $queryParams['order[id]'] = $orderId;
        }
        // query params
        if (is_array($orderOrderNumber)) {
            $orderOrderNumber = ObjectSerializer::serializeCollection($orderOrderNumber, '', true);
        }
        if ($orderOrderNumber !== null) {
            $queryParams['order[orderNumber]'] = $orderOrderNumber;
        }
        // query params
        if (is_array($orderEmail)) {
            $orderEmail = ObjectSerializer::serializeCollection($orderEmail, '', true);
        }
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = $orderEmail;
        }
        // query params
        if (is_array($orderPhoneNumber)) {
            $orderPhoneNumber = ObjectSerializer::serializeCollection($orderPhoneNumber, '', true);
        }
        if ($orderPhoneNumber !== null) {
            $queryParams['order[phoneNumber]'] = $orderPhoneNumber;
        }
        // query params
        if (is_array($orderOrderStatusCode)) {
            $orderOrderStatusCode = ObjectSerializer::serializeCollection($orderOrderStatusCode, '', true);
        }
        if ($orderOrderStatusCode !== null) {
            $queryParams['order[orderStatus.code]'] = $orderOrderStatusCode;
        }
        // query params
        if (is_array($orderSubtotal)) {
            $orderSubtotal = ObjectSerializer::serializeCollection($orderSubtotal, '', true);
        }
        if ($orderSubtotal !== null) {
            $queryParams['order[subtotal]'] = $orderSubtotal;
        }
        // query params
        if (is_array($orderTotal)) {
            $orderTotal = ObjectSerializer::serializeCollection($orderTotal, '', true);
        }
        if ($orderTotal !== null) {
            $queryParams['order[total]'] = $orderTotal;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($orderUpdatedAt)) {
            $orderUpdatedAt = ObjectSerializer::serializeCollection($orderUpdatedAt, '', true);
        }
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = $orderUpdatedAt;
        }
        // query params
        if (is_array($orderShippingAddressAddressLine1)) {
            $orderShippingAddressAddressLine1 = ObjectSerializer::serializeCollection($orderShippingAddressAddressLine1, '', true);
        }
        if ($orderShippingAddressAddressLine1 !== null) {
            $queryParams['order[shippingAddress.addressLine1]'] = $orderShippingAddressAddressLine1;
        }
        // query params
        if (is_array($orderShippingAddressAddressLine2)) {
            $orderShippingAddressAddressLine2 = ObjectSerializer::serializeCollection($orderShippingAddressAddressLine2, '', true);
        }
        if ($orderShippingAddressAddressLine2 !== null) {
            $queryParams['order[shippingAddress.addressLine2]'] = $orderShippingAddressAddressLine2;
        }
        // query params
        if (is_array($orderShippingAddressCity)) {
            $orderShippingAddressCity = ObjectSerializer::serializeCollection($orderShippingAddressCity, '', true);
        }
        if ($orderShippingAddressCity !== null) {
            $queryParams['order[shippingAddress.city]'] = $orderShippingAddressCity;
        }
        // query params
        if (is_array($orderShippingAddressCompany)) {
            $orderShippingAddressCompany = ObjectSerializer::serializeCollection($orderShippingAddressCompany, '', true);
        }
        if ($orderShippingAddressCompany !== null) {
            $queryParams['order[shippingAddress.company]'] = $orderShippingAddressCompany;
        }
        // query params
        if (is_array($orderShippingAddressCountryIso2)) {
            $orderShippingAddressCountryIso2 = ObjectSerializer::serializeCollection($orderShippingAddressCountryIso2, '', true);
        }
        if ($orderShippingAddressCountryIso2 !== null) {
            $queryParams['order[shippingAddress.countryIso2]'] = $orderShippingAddressCountryIso2;
        }
        // query params
        if (is_array($orderShippingAddressFirstName)) {
            $orderShippingAddressFirstName = ObjectSerializer::serializeCollection($orderShippingAddressFirstName, '', true);
        }
        if ($orderShippingAddressFirstName !== null) {
            $queryParams['order[shippingAddress.firstName]'] = $orderShippingAddressFirstName;
        }
        // query params
        if (is_array($orderShippingAddressLastName)) {
            $orderShippingAddressLastName = ObjectSerializer::serializeCollection($orderShippingAddressLastName, '', true);
        }
        if ($orderShippingAddressLastName !== null) {
            $queryParams['order[shippingAddress.lastName]'] = $orderShippingAddressLastName;
        }
        // query params
        if (is_array($orderShippingAddressPostcode)) {
            $orderShippingAddressPostcode = ObjectSerializer::serializeCollection($orderShippingAddressPostcode, '', true);
        }
        if ($orderShippingAddressPostcode !== null) {
            $queryParams['order[shippingAddress.postcode]'] = $orderShippingAddressPostcode;
        }
        // query params
        if (is_array($orderShippingAddressState)) {
            $orderShippingAddressState = ObjectSerializer::serializeCollection($orderShippingAddressState, '', true);
        }
        if ($orderShippingAddressState !== null) {
            $queryParams['order[shippingAddress.state]'] = $orderShippingAddressState;
        }
        // query params
        if (is_array($orderBillingAddressAddressLine1)) {
            $orderBillingAddressAddressLine1 = ObjectSerializer::serializeCollection($orderBillingAddressAddressLine1, '', true);
        }
        if ($orderBillingAddressAddressLine1 !== null) {
            $queryParams['order[billingAddress.addressLine1]'] = $orderBillingAddressAddressLine1;
        }
        // query params
        if (is_array($orderBillingAddressAddressLine2)) {
            $orderBillingAddressAddressLine2 = ObjectSerializer::serializeCollection($orderBillingAddressAddressLine2, '', true);
        }
        if ($orderBillingAddressAddressLine2 !== null) {
            $queryParams['order[billingAddress.addressLine2]'] = $orderBillingAddressAddressLine2;
        }
        // query params
        if (is_array($orderBillingAddressCity)) {
            $orderBillingAddressCity = ObjectSerializer::serializeCollection($orderBillingAddressCity, '', true);
        }
        if ($orderBillingAddressCity !== null) {
            $queryParams['order[billingAddress.city]'] = $orderBillingAddressCity;
        }
        // query params
        if (is_array($orderBillingAddressCompany)) {
            $orderBillingAddressCompany = ObjectSerializer::serializeCollection($orderBillingAddressCompany, '', true);
        }
        if ($orderBillingAddressCompany !== null) {
            $queryParams['order[billingAddress.company]'] = $orderBillingAddressCompany;
        }
        // query params
        if (is_array($orderBillingAddressCountryIso2)) {
            $orderBillingAddressCountryIso2 = ObjectSerializer::serializeCollection($orderBillingAddressCountryIso2, '', true);
        }
        if ($orderBillingAddressCountryIso2 !== null) {
            $queryParams['order[billingAddress.countryIso2]'] = $orderBillingAddressCountryIso2;
        }
        // query params
        if (is_array($orderBillingAddressFirstName)) {
            $orderBillingAddressFirstName = ObjectSerializer::serializeCollection($orderBillingAddressFirstName, '', true);
        }
        if ($orderBillingAddressFirstName !== null) {
            $queryParams['order[billingAddress.firstName]'] = $orderBillingAddressFirstName;
        }
        // query params
        if (is_array($orderBillingAddressLastName)) {
            $orderBillingAddressLastName = ObjectSerializer::serializeCollection($orderBillingAddressLastName, '', true);
        }
        if ($orderBillingAddressLastName !== null) {
            $queryParams['order[billingAddress.lastName]'] = $orderBillingAddressLastName;
        }
        // query params
        if (is_array($orderBillingAddressPostcode)) {
            $orderBillingAddressPostcode = ObjectSerializer::serializeCollection($orderBillingAddressPostcode, '', true);
        }
        if ($orderBillingAddressPostcode !== null) {
            $queryParams['order[billingAddress.postcode]'] = $orderBillingAddressPostcode;
        }
        // query params
        if (is_array($orderBillingAddressState)) {
            $orderBillingAddressState = ObjectSerializer::serializeCollection($orderBillingAddressState, '', true);
        }
        if ($orderBillingAddressState !== null) {
            $queryParams['order[billingAddress.state]'] = $orderBillingAddressState;
        }
        // query params
        if (is_array($createdAtBefore)) {
            $createdAtBefore = ObjectSerializer::serializeCollection($createdAtBefore, '', true);
        }
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = $createdAtBefore;
        }
        // query params
        if (is_array($createdAtStrictlyBefore)) {
            $createdAtStrictlyBefore = ObjectSerializer::serializeCollection($createdAtStrictlyBefore, '', true);
        }
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = $createdAtStrictlyBefore;
        }
        // query params
        if (is_array($createdAtAfter)) {
            $createdAtAfter = ObjectSerializer::serializeCollection($createdAtAfter, '', true);
        }
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = $createdAtAfter;
        }
        // query params
        if (is_array($createdAtStrictlyAfter)) {
            $createdAtStrictlyAfter = ObjectSerializer::serializeCollection($createdAtStrictlyAfter, '', true);
        }
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = $createdAtStrictlyAfter;
        }
        // query params
        if (is_array($updatedAtBefore)) {
            $updatedAtBefore = ObjectSerializer::serializeCollection($updatedAtBefore, '', true);
        }
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = $updatedAtBefore;
        }
        // query params
        if (is_array($updatedAtStrictlyBefore)) {
            $updatedAtStrictlyBefore = ObjectSerializer::serializeCollection($updatedAtStrictlyBefore, '', true);
        }
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = $updatedAtStrictlyBefore;
        }
        // query params
        if (is_array($updatedAtAfter)) {
            $updatedAtAfter = ObjectSerializer::serializeCollection($updatedAtAfter, '', true);
        }
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = $updatedAtAfter;
        }
        // query params
        if (is_array($updatedAtStrictlyAfter)) {
            $updatedAtStrictlyAfter = ObjectSerializer::serializeCollection($updatedAtStrictlyAfter, '', true);
        }
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = $updatedAtStrictlyAfter;
        }
        // query params
        if ($id2 !== null) {
            if('form' === 'form' && is_array($id2)) {
                foreach($id2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id2;
            }
        }
        // query params
        if (is_array($orderNumber)) {
            $orderNumber = ObjectSerializer::serializeCollection($orderNumber, '', true);
        }
        if ($orderNumber !== null) {
            $queryParams['orderNumber'] = $orderNumber;
        }
        // query params
        if (is_array($email)) {
            $email = ObjectSerializer::serializeCollection($email, '', true);
        }
        if ($email !== null) {
            $queryParams['email'] = $email;
        }
        // query params
        if (is_array($phoneNumber)) {
            $phoneNumber = ObjectSerializer::serializeCollection($phoneNumber, '', true);
        }
        if ($phoneNumber !== null) {
            $queryParams['phoneNumber'] = $phoneNumber;
        }
        // query params
        if (is_array($orderStatusCode)) {
            $orderStatusCode = ObjectSerializer::serializeCollection($orderStatusCode, '', true);
        }
        if ($orderStatusCode !== null) {
            $queryParams['orderStatus.code'] = $orderStatusCode;
        }
        // query params
        if ($orderStatusCode2 !== null) {
            if('form' === 'form' && is_array($orderStatusCode2)) {
                foreach($orderStatusCode2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderStatus.code[]'] = $orderStatusCode2;
            }
        }
        // query params
        if (is_array($orderType)) {
            $orderType = ObjectSerializer::serializeCollection($orderType, '', true);
        }
        if ($orderType !== null) {
            $queryParams['orderType'] = $orderType;
        }
        // query params
        if ($orderType2 !== null) {
            if('form' === 'form' && is_array($orderType2)) {
                foreach($orderType2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderType[]'] = $orderType2;
            }
        }
        // query params
        if (is_array($shippingAddressAddressLine1)) {
            $shippingAddressAddressLine1 = ObjectSerializer::serializeCollection($shippingAddressAddressLine1, '', true);
        }
        if ($shippingAddressAddressLine1 !== null) {
            $queryParams['shippingAddress.addressLine1'] = $shippingAddressAddressLine1;
        }
        // query params
        if (is_array($shippingAddressAddressLine2)) {
            $shippingAddressAddressLine2 = ObjectSerializer::serializeCollection($shippingAddressAddressLine2, '', true);
        }
        if ($shippingAddressAddressLine2 !== null) {
            $queryParams['shippingAddress.addressLine2'] = $shippingAddressAddressLine2;
        }
        // query params
        if (is_array($shippingAddressCity)) {
            $shippingAddressCity = ObjectSerializer::serializeCollection($shippingAddressCity, '', true);
        }
        if ($shippingAddressCity !== null) {
            $queryParams['shippingAddress.city'] = $shippingAddressCity;
        }
        // query params
        if (is_array($shippingAddressCompany)) {
            $shippingAddressCompany = ObjectSerializer::serializeCollection($shippingAddressCompany, '', true);
        }
        if ($shippingAddressCompany !== null) {
            $queryParams['shippingAddress.company'] = $shippingAddressCompany;
        }
        // query params
        if (is_array($shippingAddressCountryIso2)) {
            $shippingAddressCountryIso2 = ObjectSerializer::serializeCollection($shippingAddressCountryIso2, '', true);
        }
        if ($shippingAddressCountryIso2 !== null) {
            $queryParams['shippingAddress.countryIso2'] = $shippingAddressCountryIso2;
        }
        // query params
        if ($shippingAddressCountryIso3 !== null) {
            if('form' === 'form' && is_array($shippingAddressCountryIso3)) {
                foreach($shippingAddressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['shippingAddress.countryIso2[]'] = $shippingAddressCountryIso3;
            }
        }
        // query params
        if (is_array($shippingAddressFirstName)) {
            $shippingAddressFirstName = ObjectSerializer::serializeCollection($shippingAddressFirstName, '', true);
        }
        if ($shippingAddressFirstName !== null) {
            $queryParams['shippingAddress.firstName'] = $shippingAddressFirstName;
        }
        // query params
        if (is_array($shippingAddressLastName)) {
            $shippingAddressLastName = ObjectSerializer::serializeCollection($shippingAddressLastName, '', true);
        }
        if ($shippingAddressLastName !== null) {
            $queryParams['shippingAddress.lastName'] = $shippingAddressLastName;
        }
        // query params
        if (is_array($shippingAddressPostcode)) {
            $shippingAddressPostcode = ObjectSerializer::serializeCollection($shippingAddressPostcode, '', true);
        }
        if ($shippingAddressPostcode !== null) {
            $queryParams['shippingAddress.postcode'] = $shippingAddressPostcode;
        }
        // query params
        if (is_array($shippingAddressState)) {
            $shippingAddressState = ObjectSerializer::serializeCollection($shippingAddressState, '', true);
        }
        if ($shippingAddressState !== null) {
            $queryParams['shippingAddress.state'] = $shippingAddressState;
        }
        // query params
        if (is_array($billingAddressAddressLine1)) {
            $billingAddressAddressLine1 = ObjectSerializer::serializeCollection($billingAddressAddressLine1, '', true);
        }
        if ($billingAddressAddressLine1 !== null) {
            $queryParams['billingAddress.addressLine1'] = $billingAddressAddressLine1;
        }
        // query params
        if (is_array($billingAddressAddressLine2)) {
            $billingAddressAddressLine2 = ObjectSerializer::serializeCollection($billingAddressAddressLine2, '', true);
        }
        if ($billingAddressAddressLine2 !== null) {
            $queryParams['billingAddress.addressLine2'] = $billingAddressAddressLine2;
        }
        // query params
        if (is_array($billingAddressCity)) {
            $billingAddressCity = ObjectSerializer::serializeCollection($billingAddressCity, '', true);
        }
        if ($billingAddressCity !== null) {
            $queryParams['billingAddress.city'] = $billingAddressCity;
        }
        // query params
        if (is_array($billingAddressCompany)) {
            $billingAddressCompany = ObjectSerializer::serializeCollection($billingAddressCompany, '', true);
        }
        if ($billingAddressCompany !== null) {
            $queryParams['billingAddress.company'] = $billingAddressCompany;
        }
        // query params
        if (is_array($billingAddressCountryIso2)) {
            $billingAddressCountryIso2 = ObjectSerializer::serializeCollection($billingAddressCountryIso2, '', true);
        }
        if ($billingAddressCountryIso2 !== null) {
            $queryParams['billingAddress.countryIso2'] = $billingAddressCountryIso2;
        }
        // query params
        if ($billingAddressCountryIso3 !== null) {
            if('form' === 'form' && is_array($billingAddressCountryIso3)) {
                foreach($billingAddressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['billingAddress.countryIso2[]'] = $billingAddressCountryIso3;
            }
        }
        // query params
        if (is_array($billingAddressFirstName)) {
            $billingAddressFirstName = ObjectSerializer::serializeCollection($billingAddressFirstName, '', true);
        }
        if ($billingAddressFirstName !== null) {
            $queryParams['billingAddress.firstName'] = $billingAddressFirstName;
        }
        // query params
        if (is_array($billingAddressLastName)) {
            $billingAddressLastName = ObjectSerializer::serializeCollection($billingAddressLastName, '', true);
        }
        if ($billingAddressLastName !== null) {
            $queryParams['billingAddress.lastName'] = $billingAddressLastName;
        }
        // query params
        if (is_array($billingAddressPostcode)) {
            $billingAddressPostcode = ObjectSerializer::serializeCollection($billingAddressPostcode, '', true);
        }
        if ($billingAddressPostcode !== null) {
            $queryParams['billingAddress.postcode'] = $billingAddressPostcode;
        }
        // query params
        if (is_array($billingAddressState)) {
            $billingAddressState = ObjectSerializer::serializeCollection($billingAddressState, '', true);
        }
        if ($billingAddressState !== null) {
            $queryParams['billingAddress.state'] = $billingAddressState;
        }
        // query params
        if (is_array($subtotal)) {
            $subtotal = ObjectSerializer::serializeCollection($subtotal, '', true);
        }
        if ($subtotal !== null) {
            $queryParams['subtotal'] = $subtotal;
        }
        // query params
        if ($subtotal2 !== null) {
            if('form' === 'form' && is_array($subtotal2)) {
                foreach($subtotal2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subtotal[]'] = $subtotal2;
            }
        }
        // query params
        if (is_array($total)) {
            $total = ObjectSerializer::serializeCollection($total, '', true);
        }
        if ($total !== null) {
            $queryParams['total'] = $total;
        }
        // query params
        if ($total2 !== null) {
            if('form' === 'form' && is_array($total2)) {
                foreach($total2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['total[]'] = $total2;
            }
        }
        // query params
        if (is_array($subtotalBetween)) {
            $subtotalBetween = ObjectSerializer::serializeCollection($subtotalBetween, '', true);
        }
        if ($subtotalBetween !== null) {
            $queryParams['subtotal[between]'] = $subtotalBetween;
        }
        // query params
        if (is_array($subtotalGt)) {
            $subtotalGt = ObjectSerializer::serializeCollection($subtotalGt, '', true);
        }
        if ($subtotalGt !== null) {
            $queryParams['subtotal[gt]'] = $subtotalGt;
        }
        // query params
        if (is_array($subtotalGte)) {
            $subtotalGte = ObjectSerializer::serializeCollection($subtotalGte, '', true);
        }
        if ($subtotalGte !== null) {
            $queryParams['subtotal[gte]'] = $subtotalGte;
        }
        // query params
        if (is_array($subtotalLt)) {
            $subtotalLt = ObjectSerializer::serializeCollection($subtotalLt, '', true);
        }
        if ($subtotalLt !== null) {
            $queryParams['subtotal[lt]'] = $subtotalLt;
        }
        // query params
        if (is_array($subtotalLte)) {
            $subtotalLte = ObjectSerializer::serializeCollection($subtotalLte, '', true);
        }
        if ($subtotalLte !== null) {
            $queryParams['subtotal[lte]'] = $subtotalLte;
        }
        // query params
        if (is_array($totalBetween)) {
            $totalBetween = ObjectSerializer::serializeCollection($totalBetween, '', true);
        }
        if ($totalBetween !== null) {
            $queryParams['total[between]'] = $totalBetween;
        }
        // query params
        if (is_array($totalGt)) {
            $totalGt = ObjectSerializer::serializeCollection($totalGt, '', true);
        }
        if ($totalGt !== null) {
            $queryParams['total[gt]'] = $totalGt;
        }
        // query params
        if (is_array($totalGte)) {
            $totalGte = ObjectSerializer::serializeCollection($totalGte, '', true);
        }
        if ($totalGte !== null) {
            $queryParams['total[gte]'] = $totalGte;
        }
        // query params
        if (is_array($totalLt)) {
            $totalLt = ObjectSerializer::serializeCollection($totalLt, '', true);
        }
        if ($totalLt !== null) {
            $queryParams['total[lt]'] = $totalLt;
        }
        // query params
        if (is_array($totalLte)) {
            $totalLte = ObjectSerializer::serializeCollection($totalLte, '', true);
        }
        if ($totalLte !== null) {
            $queryParams['total[lte]'] = $totalLte;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresource
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id id (required)
     * @param  string $orders orders (required)
     * @param  string[] $id2 id2 (optional)
     * @param  string $productName productName (optional)
     * @param  string $workspaceId workspaceId (optional)
     * @param  string[] $workspaceId2 workspaceId2 (optional)
     * @param  string $orderId orderId (optional)
     * @param  string $orderProductName orderProductName (optional)
     * @param  string $orderQty orderQty (optional)
     * @param  string $orderPrice orderPrice (optional)
     * @param  int $qty qty (optional)
     * @param  int[] $qty2 qty2 (optional)
     * @param  string $price price (optional)
     * @param  string[] $price2 price2 (optional)
     * @param  string $qtyBetween qtyBetween (optional)
     * @param  string $qtyGt qtyGt (optional)
     * @param  string $qtyGte qtyGte (optional)
     * @param  string $qtyLt qtyLt (optional)
     * @param  string $qtyLte qtyLte (optional)
     * @param  string $priceBetween priceBetween (optional)
     * @param  string $priceGt priceGt (optional)
     * @param  string $priceGte priceGte (optional)
     * @param  string $priceLt priceLt (optional)
     * @param  string $priceLte priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderItemGet[]
     */
    public function apiWorkspacesOrdersItemsGetSubresource($id, $orders, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->apiWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $orders, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresourceWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderItemGet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWorkspacesOrdersItemsGetSubresourceWithHttpInfo($id, $orders, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->apiWorkspacesOrdersItemsGetSubresourceRequest($id, $orders, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderItemGet[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderItemGet[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGet[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderItemGet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresourceAsync
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersItemsGetSubresourceAsync($id, $orders, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->apiWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $orders, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderItem resources.
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWorkspacesOrdersItemsGetSubresourceAsyncWithHttpInfo($id, $orders, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderItemGet[]';
        $request = $this->apiWorkspacesOrdersItemsGetSubresourceRequest($id, $orders, $id2, $productName, $workspaceId, $workspaceId2, $orderId, $orderProductName, $orderQty, $orderPrice, $qty, $qty2, $price, $price2, $qtyBetween, $qtyGt, $qtyGte, $qtyLt, $qtyLte, $priceBetween, $priceGt, $priceGte, $priceLt, $priceLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWorkspacesOrdersItemsGetSubresource'
     *
     * @param  string $id (required)
     * @param  string $orders (required)
     * @param  string[] $id2 (optional)
     * @param  string $productName (optional)
     * @param  string $workspaceId (optional)
     * @param  string[] $workspaceId2 (optional)
     * @param  string $orderId (optional)
     * @param  string $orderProductName (optional)
     * @param  string $orderQty (optional)
     * @param  string $orderPrice (optional)
     * @param  int $qty (optional)
     * @param  int[] $qty2 (optional)
     * @param  string $price (optional)
     * @param  string[] $price2 (optional)
     * @param  string $qtyBetween (optional)
     * @param  string $qtyGt (optional)
     * @param  string $qtyGte (optional)
     * @param  string $qtyLt (optional)
     * @param  string $qtyLte (optional)
     * @param  string $priceBetween (optional)
     * @param  string $priceGt (optional)
     * @param  string $priceGte (optional)
     * @param  string $priceLt (optional)
     * @param  string $priceLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWorkspacesOrdersItemsGetSubresourceRequest($id, $orders, $id2 = null, $productName = null, $workspaceId = null, $workspaceId2 = null, $orderId = null, $orderProductName = null, $orderQty = null, $orderPrice = null, $qty = null, $qty2 = null, $price = null, $price2 = null, $qtyBetween = null, $qtyGt = null, $qtyGte = null, $qtyLt = null, $qtyLte = null, $priceBetween = null, $priceGt = null, $priceGte = null, $priceLt = null, $priceLte = null, $page = null, $itemsPerPage = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling apiWorkspacesOrdersItemsGetSubresource'
            );
        }
        // verify the required parameter 'orders' is set
        if ($orders === null || (is_array($orders) && count($orders) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orders when calling apiWorkspacesOrdersItemsGetSubresource'
            );
        }

        $resourcePath = '/workspaces/{id}/orders/{orders}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id2 !== null) {
            if('form' === 'form' && is_array($id2)) {
                foreach($id2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id2;
            }
        }
        // query params
        if (is_array($productName)) {
            $productName = ObjectSerializer::serializeCollection($productName, '', true);
        }
        if ($productName !== null) {
            $queryParams['productName'] = $productName;
        }
        // query params
        if (is_array($workspaceId)) {
            $workspaceId = ObjectSerializer::serializeCollection($workspaceId, '', true);
        }
        if ($workspaceId !== null) {
            $queryParams['workspace.id'] = $workspaceId;
        }
        // query params
        if ($workspaceId2 !== null) {
            if('form' === 'form' && is_array($workspaceId2)) {
                foreach($workspaceId2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['workspace.id[]'] = $workspaceId2;
            }
        }
        // query params
        if (is_array($orderId)) {
            $orderId = ObjectSerializer::serializeCollection($orderId, '', true);
        }
        if ($orderId !== null) {
            $queryParams['order[id]'] = $orderId;
        }
        // query params
        if (is_array($orderProductName)) {
            $orderProductName = ObjectSerializer::serializeCollection($orderProductName, '', true);
        }
        if ($orderProductName !== null) {
            $queryParams['order[productName]'] = $orderProductName;
        }
        // query params
        if (is_array($orderQty)) {
            $orderQty = ObjectSerializer::serializeCollection($orderQty, '', true);
        }
        if ($orderQty !== null) {
            $queryParams['order[qty]'] = $orderQty;
        }
        // query params
        if (is_array($orderPrice)) {
            $orderPrice = ObjectSerializer::serializeCollection($orderPrice, '', true);
        }
        if ($orderPrice !== null) {
            $queryParams['order[price]'] = $orderPrice;
        }
        // query params
        if (is_array($qty)) {
            $qty = ObjectSerializer::serializeCollection($qty, '', true);
        }
        if ($qty !== null) {
            $queryParams['qty'] = $qty;
        }
        // query params
        if ($qty2 !== null) {
            if('form' === 'form' && is_array($qty2)) {
                foreach($qty2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['qty[]'] = $qty2;
            }
        }
        // query params
        if (is_array($price)) {
            $price = ObjectSerializer::serializeCollection($price, '', true);
        }
        if ($price !== null) {
            $queryParams['price'] = $price;
        }
        // query params
        if ($price2 !== null) {
            if('form' === 'form' && is_array($price2)) {
                foreach($price2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['price[]'] = $price2;
            }
        }
        // query params
        if (is_array($qtyBetween)) {
            $qtyBetween = ObjectSerializer::serializeCollection($qtyBetween, '', true);
        }
        if ($qtyBetween !== null) {
            $queryParams['qty[between]'] = $qtyBetween;
        }
        // query params
        if (is_array($qtyGt)) {
            $qtyGt = ObjectSerializer::serializeCollection($qtyGt, '', true);
        }
        if ($qtyGt !== null) {
            $queryParams['qty[gt]'] = $qtyGt;
        }
        // query params
        if (is_array($qtyGte)) {
            $qtyGte = ObjectSerializer::serializeCollection($qtyGte, '', true);
        }
        if ($qtyGte !== null) {
            $queryParams['qty[gte]'] = $qtyGte;
        }
        // query params
        if (is_array($qtyLt)) {
            $qtyLt = ObjectSerializer::serializeCollection($qtyLt, '', true);
        }
        if ($qtyLt !== null) {
            $queryParams['qty[lt]'] = $qtyLt;
        }
        // query params
        if (is_array($qtyLte)) {
            $qtyLte = ObjectSerializer::serializeCollection($qtyLte, '', true);
        }
        if ($qtyLte !== null) {
            $queryParams['qty[lte]'] = $qtyLte;
        }
        // query params
        if (is_array($priceBetween)) {
            $priceBetween = ObjectSerializer::serializeCollection($priceBetween, '', true);
        }
        if ($priceBetween !== null) {
            $queryParams['price[between]'] = $priceBetween;
        }
        // query params
        if (is_array($priceGt)) {
            $priceGt = ObjectSerializer::serializeCollection($priceGt, '', true);
        }
        if ($priceGt !== null) {
            $queryParams['price[gt]'] = $priceGt;
        }
        // query params
        if (is_array($priceGte)) {
            $priceGte = ObjectSerializer::serializeCollection($priceGte, '', true);
        }
        if ($priceGte !== null) {
            $queryParams['price[gte]'] = $priceGte;
        }
        // query params
        if (is_array($priceLt)) {
            $priceLt = ObjectSerializer::serializeCollection($priceLt, '', true);
        }
        if ($priceLt !== null) {
            $queryParams['price[lt]'] = $priceLt;
        }
        // query params
        if (is_array($priceLte)) {
            $priceLte = ObjectSerializer::serializeCollection($priceLte, '', true);
        }
        if ($priceLte !== null) {
            $queryParams['price[lte]'] = $priceLte;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($orders !== null) {
            $resourcePath = str_replace(
                '{' . 'orders' . '}',
                ObjectSerializer::toPathValue($orders),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrderItem
     *
     * Removes the Order resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrderItem($id)
    {
        $this->deleteOrderItemWithHttpInfo($id);
    }

    /**
     * Operation deleteOrderItemWithHttpInfo
     *
     * Removes the Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrderItemWithHttpInfo($id)
    {
        $request = $this->deleteOrderItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrderItemAsync
     *
     * Removes the Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrderItemAsync($id)
    {
        return $this->deleteOrderItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrderItemAsyncWithHttpInfo
     *
     * Removes the Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrderItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteOrderItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrderItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrderItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOrderItem'
            );
        }

        $resourcePath = '/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderCollection
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $orderId orderId (optional)
     * @param  string $orderOrderNumber orderOrderNumber (optional)
     * @param  string $orderEmail orderEmail (optional)
     * @param  string $orderPhoneNumber orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode orderOrderStatusCode (optional)
     * @param  string $orderSubtotal orderSubtotal (optional)
     * @param  string $orderTotal orderTotal (optional)
     * @param  string $orderCreatedAt orderCreatedAt (optional)
     * @param  string $orderUpdatedAt orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState orderBillingAddressState (optional)
     * @param  string $createdAtBefore createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter updatedAtStrictlyAfter (optional)
     * @param  string $id id (optional)
     * @param  string[] $id2 id2 (optional)
     * @param  string $orderNumber orderNumber (optional)
     * @param  string $email email (optional)
     * @param  string $phoneNumber phoneNumber (optional)
     * @param  string $orderStatusCode orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 orderStatusCode2 (optional)
     * @param  string $orderType orderType (optional)
     * @param  string[] $orderType2 orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity shippingAddressCity (optional)
     * @param  string $shippingAddressCompany shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode shippingAddressPostcode (optional)
     * @param  string $shippingAddressState shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity billingAddressCity (optional)
     * @param  string $billingAddressCompany billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName billingAddressFirstName (optional)
     * @param  string $billingAddressLastName billingAddressLastName (optional)
     * @param  string $billingAddressPostcode billingAddressPostcode (optional)
     * @param  string $billingAddressState billingAddressState (optional)
     * @param  string $subtotal subtotal (optional)
     * @param  string[] $subtotal2 subtotal2 (optional)
     * @param  string $total total (optional)
     * @param  string[] $total2 total2 (optional)
     * @param  string $subtotalBetween subtotalBetween (optional)
     * @param  string $subtotalGt subtotalGt (optional)
     * @param  string $subtotalGte subtotalGte (optional)
     * @param  string $subtotalLt subtotalLt (optional)
     * @param  string $subtotalLte subtotalLte (optional)
     * @param  string $totalBetween totalBetween (optional)
     * @param  string $totalGt totalGt (optional)
     * @param  string $totalGte totalGte (optional)
     * @param  string $totalLt totalLt (optional)
     * @param  string $totalLte totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGetc[]
     */
    public function getOrderCollection($orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        list($response) = $this->getOrderCollectionWithHttpInfo($orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);
        return $response;
    }

    /**
     * Operation getOrderCollectionWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGetc[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderCollectionWithHttpInfo($orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $request = $this->getOrderCollectionRequest($orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGetc[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGetc[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGetc[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGetc[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderCollectionAsync
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCollectionAsync($orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        return $this->getOrderCollectionAsyncWithHttpInfo($orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Order resources.
     *
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderCollectionAsyncWithHttpInfo($orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGetc[]';
        $request = $this->getOrderCollectionRequest($orderId, $orderOrderNumber, $orderEmail, $orderPhoneNumber, $orderOrderStatusCode, $orderSubtotal, $orderTotal, $orderCreatedAt, $orderUpdatedAt, $orderShippingAddressAddressLine1, $orderShippingAddressAddressLine2, $orderShippingAddressCity, $orderShippingAddressCompany, $orderShippingAddressCountryIso2, $orderShippingAddressFirstName, $orderShippingAddressLastName, $orderShippingAddressPostcode, $orderShippingAddressState, $orderBillingAddressAddressLine1, $orderBillingAddressAddressLine2, $orderBillingAddressCity, $orderBillingAddressCompany, $orderBillingAddressCountryIso2, $orderBillingAddressFirstName, $orderBillingAddressLastName, $orderBillingAddressPostcode, $orderBillingAddressState, $createdAtBefore, $createdAtStrictlyBefore, $createdAtAfter, $createdAtStrictlyAfter, $updatedAtBefore, $updatedAtStrictlyBefore, $updatedAtAfter, $updatedAtStrictlyAfter, $id, $id2, $orderNumber, $email, $phoneNumber, $orderStatusCode, $orderStatusCode2, $orderType, $orderType2, $shippingAddressAddressLine1, $shippingAddressAddressLine2, $shippingAddressCity, $shippingAddressCompany, $shippingAddressCountryIso2, $shippingAddressCountryIso3, $shippingAddressFirstName, $shippingAddressLastName, $shippingAddressPostcode, $shippingAddressState, $billingAddressAddressLine1, $billingAddressAddressLine2, $billingAddressCity, $billingAddressCompany, $billingAddressCountryIso2, $billingAddressCountryIso3, $billingAddressFirstName, $billingAddressLastName, $billingAddressPostcode, $billingAddressState, $subtotal, $subtotal2, $total, $total2, $subtotalBetween, $subtotalGt, $subtotalGte, $subtotalLt, $subtotalLte, $totalBetween, $totalGt, $totalGte, $totalLt, $totalLte, $page, $itemsPerPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderCollection'
     *
     * @param  string $orderId (optional)
     * @param  string $orderOrderNumber (optional)
     * @param  string $orderEmail (optional)
     * @param  string $orderPhoneNumber (optional)
     * @param  string $orderOrderStatusCode (optional)
     * @param  string $orderSubtotal (optional)
     * @param  string $orderTotal (optional)
     * @param  string $orderCreatedAt (optional)
     * @param  string $orderUpdatedAt (optional)
     * @param  string $orderShippingAddressAddressLine1 (optional)
     * @param  string $orderShippingAddressAddressLine2 (optional)
     * @param  string $orderShippingAddressCity (optional)
     * @param  string $orderShippingAddressCompany (optional)
     * @param  string $orderShippingAddressCountryIso2 (optional)
     * @param  string $orderShippingAddressFirstName (optional)
     * @param  string $orderShippingAddressLastName (optional)
     * @param  string $orderShippingAddressPostcode (optional)
     * @param  string $orderShippingAddressState (optional)
     * @param  string $orderBillingAddressAddressLine1 (optional)
     * @param  string $orderBillingAddressAddressLine2 (optional)
     * @param  string $orderBillingAddressCity (optional)
     * @param  string $orderBillingAddressCompany (optional)
     * @param  string $orderBillingAddressCountryIso2 (optional)
     * @param  string $orderBillingAddressFirstName (optional)
     * @param  string $orderBillingAddressLastName (optional)
     * @param  string $orderBillingAddressPostcode (optional)
     * @param  string $orderBillingAddressState (optional)
     * @param  string $createdAtBefore (optional)
     * @param  string $createdAtStrictlyBefore (optional)
     * @param  string $createdAtAfter (optional)
     * @param  string $createdAtStrictlyAfter (optional)
     * @param  string $updatedAtBefore (optional)
     * @param  string $updatedAtStrictlyBefore (optional)
     * @param  string $updatedAtAfter (optional)
     * @param  string $updatedAtStrictlyAfter (optional)
     * @param  string $id (optional)
     * @param  string[] $id2 (optional)
     * @param  string $orderNumber (optional)
     * @param  string $email (optional)
     * @param  string $phoneNumber (optional)
     * @param  string $orderStatusCode (optional)
     * @param  string[] $orderStatusCode2 (optional)
     * @param  string $orderType (optional)
     * @param  string[] $orderType2 (optional)
     * @param  string $shippingAddressAddressLine1 (optional)
     * @param  string $shippingAddressAddressLine2 (optional)
     * @param  string $shippingAddressCity (optional)
     * @param  string $shippingAddressCompany (optional)
     * @param  string $shippingAddressCountryIso2 (optional)
     * @param  string[] $shippingAddressCountryIso3 (optional)
     * @param  string $shippingAddressFirstName (optional)
     * @param  string $shippingAddressLastName (optional)
     * @param  string $shippingAddressPostcode (optional)
     * @param  string $shippingAddressState (optional)
     * @param  string $billingAddressAddressLine1 (optional)
     * @param  string $billingAddressAddressLine2 (optional)
     * @param  string $billingAddressCity (optional)
     * @param  string $billingAddressCompany (optional)
     * @param  string $billingAddressCountryIso2 (optional)
     * @param  string[] $billingAddressCountryIso3 (optional)
     * @param  string $billingAddressFirstName (optional)
     * @param  string $billingAddressLastName (optional)
     * @param  string $billingAddressPostcode (optional)
     * @param  string $billingAddressState (optional)
     * @param  string $subtotal (optional)
     * @param  string[] $subtotal2 (optional)
     * @param  string $total (optional)
     * @param  string[] $total2 (optional)
     * @param  string $subtotalBetween (optional)
     * @param  string $subtotalGt (optional)
     * @param  string $subtotalGte (optional)
     * @param  string $subtotalLt (optional)
     * @param  string $subtotalLte (optional)
     * @param  string $totalBetween (optional)
     * @param  string $totalGt (optional)
     * @param  string $totalGte (optional)
     * @param  string $totalLt (optional)
     * @param  string $totalLte (optional)
     * @param  int $page The collection page number (optional)
     * @param  int $itemsPerPage The number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderCollectionRequest($orderId = null, $orderOrderNumber = null, $orderEmail = null, $orderPhoneNumber = null, $orderOrderStatusCode = null, $orderSubtotal = null, $orderTotal = null, $orderCreatedAt = null, $orderUpdatedAt = null, $orderShippingAddressAddressLine1 = null, $orderShippingAddressAddressLine2 = null, $orderShippingAddressCity = null, $orderShippingAddressCompany = null, $orderShippingAddressCountryIso2 = null, $orderShippingAddressFirstName = null, $orderShippingAddressLastName = null, $orderShippingAddressPostcode = null, $orderShippingAddressState = null, $orderBillingAddressAddressLine1 = null, $orderBillingAddressAddressLine2 = null, $orderBillingAddressCity = null, $orderBillingAddressCompany = null, $orderBillingAddressCountryIso2 = null, $orderBillingAddressFirstName = null, $orderBillingAddressLastName = null, $orderBillingAddressPostcode = null, $orderBillingAddressState = null, $createdAtBefore = null, $createdAtStrictlyBefore = null, $createdAtAfter = null, $createdAtStrictlyAfter = null, $updatedAtBefore = null, $updatedAtStrictlyBefore = null, $updatedAtAfter = null, $updatedAtStrictlyAfter = null, $id = null, $id2 = null, $orderNumber = null, $email = null, $phoneNumber = null, $orderStatusCode = null, $orderStatusCode2 = null, $orderType = null, $orderType2 = null, $shippingAddressAddressLine1 = null, $shippingAddressAddressLine2 = null, $shippingAddressCity = null, $shippingAddressCompany = null, $shippingAddressCountryIso2 = null, $shippingAddressCountryIso3 = null, $shippingAddressFirstName = null, $shippingAddressLastName = null, $shippingAddressPostcode = null, $shippingAddressState = null, $billingAddressAddressLine1 = null, $billingAddressAddressLine2 = null, $billingAddressCity = null, $billingAddressCompany = null, $billingAddressCountryIso2 = null, $billingAddressCountryIso3 = null, $billingAddressFirstName = null, $billingAddressLastName = null, $billingAddressPostcode = null, $billingAddressState = null, $subtotal = null, $subtotal2 = null, $total = null, $total2 = null, $subtotalBetween = null, $subtotalGt = null, $subtotalGte = null, $subtotalLt = null, $subtotalLte = null, $totalBetween = null, $totalGt = null, $totalGte = null, $totalLt = null, $totalLte = null, $page = null, $itemsPerPage = null)
    {

        $resourcePath = '/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($orderId)) {
            $orderId = ObjectSerializer::serializeCollection($orderId, '', true);
        }
        if ($orderId !== null) {
            $queryParams['order[id]'] = $orderId;
        }
        // query params
        if (is_array($orderOrderNumber)) {
            $orderOrderNumber = ObjectSerializer::serializeCollection($orderOrderNumber, '', true);
        }
        if ($orderOrderNumber !== null) {
            $queryParams['order[orderNumber]'] = $orderOrderNumber;
        }
        // query params
        if (is_array($orderEmail)) {
            $orderEmail = ObjectSerializer::serializeCollection($orderEmail, '', true);
        }
        if ($orderEmail !== null) {
            $queryParams['order[email]'] = $orderEmail;
        }
        // query params
        if (is_array($orderPhoneNumber)) {
            $orderPhoneNumber = ObjectSerializer::serializeCollection($orderPhoneNumber, '', true);
        }
        if ($orderPhoneNumber !== null) {
            $queryParams['order[phoneNumber]'] = $orderPhoneNumber;
        }
        // query params
        if (is_array($orderOrderStatusCode)) {
            $orderOrderStatusCode = ObjectSerializer::serializeCollection($orderOrderStatusCode, '', true);
        }
        if ($orderOrderStatusCode !== null) {
            $queryParams['order[orderStatus.code]'] = $orderOrderStatusCode;
        }
        // query params
        if (is_array($orderSubtotal)) {
            $orderSubtotal = ObjectSerializer::serializeCollection($orderSubtotal, '', true);
        }
        if ($orderSubtotal !== null) {
            $queryParams['order[subtotal]'] = $orderSubtotal;
        }
        // query params
        if (is_array($orderTotal)) {
            $orderTotal = ObjectSerializer::serializeCollection($orderTotal, '', true);
        }
        if ($orderTotal !== null) {
            $queryParams['order[total]'] = $orderTotal;
        }
        // query params
        if (is_array($orderCreatedAt)) {
            $orderCreatedAt = ObjectSerializer::serializeCollection($orderCreatedAt, '', true);
        }
        if ($orderCreatedAt !== null) {
            $queryParams['order[createdAt]'] = $orderCreatedAt;
        }
        // query params
        if (is_array($orderUpdatedAt)) {
            $orderUpdatedAt = ObjectSerializer::serializeCollection($orderUpdatedAt, '', true);
        }
        if ($orderUpdatedAt !== null) {
            $queryParams['order[updatedAt]'] = $orderUpdatedAt;
        }
        // query params
        if (is_array($orderShippingAddressAddressLine1)) {
            $orderShippingAddressAddressLine1 = ObjectSerializer::serializeCollection($orderShippingAddressAddressLine1, '', true);
        }
        if ($orderShippingAddressAddressLine1 !== null) {
            $queryParams['order[shippingAddress.addressLine1]'] = $orderShippingAddressAddressLine1;
        }
        // query params
        if (is_array($orderShippingAddressAddressLine2)) {
            $orderShippingAddressAddressLine2 = ObjectSerializer::serializeCollection($orderShippingAddressAddressLine2, '', true);
        }
        if ($orderShippingAddressAddressLine2 !== null) {
            $queryParams['order[shippingAddress.addressLine2]'] = $orderShippingAddressAddressLine2;
        }
        // query params
        if (is_array($orderShippingAddressCity)) {
            $orderShippingAddressCity = ObjectSerializer::serializeCollection($orderShippingAddressCity, '', true);
        }
        if ($orderShippingAddressCity !== null) {
            $queryParams['order[shippingAddress.city]'] = $orderShippingAddressCity;
        }
        // query params
        if (is_array($orderShippingAddressCompany)) {
            $orderShippingAddressCompany = ObjectSerializer::serializeCollection($orderShippingAddressCompany, '', true);
        }
        if ($orderShippingAddressCompany !== null) {
            $queryParams['order[shippingAddress.company]'] = $orderShippingAddressCompany;
        }
        // query params
        if (is_array($orderShippingAddressCountryIso2)) {
            $orderShippingAddressCountryIso2 = ObjectSerializer::serializeCollection($orderShippingAddressCountryIso2, '', true);
        }
        if ($orderShippingAddressCountryIso2 !== null) {
            $queryParams['order[shippingAddress.countryIso2]'] = $orderShippingAddressCountryIso2;
        }
        // query params
        if (is_array($orderShippingAddressFirstName)) {
            $orderShippingAddressFirstName = ObjectSerializer::serializeCollection($orderShippingAddressFirstName, '', true);
        }
        if ($orderShippingAddressFirstName !== null) {
            $queryParams['order[shippingAddress.firstName]'] = $orderShippingAddressFirstName;
        }
        // query params
        if (is_array($orderShippingAddressLastName)) {
            $orderShippingAddressLastName = ObjectSerializer::serializeCollection($orderShippingAddressLastName, '', true);
        }
        if ($orderShippingAddressLastName !== null) {
            $queryParams['order[shippingAddress.lastName]'] = $orderShippingAddressLastName;
        }
        // query params
        if (is_array($orderShippingAddressPostcode)) {
            $orderShippingAddressPostcode = ObjectSerializer::serializeCollection($orderShippingAddressPostcode, '', true);
        }
        if ($orderShippingAddressPostcode !== null) {
            $queryParams['order[shippingAddress.postcode]'] = $orderShippingAddressPostcode;
        }
        // query params
        if (is_array($orderShippingAddressState)) {
            $orderShippingAddressState = ObjectSerializer::serializeCollection($orderShippingAddressState, '', true);
        }
        if ($orderShippingAddressState !== null) {
            $queryParams['order[shippingAddress.state]'] = $orderShippingAddressState;
        }
        // query params
        if (is_array($orderBillingAddressAddressLine1)) {
            $orderBillingAddressAddressLine1 = ObjectSerializer::serializeCollection($orderBillingAddressAddressLine1, '', true);
        }
        if ($orderBillingAddressAddressLine1 !== null) {
            $queryParams['order[billingAddress.addressLine1]'] = $orderBillingAddressAddressLine1;
        }
        // query params
        if (is_array($orderBillingAddressAddressLine2)) {
            $orderBillingAddressAddressLine2 = ObjectSerializer::serializeCollection($orderBillingAddressAddressLine2, '', true);
        }
        if ($orderBillingAddressAddressLine2 !== null) {
            $queryParams['order[billingAddress.addressLine2]'] = $orderBillingAddressAddressLine2;
        }
        // query params
        if (is_array($orderBillingAddressCity)) {
            $orderBillingAddressCity = ObjectSerializer::serializeCollection($orderBillingAddressCity, '', true);
        }
        if ($orderBillingAddressCity !== null) {
            $queryParams['order[billingAddress.city]'] = $orderBillingAddressCity;
        }
        // query params
        if (is_array($orderBillingAddressCompany)) {
            $orderBillingAddressCompany = ObjectSerializer::serializeCollection($orderBillingAddressCompany, '', true);
        }
        if ($orderBillingAddressCompany !== null) {
            $queryParams['order[billingAddress.company]'] = $orderBillingAddressCompany;
        }
        // query params
        if (is_array($orderBillingAddressCountryIso2)) {
            $orderBillingAddressCountryIso2 = ObjectSerializer::serializeCollection($orderBillingAddressCountryIso2, '', true);
        }
        if ($orderBillingAddressCountryIso2 !== null) {
            $queryParams['order[billingAddress.countryIso2]'] = $orderBillingAddressCountryIso2;
        }
        // query params
        if (is_array($orderBillingAddressFirstName)) {
            $orderBillingAddressFirstName = ObjectSerializer::serializeCollection($orderBillingAddressFirstName, '', true);
        }
        if ($orderBillingAddressFirstName !== null) {
            $queryParams['order[billingAddress.firstName]'] = $orderBillingAddressFirstName;
        }
        // query params
        if (is_array($orderBillingAddressLastName)) {
            $orderBillingAddressLastName = ObjectSerializer::serializeCollection($orderBillingAddressLastName, '', true);
        }
        if ($orderBillingAddressLastName !== null) {
            $queryParams['order[billingAddress.lastName]'] = $orderBillingAddressLastName;
        }
        // query params
        if (is_array($orderBillingAddressPostcode)) {
            $orderBillingAddressPostcode = ObjectSerializer::serializeCollection($orderBillingAddressPostcode, '', true);
        }
        if ($orderBillingAddressPostcode !== null) {
            $queryParams['order[billingAddress.postcode]'] = $orderBillingAddressPostcode;
        }
        // query params
        if (is_array($orderBillingAddressState)) {
            $orderBillingAddressState = ObjectSerializer::serializeCollection($orderBillingAddressState, '', true);
        }
        if ($orderBillingAddressState !== null) {
            $queryParams['order[billingAddress.state]'] = $orderBillingAddressState;
        }
        // query params
        if (is_array($createdAtBefore)) {
            $createdAtBefore = ObjectSerializer::serializeCollection($createdAtBefore, '', true);
        }
        if ($createdAtBefore !== null) {
            $queryParams['createdAt[before]'] = $createdAtBefore;
        }
        // query params
        if (is_array($createdAtStrictlyBefore)) {
            $createdAtStrictlyBefore = ObjectSerializer::serializeCollection($createdAtStrictlyBefore, '', true);
        }
        if ($createdAtStrictlyBefore !== null) {
            $queryParams['createdAt[strictly_before]'] = $createdAtStrictlyBefore;
        }
        // query params
        if (is_array($createdAtAfter)) {
            $createdAtAfter = ObjectSerializer::serializeCollection($createdAtAfter, '', true);
        }
        if ($createdAtAfter !== null) {
            $queryParams['createdAt[after]'] = $createdAtAfter;
        }
        // query params
        if (is_array($createdAtStrictlyAfter)) {
            $createdAtStrictlyAfter = ObjectSerializer::serializeCollection($createdAtStrictlyAfter, '', true);
        }
        if ($createdAtStrictlyAfter !== null) {
            $queryParams['createdAt[strictly_after]'] = $createdAtStrictlyAfter;
        }
        // query params
        if (is_array($updatedAtBefore)) {
            $updatedAtBefore = ObjectSerializer::serializeCollection($updatedAtBefore, '', true);
        }
        if ($updatedAtBefore !== null) {
            $queryParams['updatedAt[before]'] = $updatedAtBefore;
        }
        // query params
        if (is_array($updatedAtStrictlyBefore)) {
            $updatedAtStrictlyBefore = ObjectSerializer::serializeCollection($updatedAtStrictlyBefore, '', true);
        }
        if ($updatedAtStrictlyBefore !== null) {
            $queryParams['updatedAt[strictly_before]'] = $updatedAtStrictlyBefore;
        }
        // query params
        if (is_array($updatedAtAfter)) {
            $updatedAtAfter = ObjectSerializer::serializeCollection($updatedAtAfter, '', true);
        }
        if ($updatedAtAfter !== null) {
            $queryParams['updatedAt[after]'] = $updatedAtAfter;
        }
        // query params
        if (is_array($updatedAtStrictlyAfter)) {
            $updatedAtStrictlyAfter = ObjectSerializer::serializeCollection($updatedAtStrictlyAfter, '', true);
        }
        if ($updatedAtStrictlyAfter !== null) {
            $queryParams['updatedAt[strictly_after]'] = $updatedAtStrictlyAfter;
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, '', true);
        }
        if ($id !== null) {
            $queryParams['id'] = $id;
        }
        // query params
        if ($id2 !== null) {
            if('form' === 'form' && is_array($id2)) {
                foreach($id2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id2;
            }
        }
        // query params
        if (is_array($orderNumber)) {
            $orderNumber = ObjectSerializer::serializeCollection($orderNumber, '', true);
        }
        if ($orderNumber !== null) {
            $queryParams['orderNumber'] = $orderNumber;
        }
        // query params
        if (is_array($email)) {
            $email = ObjectSerializer::serializeCollection($email, '', true);
        }
        if ($email !== null) {
            $queryParams['email'] = $email;
        }
        // query params
        if (is_array($phoneNumber)) {
            $phoneNumber = ObjectSerializer::serializeCollection($phoneNumber, '', true);
        }
        if ($phoneNumber !== null) {
            $queryParams['phoneNumber'] = $phoneNumber;
        }
        // query params
        if (is_array($orderStatusCode)) {
            $orderStatusCode = ObjectSerializer::serializeCollection($orderStatusCode, '', true);
        }
        if ($orderStatusCode !== null) {
            $queryParams['orderStatus.code'] = $orderStatusCode;
        }
        // query params
        if ($orderStatusCode2 !== null) {
            if('form' === 'form' && is_array($orderStatusCode2)) {
                foreach($orderStatusCode2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderStatus.code[]'] = $orderStatusCode2;
            }
        }
        // query params
        if (is_array($orderType)) {
            $orderType = ObjectSerializer::serializeCollection($orderType, '', true);
        }
        if ($orderType !== null) {
            $queryParams['orderType'] = $orderType;
        }
        // query params
        if ($orderType2 !== null) {
            if('form' === 'form' && is_array($orderType2)) {
                foreach($orderType2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['orderType[]'] = $orderType2;
            }
        }
        // query params
        if (is_array($shippingAddressAddressLine1)) {
            $shippingAddressAddressLine1 = ObjectSerializer::serializeCollection($shippingAddressAddressLine1, '', true);
        }
        if ($shippingAddressAddressLine1 !== null) {
            $queryParams['shippingAddress.addressLine1'] = $shippingAddressAddressLine1;
        }
        // query params
        if (is_array($shippingAddressAddressLine2)) {
            $shippingAddressAddressLine2 = ObjectSerializer::serializeCollection($shippingAddressAddressLine2, '', true);
        }
        if ($shippingAddressAddressLine2 !== null) {
            $queryParams['shippingAddress.addressLine2'] = $shippingAddressAddressLine2;
        }
        // query params
        if (is_array($shippingAddressCity)) {
            $shippingAddressCity = ObjectSerializer::serializeCollection($shippingAddressCity, '', true);
        }
        if ($shippingAddressCity !== null) {
            $queryParams['shippingAddress.city'] = $shippingAddressCity;
        }
        // query params
        if (is_array($shippingAddressCompany)) {
            $shippingAddressCompany = ObjectSerializer::serializeCollection($shippingAddressCompany, '', true);
        }
        if ($shippingAddressCompany !== null) {
            $queryParams['shippingAddress.company'] = $shippingAddressCompany;
        }
        // query params
        if (is_array($shippingAddressCountryIso2)) {
            $shippingAddressCountryIso2 = ObjectSerializer::serializeCollection($shippingAddressCountryIso2, '', true);
        }
        if ($shippingAddressCountryIso2 !== null) {
            $queryParams['shippingAddress.countryIso2'] = $shippingAddressCountryIso2;
        }
        // query params
        if ($shippingAddressCountryIso3 !== null) {
            if('form' === 'form' && is_array($shippingAddressCountryIso3)) {
                foreach($shippingAddressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['shippingAddress.countryIso2[]'] = $shippingAddressCountryIso3;
            }
        }
        // query params
        if (is_array($shippingAddressFirstName)) {
            $shippingAddressFirstName = ObjectSerializer::serializeCollection($shippingAddressFirstName, '', true);
        }
        if ($shippingAddressFirstName !== null) {
            $queryParams['shippingAddress.firstName'] = $shippingAddressFirstName;
        }
        // query params
        if (is_array($shippingAddressLastName)) {
            $shippingAddressLastName = ObjectSerializer::serializeCollection($shippingAddressLastName, '', true);
        }
        if ($shippingAddressLastName !== null) {
            $queryParams['shippingAddress.lastName'] = $shippingAddressLastName;
        }
        // query params
        if (is_array($shippingAddressPostcode)) {
            $shippingAddressPostcode = ObjectSerializer::serializeCollection($shippingAddressPostcode, '', true);
        }
        if ($shippingAddressPostcode !== null) {
            $queryParams['shippingAddress.postcode'] = $shippingAddressPostcode;
        }
        // query params
        if (is_array($shippingAddressState)) {
            $shippingAddressState = ObjectSerializer::serializeCollection($shippingAddressState, '', true);
        }
        if ($shippingAddressState !== null) {
            $queryParams['shippingAddress.state'] = $shippingAddressState;
        }
        // query params
        if (is_array($billingAddressAddressLine1)) {
            $billingAddressAddressLine1 = ObjectSerializer::serializeCollection($billingAddressAddressLine1, '', true);
        }
        if ($billingAddressAddressLine1 !== null) {
            $queryParams['billingAddress.addressLine1'] = $billingAddressAddressLine1;
        }
        // query params
        if (is_array($billingAddressAddressLine2)) {
            $billingAddressAddressLine2 = ObjectSerializer::serializeCollection($billingAddressAddressLine2, '', true);
        }
        if ($billingAddressAddressLine2 !== null) {
            $queryParams['billingAddress.addressLine2'] = $billingAddressAddressLine2;
        }
        // query params
        if (is_array($billingAddressCity)) {
            $billingAddressCity = ObjectSerializer::serializeCollection($billingAddressCity, '', true);
        }
        if ($billingAddressCity !== null) {
            $queryParams['billingAddress.city'] = $billingAddressCity;
        }
        // query params
        if (is_array($billingAddressCompany)) {
            $billingAddressCompany = ObjectSerializer::serializeCollection($billingAddressCompany, '', true);
        }
        if ($billingAddressCompany !== null) {
            $queryParams['billingAddress.company'] = $billingAddressCompany;
        }
        // query params
        if (is_array($billingAddressCountryIso2)) {
            $billingAddressCountryIso2 = ObjectSerializer::serializeCollection($billingAddressCountryIso2, '', true);
        }
        if ($billingAddressCountryIso2 !== null) {
            $queryParams['billingAddress.countryIso2'] = $billingAddressCountryIso2;
        }
        // query params
        if ($billingAddressCountryIso3 !== null) {
            if('form' === 'form' && is_array($billingAddressCountryIso3)) {
                foreach($billingAddressCountryIso3 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['billingAddress.countryIso2[]'] = $billingAddressCountryIso3;
            }
        }
        // query params
        if (is_array($billingAddressFirstName)) {
            $billingAddressFirstName = ObjectSerializer::serializeCollection($billingAddressFirstName, '', true);
        }
        if ($billingAddressFirstName !== null) {
            $queryParams['billingAddress.firstName'] = $billingAddressFirstName;
        }
        // query params
        if (is_array($billingAddressLastName)) {
            $billingAddressLastName = ObjectSerializer::serializeCollection($billingAddressLastName, '', true);
        }
        if ($billingAddressLastName !== null) {
            $queryParams['billingAddress.lastName'] = $billingAddressLastName;
        }
        // query params
        if (is_array($billingAddressPostcode)) {
            $billingAddressPostcode = ObjectSerializer::serializeCollection($billingAddressPostcode, '', true);
        }
        if ($billingAddressPostcode !== null) {
            $queryParams['billingAddress.postcode'] = $billingAddressPostcode;
        }
        // query params
        if (is_array($billingAddressState)) {
            $billingAddressState = ObjectSerializer::serializeCollection($billingAddressState, '', true);
        }
        if ($billingAddressState !== null) {
            $queryParams['billingAddress.state'] = $billingAddressState;
        }
        // query params
        if (is_array($subtotal)) {
            $subtotal = ObjectSerializer::serializeCollection($subtotal, '', true);
        }
        if ($subtotal !== null) {
            $queryParams['subtotal'] = $subtotal;
        }
        // query params
        if ($subtotal2 !== null) {
            if('form' === 'form' && is_array($subtotal2)) {
                foreach($subtotal2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subtotal[]'] = $subtotal2;
            }
        }
        // query params
        if (is_array($total)) {
            $total = ObjectSerializer::serializeCollection($total, '', true);
        }
        if ($total !== null) {
            $queryParams['total'] = $total;
        }
        // query params
        if ($total2 !== null) {
            if('form' === 'form' && is_array($total2)) {
                foreach($total2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['total[]'] = $total2;
            }
        }
        // query params
        if (is_array($subtotalBetween)) {
            $subtotalBetween = ObjectSerializer::serializeCollection($subtotalBetween, '', true);
        }
        if ($subtotalBetween !== null) {
            $queryParams['subtotal[between]'] = $subtotalBetween;
        }
        // query params
        if (is_array($subtotalGt)) {
            $subtotalGt = ObjectSerializer::serializeCollection($subtotalGt, '', true);
        }
        if ($subtotalGt !== null) {
            $queryParams['subtotal[gt]'] = $subtotalGt;
        }
        // query params
        if (is_array($subtotalGte)) {
            $subtotalGte = ObjectSerializer::serializeCollection($subtotalGte, '', true);
        }
        if ($subtotalGte !== null) {
            $queryParams['subtotal[gte]'] = $subtotalGte;
        }
        // query params
        if (is_array($subtotalLt)) {
            $subtotalLt = ObjectSerializer::serializeCollection($subtotalLt, '', true);
        }
        if ($subtotalLt !== null) {
            $queryParams['subtotal[lt]'] = $subtotalLt;
        }
        // query params
        if (is_array($subtotalLte)) {
            $subtotalLte = ObjectSerializer::serializeCollection($subtotalLte, '', true);
        }
        if ($subtotalLte !== null) {
            $queryParams['subtotal[lte]'] = $subtotalLte;
        }
        // query params
        if (is_array($totalBetween)) {
            $totalBetween = ObjectSerializer::serializeCollection($totalBetween, '', true);
        }
        if ($totalBetween !== null) {
            $queryParams['total[between]'] = $totalBetween;
        }
        // query params
        if (is_array($totalGt)) {
            $totalGt = ObjectSerializer::serializeCollection($totalGt, '', true);
        }
        if ($totalGt !== null) {
            $queryParams['total[gt]'] = $totalGt;
        }
        // query params
        if (is_array($totalGte)) {
            $totalGte = ObjectSerializer::serializeCollection($totalGte, '', true);
        }
        if ($totalGte !== null) {
            $queryParams['total[gte]'] = $totalGte;
        }
        // query params
        if (is_array($totalLt)) {
            $totalLt = ObjectSerializer::serializeCollection($totalLt, '', true);
        }
        if ($totalLt !== null) {
            $queryParams['total[lt]'] = $totalLt;
        }
        // query params
        if (is_array($totalLte)) {
            $totalLte = ObjectSerializer::serializeCollection($totalLte, '', true);
        }
        if ($totalLte !== null) {
            $queryParams['total[lte]'] = $totalLte;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }
        // query params
        if (is_array($itemsPerPage)) {
            $itemsPerPage = ObjectSerializer::serializeCollection($itemsPerPage, '', true);
        }
        if ($itemsPerPage !== null) {
            $queryParams['itemsPerPage'] = $itemsPerPage;
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderItem
     *
     * Retrieves a Order resource.
     *
     * @param  string $id id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGet
     */
    public function getOrderItem($id)
    {
        list($response) = $this->getOrderItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOrderItemWithHttpInfo
     *
     * Retrieves a Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderItemWithHttpInfo($id)
    {
        $request = $this->getOrderItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderItemAsync
     *
     * Retrieves a Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderItemAsync($id)
    {
        return $this->getOrderItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderItemAsyncWithHttpInfo
     *
     * Retrieves a Order resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderItemAsyncWithHttpInfo($id)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGet';
        $request = $this->getOrderItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOrderItem'
            );
        }

        $resourcePath = '/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrderCollection
     *
     * Creates a Order resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderPost $order The new Order resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGet
     */
    public function postOrderCollection($order = null)
    {
        list($response) = $this->postOrderCollectionWithHttpInfo($order);
        return $response;
    }

    /**
     * Operation postOrderCollectionWithHttpInfo
     *
     * Creates a Order resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderPost $order The new Order resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrderCollectionWithHttpInfo($order = null)
    {
        $request = $this->postOrderCollectionRequest($order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\TrackMage\Client\Swagger\Model\OrderGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrderCollectionAsync
     *
     * Creates a Order resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderPost $order The new Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderCollectionAsync($order = null)
    {
        return $this->postOrderCollectionAsyncWithHttpInfo($order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrderCollectionAsyncWithHttpInfo
     *
     * Creates a Order resource.
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderPost $order The new Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderCollectionAsyncWithHttpInfo($order = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGet';
        $request = $this->postOrderCollectionRequest($order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrderCollection'
     *
     * @param  \TrackMage\Client\Swagger\Model\OrderPost $order The new Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOrderCollectionRequest($order = null)
    {

        $resourcePath = '/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($order)) {
            $_tempBody = $order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOrderItem
     *
     * Replaces the Order resource.
     *
     * @param  string $id id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderPut $order The updated Order resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TrackMage\Client\Swagger\Model\OrderGet
     */
    public function putOrderItem($id, $order = null)
    {
        list($response) = $this->putOrderItemWithHttpInfo($id, $order);
        return $response;
    }

    /**
     * Operation putOrderItemWithHttpInfo
     *
     * Replaces the Order resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderPut $order The updated Order resource (optional)
     *
     * @throws \TrackMage\Client\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TrackMage\Client\Swagger\Model\OrderGet, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrderItemWithHttpInfo($id, $order = null)
    {
        $request = $this->putOrderItemRequest($id, $order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TrackMage\Client\Swagger\Model\OrderGet' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TrackMage\Client\Swagger\Model\OrderGet', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TrackMage\Client\Swagger\Model\OrderGet';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TrackMage\Client\Swagger\Model\OrderGet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOrderItemAsync
     *
     * Replaces the Order resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderPut $order The updated Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderItemAsync($id, $order = null)
    {
        return $this->putOrderItemAsyncWithHttpInfo($id, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOrderItemAsyncWithHttpInfo
     *
     * Replaces the Order resource.
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderPut $order The updated Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderItemAsyncWithHttpInfo($id, $order = null)
    {
        $returnType = '\TrackMage\Client\Swagger\Model\OrderGet';
        $request = $this->putOrderItemRequest($id, $order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOrderItem'
     *
     * @param  string $id (required)
     * @param  \TrackMage\Client\Swagger\Model\OrderPut $order The updated Order resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOrderItemRequest($id, $order = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putOrderItem'
            );
        }

        $resourcePath = '/orders/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($order)) {
            $_tempBody = $order;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json', 'application/json', 'text/csv', 'text/html'],
                ['application/ld+json', 'application/json', 'text/csv', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
